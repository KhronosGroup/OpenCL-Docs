// Copyright 2017-2019 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[opencl2_0]]
== OpenCL 2.0

An OpenCL 2.0 environment must accept SPIR-V 1.0 modules if it includes the
optional extension `cl_khr_il_program` in the host API
`CL_PLATFORM_EXTENSIONS` or `CL_DEVICE_EXTENSIONS` string.

=== Full Profile

An OpenCL 2.0 Full Profile environment is guaranteed to support the
following SPIR-V capabilities:

  * *Addresses*
  * *DeviceEnqueue*
  * *Float16Buffer*
  * *GenericPointer*
  * *Groups*
  * *Int64*
  * *Int16*
  * *Int8*
  * *Kernel*
  * *Linkage*
  * *Pipes*
  * *Vector16*

The following capabilities may be optionally supported:

  * *ImageBasic*, if `CL_DEVICE_IMAGE_SUPPORT` is `CL_TRUE`
  * *Float64*, if the device supports double precision floating-point

If *ImageBasic* is supported then the following capabilities must also be
supported:

  * *ImageReadWrite*
  * *LiteralSampler*
  * *Sampled1D*
  * *Image1D*
  * *SampledBuffer*
  * *ImageBuffer*

=== Embedded Profile

An OpenCL 2.0 Embedded Profile environment is guaranteed to support the
following SPIR-V capabilities:

  * *Addresses*
  * *DeviceEnqueue*
  * *Float16Buffer*
  * *GenericPointer*
  * *Groups*
  * *Int16*
  * *Int8*
  * *Kernel*
  * *Linkage*
  * *Pipes*
  * *Vector16*

Furthermore, the following capabilities may optionally be supported:

  * *ImageBasic*, if `CL_DEVICE_IMAGE_SUPPORT` is `CL_TRUE`
  * *Float64*, if the device supports double precision floating-point

If *ImageBasic* is supported then the following capabilities must also be
supported:

  * *ImageReadWrite*
  * *LiteralSampler*
  * *Sampled1D*
  * *Image1D*
  * *SampledBuffer*
  * *ImageBuffer*

=== Validation Rules

The following are a list of validation rules for SPIR-V modules executing in
an OpenCL 2.0 environment:

_Scope_ for _Execution_ is generally limited to:

  * *Workgroup*

_Scope_ for _Memory_ is generally limited to:

  * *CrossDevice*
  * *Device*
  * *Workgroup*
  * *Invocation*

The _Pointer_ operand to all *Atomic Instructions* may additionally be a
pointer to the *Generic* _Storage Class_, however behavior is still 
undefined if the *Generic* pointer represents a pointer to the *Function*
_Storage Class_.
