// Copyright 2017-2019 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[consumption]]
== SPIR-V Consumption

This section describes common properties of all OpenCL environments.
Subsequent sections describe environments for specific versions of OpenCL,
and how an environment may additionally be modified via OpenCL or SPIR-V
extensions.

A SPIR-V module passed to an OpenCL environment is interpreted as a series
of 32-bit words in host endianness, with literal strings packed as described
in the SPIR-V specification.
The first few words of the SPIR-V module must be a magic number and a SPIR-V
version number, as described in the SPIR-V specification.

// Consider a description how to use this document:
// 1) Start with the SPIR-V version as described by the module.
// 2) Subtract any restrictions defined by the environment.
// 3) Add back any additional capabilities added by extensions?

=== Validation Rules

The following are a list of validation rules that apply to SPIR-V modules
executing in all OpenCL environments:

  * The _Execution Model_ declared in *OpEntryPoint* must be *Kernel*.
  * The _Addressing Model_ declared in *OpMemoryModel* must be either
    *Physical32* or *Physical64*:
  ** Modules indicating a *Physical32* _Addressing Model_ are valid for
     OpenCL devices reporting `32` for `CL_DEVICE_ADDRESS_BITS`.
  ** Modules indicating a *Physical64* _Addressing Model_ are valid for
     OpenCL devices reporting `64` for `CL_DEVICE_ADDRESS_BITS`.
  * The _Memory Model_ declared in *OpMemoryModel* must be *OpenCL*.
  * For all *OpTypeInt* integer type-declaration instructions:
  ** _Signedness_ must be 0, indicating no signedness semantics.
  * For all *OpTypeImage* type-declaration instructions:
  ** _Sampled Type_ must be *OpTypeVoid*.
  ** _Sampled_ must be 0, indicating that the image usage will be known at
     run time, not at compile time.
  ** _MS_ must be 0, indicating single-sampled content.
  ** _Arrayed_ may only be set to 1, indicating arrayed content, when _Dim_
     is set to *1D* or *2D*.
  ** _Image Format_ must be *Unknown*, indicating that the image does not
     have a specified format.
  ** The optional image _Access Qualifier_ must be present.
  * The image write instruction *OpImageWrite* must not include any optional
    _Image Operands_.
  * The image read instructions *OpImageRead* and *OpImageSampleExplicitLod* 
    must not include the optional _Image Operand_ *ConstOffset*.
  * For all *Atomic Instructions*:
  ** Only 32-bit integer types are supported for the _Result Type_ and/or
     type of _Value_.
  ** The _Pointer_ operand must be a pointer to the *Function*, *Workgroup*,
     or *CrossWorkGroup* _Storage Classes_.  Note that an *Atomic Instruction*
     on a pointer to the *Function* _Storage Class_ is valid, but does not
     have defined behavior.
  * Recursion is not supported.
    The static function call graph for an entry point must not contain
    cycles.
  * Whether irreducible control flow is legal is implementation defined.

=== Source Language Encoding

If a SPIR-V module represents a program written in OpenCL C, then the
_Source Language_ operand for the *OpSource* instruction should be
*OpenCL_C*, and the 32-bit literal language _Version_ should describe the
version of OpenCL C, encoded MSB to LSB as:

    0 | Major Number | Minor Number | Revision Number (optional)

Hence, OpenCL C 1.2 would be encoded as `0x00010200`, and OpenCL C 2.0 as
`0x00020000`.

If a SPIR-V module represents a program written in OpenCL {cpp}, then the
_Source Language_ operand for the *OpSource* instruction should be
*OpenCL_CPP*, and the 32-bit literal language _Version_ should describe the
version of OpenCL {cpp}, encoded similarly.
Hence, OpenCL {cpp} 2.2 would be encoded as `0x00020200`.

The source language version is purely informational and has no semantic
meaning.

=== Numerical Type Formats

For all OpenCL environments, floating-point types are represented and stored
using <<ieee-754-spec, IEEE-754>> semantics.
All integer formats are represented and stored using 2's-complement format.

=== Supported Types

The following types are supported by OpenCL environments.
Note that some types may require additional capabilities, and may not be
supported by all OpenCL environments.

OpenCL environments support arrays declared using *OpTypeArray*, structs
declared using *OpTypeStruct*, functions declared using *OpTypeFunction*,
and pointers declared using *OpTypePointer*.

// TODO: This needs to be more precise, describing the restrictions
// in the OpenLC C spec section 6.9.

==== Basic Scalar and Vector Types

*OpTypeVoid* is supported.

The following scalar types are supported by OpenCL environments:

* *OpTypeBool*
* *OpTypeInt*, with _Width_ equal to 8, 16, 32, or 64, and with
  _Signedness_ equal to zero, indicating no signedness semantics.
* *OpTypeFloat*, with _Width_ equal to 16, 32, or 64.

OpenCL environments support vector types declared using *OpTypeVector*.
The vector _Component Type_ may be any of the scalar types described
above.
Supported vector _Component Counts_ are 2, 3, 4, 8, or 16.

==== Image-Related Data Types

The following table describes the *OpTypeImage* image types supported by
OpenCL environments:

.Image Types
[cols="1,1,1,3",options="headers"]
|====
| _Dim_
| _Depth_
| _Arrayed_
| *Description*

// image1d_t
| *1D*
| `0`
| `0`
| A 1D image.

// image1d_array_t
| *1D*
| `0`
| `1`
| A 1D image array.

// image2d_t
| *2D*
| `0`
| `0`
| A 2D image.

// image2d_depth_t
| *2D*
| `1`
| `0`
| A 2D depth image.

// image1d_array_t
| *2D*
| `0`
| `1`
| A 2D image array.

// image1d_array_depth_t
| *2D*
| `1`
| `1`
| A 2D depth image array.

// image3d_t
| *3D*
| `0`
| `0`
| A 3D image.

// image1d_buffer_t
| *Buffer*
| `0`
| `0`
| A 1D buffer image.

|====

// These require MSAA extensions:
// image2d_msaa_t
// image2d_array_msaa_t
// image2d_msaa_depth_t
// image2d_array_msaa_depth_t

// sampler_t
*OpTypeSampler* may be used to declare sampler types in OpenCL environments.

==== Other Data Types

The following table describes other data types that may be used in an
OpenCL environment:

.Other Data Types
[cols="1,1",options="headers"]
|====
| *Type*
| *Description*

// event_t
| *OpTypeEvent*
| OpenCL event type.

// clk_event_t
| *OpTypeDeviceEvent*
| OpenCL device-side event type.

// pipe_t
| *OpTypePipe*
| OpenCL pipe type

// reserve_id_t
| *OpTypeReserveId*
| OpenCL pipe reservation identifier.

// queue_t
| *OpTypeQueue*
| OpenCL device-side command queue.

|====

// ndrange_t - an OpTypeStruct, see OpBuildNDRange
// kernel_enqueue_flags_t - an integer-type scalar, see Kernel Enqueue Flags
// clk_profiling_info - an integer-type scalar, see Kernel Profiling Info

=== Image Channel Order Mapping

The following table describes how the results of the SPIR-V
*OpImageQueryOrder* instruction correspond to the OpenCL host API image
channel orders.

.Image Channel Order mapping
[cols="1,1",options="header"]
|====
| *SPIR-V Image Channel Order*
| *OpenCL Image Channel Order*

| `R`
| `CL_R`

| `A`
| `CL_A`

| `RG`
| `CL_RG`

| `RA`
| `CL_RA`

| `RGB`
| `CL_RGB`

| `RGBA`
| `CL_RGBA`

| `BGRA`
| `CL_BGRA`

| `ARGB`
| `CL_ARGB`

| `Intensity`
| `CL_INTENSITY`

| `Luminance`
| `CL_LUMINANCE`

| `Rx`
| `CL_Rx`

| `RGx`
| `CL_RGx`

| `RGBx`
| `CL_RGBx`

| `Depth`
| `CL_DEPTH`

| `DepthStencil`
| `CL_DEPTH_STENCIL`

| `sRGB`
| `CL_sRGB`

| `sRGBA`
| `CL_sRGBA`

| `sBGRA`
| `CL_sBGRA`

| `sRGBx`
| `CL_sRGBx`

|====

=== Image Channel Data Type Mapping

The following table describes how the results of the SPIR-V
*OpImageQueryFormat* instruction correspond to the OpenCL host API image
channel data types.

.Image Channel Data Type mapping
[cols="1,1",options="header"]
|====
| *SPIR-V Image Channel Data Type*
| *OpenCL Image Channel Data Type*

| `SnormInt8`
| `CL_SNORM_INT8`

| `SnormInt16`
| `CL_SNORM_INT16`

| `UnormInt8`
| `CL_UNORM_INT8`

| `UnormInt16`
| `CL_UNORM_INT16`

| `UnormInt24`
| `CL_UNORM_INT24`

| `UnormShort565`
| `CL_UNORM_SHORT_565`

| `UnormShort555`
| `CL_UNORM_SHORT_555`

| `UnormInt101010`
| `CL_UNORM_INT_101010`

| `SignedInt8`
| `CL_SIGNED_INT8`

| `SignedInt16`
| `CL_SIGNED_INT16`

| `SignedInt32`
| `CL_SIGNED_INT32`

| `UnsignedInt8`
| `CL_UNSIGNED_INT8`

| `UnsignedInt16`
| `CL_UNSIGNED_INT16`

| `UnsignedInt32`
| `CL_UNSIGNED_INT32`

| `HalfFloat`
| `CL_HALF_FLOAT`

| `Float`
| `CL_FLOAT`

|====

=== Kernels

An *OpFunction* in a SPIR-V module that is identified with *OpEntryPoint*
defines an OpenCL kernel that may be invoked using the OpenCL host API
enqueue kernel interfaces.

=== Kernel Return Types

The _Result Type_ for an *OpFunction* identified with *OpEntryPoint* must be
*OpTypeVoid*.

=== Kernel Arguments

An *OpFunctionParameter* for an *OpFunction* that is identified with
*OpEntryPoint* defines an OpenCL kernel argument.
Allowed types for OpenCL kernel arguments are:

  * *OpTypeInt*
  * *OpTypeFloat*
  * *OpTypeStruct*
  * *OpTypeVector*
  * *OpTypePointer*
  * *OpTypeSampler*
  * *OpTypeImage*
  * *OpTypePipe*
  * *OpTypeQueue*

For *OpTypeInt* parameters, supported _Widths_ are 8, 16, 32, and 64, and
must have no signedness semantics.

For *OpTypeFloat* parameters, _Width_ must be 32.

For *OpTypeStruct* parameters, supported structure _Member Types_ are:

  * *OpTypeInt*
  * *OpTypeFloat*
  * *OpTypeStruct*
  * *OpTypeVector*
  * *OpTypePointer*

For *OpTypePointer* parameters, supported _Storage Classes_ are:

  * *CrossWorkgroup*
  * *Workgroup*
  * *UniformConstant*

OpenCL kernel argument types must have a representation in the OpenCL host
API.

Environments that support extensions or optional features may allow
additional types in an entry point's parameter list.
