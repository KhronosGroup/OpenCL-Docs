// Copyright 2021-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_external_memory]]
== External Memory (Provisional)

This extension defines a generic mechanism to share buffer and image objects between OpenCL and many other APIs.

In particular, the `cl_khr_external_memory` extension defines:

* Optional properties to import external memory exported by other APIs into OpenCL for a set of devices.

* Routines to explicitly hand off memory ownership between OpenCL and other APIs.

Other related extensions define specific external memory types that may be imported into OpenCL.

=== General Information

==== Name Strings

`cl_khr_external_memory` +
`cl_khr_external_memory_dma_buf` +
`cl_khr_external_memory_dx` +
`cl_khr_external_memory_opaque_fd` +
`cl_khr_external_memory_win32`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2021-09-10 | 0.9.0     | Initial version (provisional).
|====

NOTE: This is a preview of an OpenCL provisional extension specification that has been Ratified under the Khronos Intellectual Property Framework. It is being made publicly available prior to being uploaded to the Khronos registry to enable review and feedback from the community. If you have feedback please create an issue on https://github.com/KhronosGroup/OpenCL-Docs/

==== Dependencies

This extension is written against the OpenCL Specification Version 3.0.8.

Because this extension adds new properties for {clCreateBufferWithProperties}
and {clCreateImageWithProperties} this extension requires OpenCL 3.0.

==== Contributors

// spell-checker: disable
Ajit Hakke-Patil,  NVIDIA +
Amit Rao, NVIDIA +
Balaji Calidas, QUALCOMM +
Ben Ashbaugh, INTEL +
Carsten Rohde, NVIDIA +
Christoph Kubisch, NVIDIA +
Debalina Bhattacharjee, NVIDIA +
James Jones,  NVIDIA +
Jason Ekstrand, INTEL +
Jeremy Kemp, IMAGINATION +
Joshua Kelly, QUALCOMM +
Karthik Raghavan Ravi, NVIDIA +
Kedar Patil, NVIDIA +
Kevin Petit, ARM +
Nikhil Joshi, NVIDIA +
Sharan Ashwathnarayan, NVIDIA +
Vivek Kini,  NVIDIA +
// spell-checker: enable

=== New Types

[source]
----
typedef cl_uint cl_external_memory_handle_type_khr;
----

=== New API Functions

[source]
----
cl_int clEnqueueAcquireExternalMemObjectsKHR(
    cl_command_queue command_queue,
    cl_uint num_mem_objects,
    const cl_mem *mem_objects,
    cl_uint num_events_in_wait_list,
    const cl_event *event_wait_list,
    cl_event *event);

cl_int clEnqueueReleaseExternalMemObjectsKHR(
    cl_command_queue command_queue,
    cl_uint num_mem_objects,
    const cl_mem *mem_objects,
    cl_uint num_events_in_wait_list,
    const cl_event *event_wait_list,
    cl_event *event);
----

=== New API Enums

Accepted value for the _param_name_ parameter to {clGetPlatformInfo} to query external memory handle types that may be imported by all devices in an OpenCL platform:

[source]
----
CL_PLATFORM_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR                    0x2044
----

Accepted value for the _param_name_ parameter to {clGetDeviceInfo} to query external memory handle types that may be imported by an OpenCL device:

[source]
----
CL_DEVICE_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR                      0x204F
----

New properties accepted as _properties_ to {clCreateBufferWithProperties} and {clCreateImageWithProperties}:

[source]
----
CL_DEVICE_HANDLE_LIST_KHR                                              0x2051
CL_DEVICE_HANDLE_LIST_END_KHR                                          0
----

New return values from {clGetEventInfo} when _param_name_ is {CL_EVENT_COMMAND_TYPE}:

[source]
----
CL_COMMAND_ACQUIRE_EXTERNAL_MEM_OBJECTS_KHR                            0x2047
CL_COMMAND_RELEASE_EXTERNAL_MEM_OBJECTS_KHR                            0x2048
----

External memory handle type added by `cl_khr_external_memory_dma_buf`:

[source]
----
CL_EXTERNAL_MEMORY_HANDLE_DMA_BUF_KHR              0x2067
----

External memory handle types added by `cl_khr_external_memory_dx`:

[source]
----
CL_EXTERNAL_MEMORY_HANDLE_D3D11_TEXTURE_KHR        0x2063
CL_EXTERNAL_MEMORY_HANDLE_D3D11_TEXTURE_KMT_KHR    0x2064
CL_EXTERNAL_MEMORY_HANDLE_D3D12_HEAP_KHR           0x2065
CL_EXTERNAL_MEMORY_HANDLE_D3D12_RESOURCE_KHR       0x2066
----

External memory handle type added by `cl_khr_external_memory_opaque_fd`:

[source]
----
CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_FD_KHR            0x2060
----

External memory handle types added by `cl_khr_external_memory_win32`:

[source]
----
CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KHR         0x2061
CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KMT_KHR     0x2062
----

=== Modifications to existing APIs added by this spec

Following new enums are added to the list of supported _param_names_ by {clGetPlatformInfo}:

.List of supported param_names by clGetPlatformInfo
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Platform Info | Return Type | Description
| {CL_PLATFORM_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR}
  | {cl_external_memory_handle_type_khr_TYPE}[]
      | Returns the list of importable external memory handle types supported by all devices in _platform_.
|====

{clGetPlatformInfo} when called with _param_name_ {CL_PLATFORM_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR} must return a common list of external memory handle types supported by all devices in the platform.

Following new enums are added to the list of supported _param_names_ by {clGetDeviceInfo}:

.List of supported param_names by clGetDeviceInfo
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Device Info | Return Type | Description
| {CL_DEVICE_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR}
  | {cl_external_memory_handle_type_khr_TYPE}[]
      | Returns the list of importable external memory handle types supported by _device_.
|====

{clGetDeviceInfo} when called with param_name {CL_DEVICE_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR} must return a non-empty list of external memory handle types for at least one of the devices in the platform.

Following new properties are added to the list of supported properties by {clCreateBufferWithProperties} and {clCreateImageWithProperties}.

[[external-memory-properties-table]]
.List of supported buffer and image creation properties
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Property | Property Value | Description
| {CL_DEVICE_HANDLE_LIST_KHR}
  | {cl_device_id_TYPE}[]
      | Specifies the list of OpenCL devices (terminated with {CL_DEVICE_HANDLE_LIST_END_KHR}) to associate with the external memory handle.
|====

If {CL_DEVICE_HANDLE_LIST_KHR} is not specified as part of _properties_, the memory object created by {clCreateBufferWithProperties} or {clCreateImageWithProperties} is by default accessible to all devices in the _context_.

The properties used to create a buffer or image from an external memory handle are described by related extensions.
When a buffer or image is created from an external memory handle, the _flags_ used to specify usage information for the buffer or image must not include {CL_MEM_USE_HOST_PTR}, {CL_MEM_ALLOC_HOST_PTR}, or {CL_MEM_COPY_HOST_PTR}, and the _host_ptr_ argument must be `NULL`.

Add to the list of error conditions for {clCreateBufferWithProperties} and {clCreateImageWithProperties}:

* {CL_INVALID_DEVICE}
  ** if a device identified by the property {CL_DEVICE_HANDLE_LIST_KHR} is not a valid device or is not associated with _context_, or
  ** if a device identified by property {CL_DEVICE_HANDLE_LIST_KHR} cannot import the requested external memory object type, or
  ** if {CL_DEVICE_HANDLE_LIST_KHR} is not specified as part of _properties_ and one or more devices in _context_ cannot import the requested external memory object type.
* {CL_INVALID_VALUE}
  ** if _properties_ includes a supported external memory handle and _flags_ includes {CL_MEM_USE_HOST_PTR}, {CL_MEM_ALLOC_HOST_PTR}, or {CL_MEM_COPY_HOST_PTR}.
* {CL_INVALID_HOST_PTR}
  ** if _properties_ includes a supported external memory handle and _host_ptr_ is not `NULL`.

Add images created from an external memory handle to the description of `image_row_pitch` and `image_slice_pitch` for {cl_image_desc_TYPE}:

* `image_row_pitch` is the scan-line pitch in bytes.
The `image_row_pitch` must be zero if _host_ptr_ is `NULL`, the image is not a
2D image created from a buffer, and the image is not an image created from an
external memory handle.
If `image_row_pitch` is zero and _host_ptr_ is not `NULL` then the image row
pitch is calculated as `image_width` {times} the size of an image element in
bytes.
If `image_row_pitch` is zero and the image is created from an external memory
handle then the image row pitch is implementation-defined.
The image row pitch must be {geq} `image_width` {times} the size of an image
element in bytes and must be a multiple of the size of an image element in
bytes.
For a 2D image created from a buffer the image row pitch must also be a multiple
of the maximum of the {CL_DEVICE_IMAGE_PITCH_ALIGNMENT} value for all devices in
the context that support images.

* `image_slice_pitch` is the size in bytes of each 2D slice in a 3D image or the
size in bytes of each image in a 1D or 2D image array.
The `image_slice_pitch` must be zero if _host_ptr_ is `NULL` and the image is
not created from an external memory handle.
If `image_slice_pitch` is zero and _host_ptr_ is not `NULL` then the image slice
pitch is calculated as the image row pitch {times} `image_height` for a 2D image
array or a 3D image, and as the image row pitch for a 1D image array.
If `image_slice_pitch` is zero and the image is created from an external memory
handle then the image slice pitch is implementation-defined.
The image slice pitch must be {geq} the image image row pitch {times}
`image_height` for a 2D image array or a 3D image, must be {geq} the image row
pitch for a 1D image array, and must be a multiple of the image row pitch.

=== Description of new types added by this spec

The following new APIs are added as part of this spec. The details of each are described below:

==== Acquiring and Releasing External Memory Objects

To enqueue a command to acquire OpenCL memory objects created from external memory handles, call the function

include::{generated}/api/protos/clEnqueueAcquireExternalMemObjectsKHR.txt[]

_command_queue_ specifies a valid command-queue.

_num_mem_objects_ specifies the number of memory objects to acquire.

_mem_objects_ points to a list of valid memory objects.

_num_events_in_wait_list_ specifies the number of events in _event_wait_list_.

_event_wait_list_ points to the list of events that need to complete before {clEnqueueAcquireExternalMemObjectsKHR} can be executed.
If _event_wait_list_ is `NULL`, then {clEnqueueAcquireExternalMemObjectsKHR} does not explicitly wait on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by _event_wait_list_ must be valid and _num_events_in_wait_list_ must be greater than 0.
The events specified in _event_wait_list_ act as synchronization points.
The context associated with events in _event_wait_list_ and that of _command_queue_ must be the same.

_event_  returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete.
_event_ can be `NULL` in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.

Applications must acquire the memory objects that are created using external handles before they can be used by any OpenCL commands queued to a command-queue.
Behavior is undefined if a memory object created from an external memory handle is used by an OpenCL command queued to a command-queue without being acquired.
This is to guarantee that the state of the memory objects is up-to-date and they are accessible to OpenCL.
See "Example with Acquire / Release" provided in <<cl_khr_external_memory-Sample-Code>> for more details on how to use this API.

If _num_mem_objects_ is 0 and _mem_objects_ is `NULL`, the command will trivially succeed after its event dependencies are satisfied and will update its completion event.

{clEnqueueAcquireExternalMemObjectsKHR} returns {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_VALUE} if _num_mem_objects_ is zero and _mem_objects_ is not a `NULL` value or if _num_mem_objects_ is not 0 and _mem_objects_ is `NULL`.
* {CL_INVALID_MEM_OBJECT} if any of the memory objects in _mem_objects_ is not a valid OpenCL memory object created using an external memory handle.
* {CL_INVALID_COMMAND_QUEUE}
** if _command_queue_ is not a valid command-queue, or
** if device associated with _command_queue_ is not one of the devices specified by {CL_DEVICE_HANDLE_LIST_KHR} at the time of creating one or more of _mem_objects_, or
** if one or more of _mem_objects_ belong to a context that does not contain a device associated _command_queue_, or
** if one or more of _mem_objects_ can not be shared with device associated with _command_queue_.
* {CL_INVALID_EVENT_WAIT_LIST}
    ** if _event_wait_list_ is `NULL` and _num_events_in_wait_list_ is not 0, or
    ** if _event_wait_list_ is not `NULL` and _num_events_in_wait_list_ is 0, or
    ** if event objects in _event_wait_list_ are not valid events.
* {CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST} if the execution status of any of the events in _event_wait_list_ is a negative integer value.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

To enqueue a command to release OpenCL memory objects created from external memory handles, call the function

include::{generated}/api/protos/clEnqueueReleaseExternalMemObjectsKHR.txt[]

_command_queue_ specifies a valid command-queue.

_num_mem_objects_ specifies the number of memory objects to release.

_mem_objects_ points to a list of valid memory objects.

_num_events_in_wait_list_ specifies the number of events in _event_wait_list_.

_event_wait_list_ points to the list of events that need to complete before {clEnqueueReleaseExternalMemObjectsKHR} can be executed.
If _event_wait_list_ is `NULL`, then {clEnqueueReleaseExternalMemObjectsKHR} does not wait on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by _event_wait_list_ must be valid and _num_events_in_wait_list_ must be greater than 0.
The events specified in _event_wait_list_ act as synchronization points.
The context associated with events in _event_wait_list_ and that of _command_queue_ must be the same.

_event_  returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete.
_event_ can be `NULL` in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.

Applications must release the memory objects that are acquired using {clEnqueueReleaseExternalMemObjectsKHR} before using them through any commands in the other API.
This is to guarantee that the state of memory objects is up-to-date and they are accessible to the other API.
See "Example with Acquire / Release" provided in <<cl_khr_external_memory-Sample-Code>> for more details on how to use this API.

If _num_mem_objects_ is 0 and _mem_objects_ is `NULL`, the command will trivially succeed after its event dependencies are satisfied and will update its completion event.

{clEnqueueReleaseExternalMemObjectsKHR} returns {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_VALUE} if _num_mem_objects_ is zero and _mem_objects_ is not a `NULL` value or if _num_mem_objects_ is greater than 0 and _mem_objects_ is `NULL`.
* {CL_INVALID_MEM_OBJECT} if any of the memory objects in _mem_objects_ is not a valid OpenCL memory object created using an external memory handle.
* {CL_INVALID_COMMAND_QUEUE}
** if _command_queue_ is not a valid command-queue, or
** if device associated with _command_queue_ is not one of the devices specified by {CL_DEVICE_HANDLE_LIST_KHR} at the time of creating one or more of _mem_objects_, or
** if one or more of _mem_objects_ belong to a cl_context that does not contain device associated _command_queue_, or
** if one or more of _mem_objects_ can not be shared with device associated with _command_queue_.
* {CL_INVALID_EVENT_WAIT_LIST}
    ** if _event_wait_list_ is `NULL` and _num_events_in_wait_list_ is not 0, or
    ** if _event_wait_list_ is not `NULL` and _num_events_in_wait_list_ is 0, or
    ** if event objects in _event_wait_list_ are not valid events.
* {CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST} if the execution status of any of the events in _event_wait_list_ is a negative integer value.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

=== Descriptions of External Memory Handle Types

This section describes the external memory handle types that are added by related extensions.

Applications can import the same payload into multiple OpenCL contexts and multiple times into a given OpenCL context. In all cases, each import operation must create a distinct memory object.

==== File Descriptor Handle Types

The `cl_khr_external_memory_opaque_fd` extension extends {cl_external_memory_handle_type_khr_TYPE} to support the following new types of handles, and adds as a property that may be specified when creating a buffer or an image memory object from an external handle:

--
    * {CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_FD_KHR} specifies a POSIX file descriptor handle that has only limited valid usage outside of OpenCL and other compatible APIs. It must be compatible with the POSIX system calls dup, dup2, close, and the non-standard system call dup3. Additionally, it must be transportable over a socket using an SCM_RIGHTS control message. It owns a reference to the underlying memory resource represented by its memory object.
--

The `cl_khr_external_memory_dma_buf` extension extends {cl_external_memory_handle_type_khr_TYPE} to support the following types of handles, and adds as a property that may be specified when creating a buffer or an image memory object from an external handle:

--
    * {CL_EXTERNAL_MEMORY_HANDLE_DMA_BUF_KHR} is a file descriptor for a Linux dma_buf. It owns a reference to the underlying memory resource represented by its memory object.
--

For these extensions, importing memory from a file descriptor transfers ownership of the file descriptor from the application to the OpenCL implementation. The application must not perform any operations on the file descriptor after a successful import. The imported memory object holds a reference to its payload.

==== NT Handle Types

The `cl_khr_external_memory_dx` extension extends {cl_external_memory_handle_type_khr_TYPE}  to support the following new types of handles, and adds as a property that may be specified when creating a buffer or an image memory object from an external handle:

--
    * {CL_EXTERNAL_MEMORY_HANDLE_D3D11_TEXTURE_KHR} specifies an NT handle returned by IDXGIResource1::CreateSharedHandle referring to a Direct3D 10 or 11 texture resource. It owns a reference to the memory used by the Direct3D resource.

    * {CL_EXTERNAL_MEMORY_HANDLE_D3D11_TEXTURE_KMT_KHR} specifies a global share handle returned by IDXGIResource::GetSharedHandle referring to a Direct3D 10 or 11 texture resource. It does not own a reference to the underlying Direct3D resource, and will therefore become invalid when all memory objects and Direct3D resources associated with it are destroyed.

    * {CL_EXTERNAL_MEMORY_HANDLE_D3D12_HEAP_KHR} specifies an NT handle returned by ID3D12Device::CreateSharedHandle referring to a Direct3D 12 heap resource. It owns a reference to the resources used by the Direct3D heap.

    * {CL_EXTERNAL_MEMORY_HANDLE_D3D12_RESOURCE_KHR} specifies an NT handle returned by ID3D12Device::CreateSharedHandle referring to a Direct3D 12 committed resource. It owns a reference to the memory used by the Direct3D resource.
--

The `cl_khr_external_memory_win32` extension extends {cl_external_memory_handle_type_khr_TYPE} to support the following new types of handles, and adds as a property that may be specified when creating a buffer or an image memory object from an external handle:

--
    * {CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KHR} specifies an NT handle that has only limited valid usage outside of OpenCL and other compatible APIs. It must be compatible with the functions DuplicateHandle, CloseHandle, CompareObjectHandles, GetHandleInformation, and SetHandleInformation. It owns a reference to the underlying memory resource represented by its memory object.
    * {CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KMT_KHR} specifies a global share handle that has only limited valid usage outside of OpenCL and other compatible APIs. It is not compatible with any native APIs. It does not own a reference to the underlying memory resource represented by its memory object, and will therefore become invalid when all memory objects associated with it are destroyed.
--

For these extensions, importing memory object payloads from Windows handles does not transfer ownership of the handle to the OpenCL implementation. For handle types defined as NT handles, the application must release handle ownership using the CloseHandle system call when the handle is no longer needed. For handle types defined as NT handles, the imported memory object holds a reference to its payload.

Note: Non-NT handle import operations do not add a reference to their associated payload. If the original object owning the payload is destroyed, all resources and handles sharing that payload will become invalid.

[[cl_khr_external_memory-Sample-Code]]
=== Sample Code

. Example for creating a CL buffer from an exported external buffer in a single device context.
+
--
[source]
----
// Get cl_devices of the platform.
clGetDeviceIDs(..., &devices, &deviceCount);

// Create cl_context with just first device
clCreateContext(..., 1, devices, ...);

// Obtain fd/win32 or similar handle for external memory to be imported
// from other API.
int fd = getFdForExternalMemory();

// Create extMemBuffer of type cl_mem from fd.
cl_mem_properties_khr extMemProperties[] =
{
    (cl_mem_properties_khr)CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_FD_KHR,
    (cl_mem_properties_khr)fd,
    0
};

cl_mem extMemBuffer = clCreateBufferWithProperties(/*context*/          clContext,
                                                   /*properties*/       extMemProperties,
                                                   /*flags*/            0,
                                                   /*size*/             size,
                                                   /*host_ptr*/         NULL,
                                                   /*errcode_ret*/      &errcode_ret);
----
--
. Example for creating a CL Image from an exported external Image for single device usage in a multi-device context
+
--
[source]
----
// Get cl_devices of the platform.
clGetDeviceIDs(..., &devices, &deviceCount);

// Create cl_context with first two devices
clCreateContext(..., 2, devices, ...);

// Create img of type cl_mem usable only on devices[0]

// Create img of type cl_mem.
// Obtain fd/win32 or similar handle for external memory to be imported
// from other API.
int fd = getFdForExternalMemory();

// Set cl_image_format based on external image info
cl_image_format clImgFormat = { };
clImageFormat.image_channel_order = CL_RGBA;
clImageFormat.image_channel_data_type = CL_UNORM_INT8;

// Set cl_image_desc based on external image info
size_t clImageFormatSize;
cl_image_desc image_desc = { };
image_desc.image_type = CL_MEM_OBJECT_IMAGE2D_ARRAY;
image_desc.image_width = width;
image_desc.image_height = height;
image_desc.image_depth = depth;
image_desc.image_array_size = num_slices;
image_desc.image_row_pitch = width * 8 * 4; // May need alignment
image_desc.image_slice_pitch = image_desc.image_row_pitch * height;
image_desc.num_mip_levels = 1;
image_desc.num_samples = 0;
image_desc.buffer = NULL;

cl_mem_properties_khr extMemProperties[] =
{
    (cl_mem_properties_khr)CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_FD_KHR,
    (cl_mem_properties_khr)fd,
    (cl_mem_properties_khr)CL_DEVICE_HANDLE_LIST_KHR,
    (cl_mem_properties_khr)devices[0],
    CL_DEVICE_HANDLE_LIST_END_KHR,
    0
};

cl_mem img = clCreateImageWithProperties(/*context*/        clContext,
                                         /*properties*/     extMemProperties,
                                         /*flags*/          0,
                                         /*image_format*/   &clImgFormat,
                                         /*image_desc*/     &image_desc,
                                         /*errcode_ret*/    &errcode_ret);

// Use clGetImageInfo to get cl_image_format details.
size_t clImageFormatSize;
clGetImageInfo(img,
               CL_IMAGE_FORMAT,
               sizeof(cl_image_format),
               &clImageFormat,
               &clImageFormatSize);
----
--
. Example for synchronization using Wait and Signal
+
--
[source]
----
// Start the main rendering loop

// Create extSem of type cl_semaphore_khr using clCreateSemaphoreWithPropertiesKHR

// Create extMem of type cl_mem using clCreateBufferWithProperties or clCreateImageWithProperties

while (true) {
    // (not shown) Signal the semaphore from the other API

    // Wait for the semaphore in OpenCL, by calling clEnqueueWaitSemaphoresKHR on 'extSem'
    clEnqueueWaitSemaphoresKHR(/*command_queue*/            command_queue,
                               /*num_sema_objects*/         1,
                               /*sema_objects*/             &extSem,
                               /*sema_payload_list*/        NULL,
                               /*num_events_in_wait_list*/  0,
                               /*event_wait_list*/          NULL,
                               /*event*/                    NULL);

    // Launch kernel that accesses extMem
    clEnqueueNDRangeKernel(command_queue, ...);

    // Signal the semaphore in OpenCL
    clEnqueueSignalSemaphoresKHR(/*command_queue*/           command_queue,
                                 /*num_sema_objects*/        1,
                                 /*sema_objects*/            &extSem,
                                 /*sema_payload_list*/       NULL,
                                 /*num_events_in_wait_list*/ 0,
                                 /*event_wait_list*/         NULL,
                                 /*event*/                   NULL);

    // (not shown) Launch work in other API that waits on 'extSem'
}
----
--
. Example with memory sharing using acquire/release
+
--
[source]
----
// Create extSem of type cl_semaphore_khr using
// clCreateSemaphoreWithPropertiesKHR with CL_SEMAPHORE_HANDLE_*_KHR.

// Create extMem1 and extMem2 of type cl_mem using clCreateBufferWithProperties
// or clCreateImageWithProperties

while (true) {
    // (not shown) Signal the semaphore from the other API. Wait for the
    // semaphore in OpenCL, by calling clEnqueueWaitForSemaphore on extSem
    clEnqueueWaitSemaphoresKHR(/*command_queue*/            cq1,
                               /*num_sema_objects*/         1,
                               /*sema_objects*/             &extSem,
                               /*sema_payload_list*/        NULL,
                               /*num_events_in_wait_list*/  0,
                               /*event_wait_list*/          NULL,
                               /*event*/                    NULL);

    // Get explicit ownership of extMem1
    clEnqueueAcquireExternalMemObjectsKHR(/*command_queue*/             cq1,
                                          /*num_mem_objects*/           1,
                                          /*mem_objects*/               extMem1,
                                          /*num_events_in_wait_list*/   0,
                                          /*event_wait_list*/           NULL,
                                          /*event*/                     NULL);

    // Launch kernel that accesses extMem1 on cq1 on cl_device1
    clEnqueueNDRangeKernel(cq1,  ..., &event1);

    // Launch kernel that accesses both extMem1 and extMem2 on cq2 on cl_device2
    // Migration of extMem1 and extMem2 handles through regular CL memory
    // migration.
    clEnqueueNDRangeKernel(cq2, ..., &event1, &event2);

    // Give up ownership of extMem1 before you signal the semaphore. Handle
    // memory migration here.
    clEnqueueReleaseExternalMemObjectsKHR(/*command_queue*/           cq2
                                          /*num_mem_objects*/         1,
                                          /*mem_objects*/             &extMem1,
                                          /*num_events_in_wait_list*/ 0,
                                          /*event_wait_list*/         NULL,
                                          /*event*/                   NULL);

    // Signal the semaphore from OpenCL
    clEnqueueSignalSemaphoresKHR(/*command_queue*/           cq2,
                                 /*num_sema_objects*/        1,
                                 /*sema_objects*/            &extSem,
                                 /*sema_payload_list*/       NULL,
                                 /*num_events_in_wait_list*/ 0,
                                 /*event_wait_list*/         NULL,
                                 /*event*/                   NULL);

    // (not shown) Launch work in other API that waits on 'extSem'
    // Other API accesses ext1, but not ext2 on device-1
}
----
--
