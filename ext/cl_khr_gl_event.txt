// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_gl_event-creating]]
== Creating OpenCL Event Objects from OpenGL Sync Objects

[[cl_khr_gl_event-overview]]
=== Overview

This section describes the *cl_khr_gl_event* extension.
This extension allows creating OpenCL event objects linked to OpenGL fence
sync objects, potentially improving efficiency of sharing images and buffers
between the two APIs.
The companion *GL_ARB_cl_event* extension provides the complementary
functionality of creating an OpenGL sync object from an OpenCL event object.

In addition, this extension modifies the behavior of
*clEnqueueAcquireGLObjects* and *clEnqueueReleaseGLObjects* to implicitly
guarantee synchronization with an OpenGL context bound in the same thread as
the OpenCL context.

[[cl_khr_gl_event-new-procedures-and-functions]]
=== New Procedures and Functions

[source]
----
cl_event clCreateEventFromGLsyncKHR(cl_context context,
                                    GLsync sync,
                                    cl_int *errcode_ret);
----

[[cl_khr_gl_event-new-tokens]]
=== New Tokens

Returned by *clGetEventInfo* when _param_name_ is CL_EVENT_COMMAND_TYPE:

----
CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR 0x200D
----

[[cl_khr_gl_event-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.2 Specification

Add following to the fourth paragraph of _section 5.11_ (prior to the
description of *clWaitForEvents*):

"`Event objects can also be used to reflect the status of an OpenGL sync
object.
The sync object in turn refers to a fence command executing in an OpenGL
command stream.
This provides another method of coordinating sharing of buffers and images
between OpenGL and OpenCL.`"

Add CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR to the valid _param_value_ values
returned by *clGetEventInfo* for _param_name_ CL_EVENT_COMMAND_TYPE (in the
third row and third column of _table 5.22_).

Add new _subsection 5.11.1_:

"`*5.11.1 Linking Event Objects to OpenGL Synchronization Objects*

An event object may be created by linking to an OpenGL *sync object*.
Completion of such an event object is equivalent to waiting for completion
of the fence command associated with the linked GL sync object.

The function
indexterm:[clCreateEventFromGLsyncKHR]
[source]
----
cl_event clCreateEventFromGLsyncKHR(cl_context context,
                                    GLsync sync,
                                    cl_int *errcode_ret)
----

creates a linked event object.

_context_ is a valid OpenCL context created from an OpenGL context or share
group, using the *cl_khr_gl_sharing* extension.

_sync_ is the name of a sync object in the GL share group associated with
_context_.

*clCreateEventFromGLsyncKHR* returns a valid OpenCL event object and
_errcode_ret_ is set to CL_SUCCESS if the event object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context, or was not
    created from a GL context.
  * CL_INVALID_GL_OBJECT if _sync_ is not the name of a sync object in the
    GL share group associated with _context_.

The parameters of an event object linked to a GL sync object will return the
following values when queried with *clGetEventInfo*:

  * The CL_EVENT_COMMAND_QUEUE of a linked event is `NULL`, because the
    event is not associated with any OpenCL command queue.
  * The CL_EVENT_COMMAND_TYPE of a linked event is
    CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR, indicating that the event is
    associated with a GL sync object, rather than an OpenCL command.
  * The CL_EVENT_COMMAND_EXECUTION_STATUS of a linked event is either
    CL_SUBMITTED, indicating that the fence command associated with the sync
    object has not yet completed, or CL_COMPLETE, indicating that the fence
    command has completed.

*clCreateEventFromGLsyncKHR* performs an implicit *clRetainEvent* on the
returned event object.
Creating a linked event object also places a reference on the linked GL sync
object.
When the event object is deleted, the reference will be removed from the GL
sync object.

Events returned from *clCreateEventFromGLsyncKHR* can be used in the
_event_wait_list_ argument to *clEnqueueAcquireGLObjects* and CL APIs that
take a cl_event as an argument but do not enqueue commands.
Passing such events to any other CL API that enqueues commands will generate
a CL_INVALID_EVENT error.`"

[[cl_khr_gl_event-additions-to-extension-specification]]
=== Additions to the OpenCL Extension Specification

Add following the paragraph describing parameter _event_ to
*clEnqueueAcquireGLObjects*:

"`If an OpenGL context is bound to the current thread, then any OpenGL
commands which

  . affect or access the contents of a memory object listed in the
    _mem_objects_ list, and
  . were issued on that OpenGL context prior to the call to
    *clEnqueueAcquireGLObjects*

will complete before execution of any OpenCL commands following the
*clEnqueueAcquireGLObjects* which affect or access any of those memory
objects.
If a non-`NULL` _event_ object is returned, it will report completion only
after completion of such OpenGL commands.`"

Add following the paragraph describing parameter _event_ to
*clEnqueueReleaseGLObjects*:

"`If an OpenGL context is bound to the current thread, then then any OpenGL
commands which

  . affect or access the contents of the memory objects listed in the
    _mem_objects_ list, and
  . are issued on that context after the call to *clEnqueueReleaseGLObjects*

will not execute until after execution of any OpenCL commands preceding the

*clEnqueueReleaseGLObjects* which affect or access any of those memory
objects.
If a non-`NULL` _event_ object is returned, it will report completion before
execution of such OpenGL commands.`"

Replace the second paragraph of
<<cl_khr_gl_sharing__memobjs-synchronizing-opencl-and-opengl-access-to-shared-objects,
Synchronizing OpenCL and OpenGL Access to Shared Objects>> with:

"`Prior to calling *clEnqueueAcquireGLObjects*, the application must ensure
that any pending OpenGL operations which access the objects specified in
_mem_objects_ have completed.

If the *cl_khr_gl_event* extension is supported, then the OpenCL
implementation will ensure that any such pending OpenGL operations are
complete for an OpenGL context bound to the same thread as the OpenCL
context.
This is referred to as _implicit synchronization_.

If the *cl_khr_gl_event* extension is supported and the OpenGL context in
question supports fence sync objects, completion of OpenGL commands may also
be determined by placing a GL fence command after those commands using
*glFenceSync*, creating an event from the resulting GL sync object using
*clCreateEventFromGLsyncKHR*, and determining completion of that event
object via *clEnqueueAcquireGLObjects*.
This method may be considerably more efficient than calling *glFinish*, and
is referred to as _explicit synchronization_.
Explicit synchronization is most useful when an OpenGL context bound to
another thread is accessing the memory objects.

If the *cl_khr_gl_event* extension is not supported, completion of OpenGL
commands may be determined by issuing and waiting for completion of a
*glFinish* command on all OpenGL contexts with pending references to these
objects.
Some implementations may offer other efficient synchronization methods.
If such methods exist they will be described in platform-specific
documentation.

Note that no synchronization method other than *glFinish* is portable
between all OpenGL implementations and all OpenCL implementations.
While this is the only way to ensure completion that is portable to all
platforms, *glFinish* is an expensive operation and its use should be
avoided if the *cl_khr_gl_event* extension is supported on a platform.`"

[[cl_khr_gl_event-issues]]
=== Issues

  . How are references between CL events and GL syncs handled?
+
--
PROPOSED: The linked CL event places a single reference on the GL sync
object.
That reference is removed when the CL event is deleted.
A more expensive alternative would be to reflect changes in the CL event
reference count through to the GL sync.
--

  . How are linkages to synchronization primitives in other APIs handled?
+
--
UNRESOLVED.
We will at least want to have a way to link events to EGL sync objects.
There is probably no analogous DX concept.
There would be an entry point for each type of synchronization primitive to
be linked to, such as clCreateEventFromEGLSyncKHR.

An alternative is a generic clCreateEventFromExternalEvent taking an
attribute list.
The attribute list would include information defining the type of the
external primitive and additional information (GL sync object handle, EGL
display and sync object handle, etc.) specific to that type.
This allows a single entry point to be reused.

These will probably be separate extensions following the API proposed here.
--

  . Should the CL_EVENT_COMMAND_TYPE correspond to the type of command
    (fence) or the type of the linked sync object?
+
--
PROPOSED: To the type of the linked sync object.
--

  . Should we support both explicit and implicit synchronization?
+
--
PROPOSED: Yes.
Implicit synchronization is suitable when GL and CL are executing in the
same application thread.
Explicit synchronization is suitable when they are executing in different
threads but the expense of glFinish is too high.
--

  . Should this be a platform or device extension?
+
--
PROPOSED: Platform extension.
This may result in considerable under-the-hood work to implement the
sync->event semantics using only the public GL API, however, when multiple
drivers and devices with different GL support levels coexist in the same
runtime.
--

  . Where can events generated from GL syncs be usable?
+
--
PROPOSED: Only with clEnqueueAcquireGLObjects, and attempting to use such an
event elsewhere will generate an error.
There is no apparent use case for using such events elsewhere, and possibly
some cost to supporting it, balanced by the cost of checking the source of
events in all other commands accepting them as parameters.
--
