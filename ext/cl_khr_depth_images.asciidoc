// Copyright 2017-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_depth_images]]
== Depth Images

This section describes the *cl_khr_depth_images* extension.

This extension adds support for depth images.

This extension became a core feature in OpenCL 2.0.

[[cl_khr_depth_images-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 1.2 Specification

This extension adds the following new image formats for depth images to _tables 5.6 and 5.7_ of the OpenCL 1.2 specification.

[cols="",options="header",]
|=======================================================================
|*Enum values that can be specified in channel_order*

|*CL_DEPTH.* This format can only be used if channel data type = CL_UNORM_INT16 or CL_FLOAT.

|=======================================================================

[cols="2,3",options="header",]
|=======================================================================
|*Image Channel Data Type*
|*Description*

|*CL_UNORM_INT16*
|Each channel component is a normalized unsigned 16-bit integer value

|*CL_FLOAT*
|Each channel component is a single precision floating-point value
|=======================================================================

This extension adds the following new image format to the minimum list of supported image formats described in _table 5.8_:

[[cl_khr_depth_images-required-image-formats]]
._Required Image Formats for_ *cl_khr_depth_images*
[cols=",,",options="header",]
|====================================================================
|*num_channels*
|*channel_order*
|*channel_data_type*

|1
|CL_DEPTH
|CL_UNORM_INT +
CL_FLOAT

|====================================================================

NOTE:

Depth image objects can be initialized, read and written using the appropriate CL APIs i.e. clEnqueueReadImage, clEnqueueWriteImage, clEnqueueCopyImage, clEnqueueCopyImageToBuffer, clEnqueueCopyBufferToImage, clEnqueueMapImage and clEnqueueFillImage.

For clEnqueueFillImage, the fill color is a 4-component value where the R component refers to the depth value if the image format is CL_DEPTH.  The fill color will be converted to the appropriate image channel format and order associated with image.

Update text that describes arg value argument to clSetKernelArg with the following:

If the kernel argument is declared to be of type image2d_depth_t or image2d_array_depth t, the arg_value entry will be a pointer to a depth image or depth image array object.

Add the following error condition for clSetKernelArg:

CL_INVALID_MEM_OBJECT for an argument declared to be a depth image or a depth image 
array and the argument value specified in arg_value does not follow the rules described above 
for a depth memory object or memory array object argument.

[[cl_khr_depth_images-additions-to-chapter-6]]
=== Additions to Chapter 6 of the OpenCL 1.2 Specification

Add the following new data types to _table 6.3_ in _section 6.1.3_ of the OpenCL 1.2 specification:

[cols="2,3",options="header",]
|====
|*Type*
|*Description*

|*image2d_depth_t*
|A 2D depth image. Refer to _section 6.12.14_ for a detailed
description of the built-in functions that use this type.

|*image2d_array_depth_t*
|A 2D depth image array. Refer to _section 6.12.14_ for a
detailed description of the built-in functions that use this
type.

|====

Add the following to the bulleted list in section 6.12.14.1.1 - Determining the border color:

    * If the image channel order is `CL_DEPTH`, the border value is `0.0f`.

Add the following built-in functions to section 6.12.14.2 - BuiltIn Image Read Functions:

[cols="2,3",options="header",]
|====
|*Function*
|*Description*

| float *read_imagef*(read_only image2d_depth_t _image_,
  sampler_t _sampler_, int2 _coord_) +
  float *read_imagef*(read_only image2d_depth_t _image_,
  sampler_t _sampler_, float2 _coord_)
    | Use the coordinate (_coord.x_, _coord.y_) to do an element lookup in
      the 2D depth image object specified by _image_.

      *read_imagef* returns a floating-point value in the range [0.0, 1.0]
      for depth image objects created with _image_channel_data_type_ set to
      `CL_UNORM_INT16` or `CL_UNORM_INT24`.

      *read_imagef* returns a floating-point value for depth image objects
      created with _image_channel_data_type_ set to `CL_FLOAT`.

      The *read_imagef* calls that take integer coordinates must use a
      sampler with filter mode set to `CLK_FILTER_NEAREST`, normalized
      coordinates set to `CLK_NORMALIZED_COORDS_FALSE` and addressing mode
      set to `CLK_ADDRESS_CLAMP_TO_EDGE`, `CLK_ADDRESS_CLAMP` or
      `CLK_ADDRESS_NONE`; otherwise the values returned are undefined.

      Values returned by *read_imagef* for depth image objects with
      _image_channel_data_type_ values not specified in the description
      above are undefined.
| |
| float *read_imagef*(read_only image2d_array_depth_t _image_,
  sampler_t _sampler_, int4 _coord_) +
  float *read_imagef*(read_only image2d_array_depth_t _image_,
  sampler_t _sampler_, float4 _coord_)
    | Use _coord.xy_ to do an element lookup in the 2D image identified by
      _coord.z_ in the 2D depth image array specified by _image_.

      *read_imagef* returns a floating-point value in the range [0.0, 1.0]
      for depth image objects created with _image_channel_data_type_ set to
      `CL_UNORM_INT16` or `CL_UNORM_INT24`.

      *read_imagef* returns a floating-point value for depth image objects
      created with _image_channel_data_type_ set to `CL_FLOAT`.

      The *read_imagef* calls that take integer coordinates must use a
      sampler with filter mode set to `CLK_FILTER_NEAREST`, normalized
      coordinates set to `CLK_NORMALIZED_COORDS_FALSE` and addressing mode
      set to `CLK_ADDRESS_CLAMP_TO_EDGE`, `CLK_ADDRESS_CLAMP` or
      `CLK_ADDRESS_NONE`; otherwise the values returned are undefined.

      Values returned by *read_imagef* for image objects with
      _image_channel_data_type_ values not specified in the description
      above are undefined.

|====

Add the following built-in functions to section 6.12.14.3 - BuiltIn Image Sampler-less Read Functions:

[cols="2,3",options="header",]
|====
|*Function*
|*Description*

| float *read_imagef*(image2d_depth_t _image_, int2 _coord_)
    | Use the coordinate (_coord.x_, _coord.y_) to do an element lookup in
      the 2D depth image object specified by _image_.

      *read_imagef* returns a floating-point value in the range [0.0, 1.0]
      for depth image objects created with _image_channel_data_type_ set to
      `CL_UNORM_INT16` or `CL_UNORM_INT24`.

      *read_imagef* returns a floating-point value for depth image objects
      created with _image_channel_data_type_ set to `CL_FLOAT`.

      Values returned by *read_imagef* for image objects with
      _image_channel_data_type_ values not specified in the description
      above are undefined.
| |
| float *read_imagef*(image2d_array_depth_t _image_, int4 _coord_)
    | Use _coord.xy_ to do an element lookup in the 2D image identified by
      _coord.z_ in the 2D depth image array specified by _image_.

      *read_imagef* returns a floating-point value in the range [0.0, 1.0]
      for depth image objects created with _image_channel_data_type_ set to
      `CL_UNORM_INT16` or `CL_UNORM_INT24`.

      *read_imagef* returns a floating-point value for depth image objects
      created with _image_channel_data_type_ set to `CL_FLOAT`.

      Values returned by *read_imagef* for image objects with
      _image_channel_data_type_ values not specified in the description
      above are undefined.

|====

Add the following built-in functions to section 6.12.14.4 â€“ BuiltIn Image Write Functions:

[cols="2,3",options="header",]
|====
|*Function*
|*Description*

| void *write_imagef*(image2d_depth_t _image_, int2 _coord_,
  float _depth_)
    | Write _depth_ value to location specified by _coord.xy_ in the 2D
      depth image object specified by _image_.
      Appropriate data format conversion to the specified image format is
      done before writing the depth value.
      _coord.x_ and _coord.y_ are considered to be unnormalized coordinates,
      and must be in the range [0, image width-1], and [0, image height-1],
      respectively.

      *write_imagef* can only be used with image objects created with
      _image_channel_data_type_ set to `CL_UNORM_INT16`, `CL_UNORM_INT24` or
      `CL_FLOAT`.
      Appropriate data format conversion will be done to convert depth value
      from a floating-point value to actual data format associated with the
      image.

      The behavior of *write_imagef*, *write_imagei* and *write_imageui* for
      image objects created with _image_channel_data_type_ values not
      specified in the description above or with (_x_, _y_) coordinate
      values that are not in the range [0, image width-1] and [0, image
      height-1], respectively, is undefined.
| |
| void *write_imagef*(image2d_array_depth_t _image_, int4 _coord_,
  float _depth_)
    | Write _depth_ value to location specified by _coord.xy_ in the 2D
      image identified by _coord.z_ in the 2D depth image array specified by
      _image_.
      Appropriate data format conversion to the specified image format is
      done before writing the depth value.
      _coord.x_, _coord.y_ and _coord.z_ are considered to be unnormalized
      coordinates, and must be in the range [0, image width-1], [0, image
      height-1], and [0, image number of layers-1], respectively.

      *write_imagef* can only be used with image objects created with
      _image_channel_data_type_ set to `CL_UNORM_INT16`, `CL_UNORM_INT24` or
      `CL_FLOAT`.
      Appropriate data format conversion will be done to convert depth valye
      from a floating-point value to actual data format associated with the
      image.

      The behavior of *write_imagef*, *write_imagei* and *write_imageui* for
      image objects created with _image_channel_data_type_ values not
      specified in the description above or with (_x_, _y_, _z_) coordinate
      values that are not in the range [0, image width-1], [0, image
      height-1], [0, image number of layers-1], respectively, is undefined.

|====

Add the following built-in functions to section 6.12.14.5 â€“ BuiltIn Image Query Functions:

[cols="2,3",]
|====
| *Function* | *Description*
| int *get_image_width*(image2d_depth_t _image_) +
  int *get_image_width*(image2d_array_depth_t _image_)
    | Return the image width in pixels.
| int *get_image_height*(image2d_depth_t _image_) +
  int *get_image_height*(image2d_array_depth_t _image_)
    | Return the image height in pixels.
| |
| int *get_image_channel_data_type*(image2d_depth_t _image_) +
  int *get_image_channel_data_type*(image2d_array_depth_t _image_)
    | Return the channel data type. Valid values are:

      `CLK_UNORM_INT16` +
      `CLK_FLOAT`
| int *get_image_channel_order*(image2d_depth_t _image_) +
  int *get_image_channel_order*(image2d_array_depth_t _image_)
    | Return the image channel order. Valid values are:

      `CLK_DEPTH`
| |
| int2 *get_image_dim*(image2d_depth_t _image_) +
  int2 *get_image_dim*(image2d_array_depth_t _image_)
    | Return the 2D image width and height as an int2 type.
      The width is returned in the _x_ component, and the height in the _y_
      component.
| |
| size_t *get_image_array_size*(image2d_array_depth_t _image_)
    | Return the number of images in the 2D image array.
|====

Add the following text below the table in section 6.12.14.6 - Mapping image channels to color values returned by read_image
and color values passed to write_image to image channels:

For `CL_DEPTH` images, a scalar value is returned by *read_imagef* or
supplied to *write_imagef*.
