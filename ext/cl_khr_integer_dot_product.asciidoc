// Copyright 2020-2021 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_integer_dot_product]]
== Integer dot product

This extension adds support for SPIR-V instructions and OpenCL C built-in
functions to compute the dot product of vectors of integers.

=== General Information

==== Name Strings

`cl_khr_integer_dot_product`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2021-06-17 | 1.0.0     | Initial version.
|====

==== Dependencies

This extension is written against the OpenCL Specification Version 3.0.6,
and OpenCL C Specification Version 3.0.6 and OpenCL Environment Specification
Version 3.0.6.

This extension requires OpenCL 1.0.

==== Contributors

KÃ©vin Petit, Arm Ltd. +
Jeremy Kemp, Imagination Technologies +
Ben Ashbaugh, Intel +
Ruihao Zhang, Qualcomm +
Stuart Brady, Arm Ltd +
Balaji Calidas, Qualcomm +
Ayal Zaks, Intel +

=== New API Enums

Accepted value for the _param_name_ parameter to *clGetDeviceInfo*:

[source,c]
----

CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_PACKED_KHR      (1 << 0)
CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_KHR             (1 << 1)

CL_DEVICE_INTEGER_DOT_PRODUCT_CAPABILITIES_KHR              0x1073
----

=== New OpenCL C Functions

This extension defines a number of new functions that operate on vectors
of integers. The exact function overloads available depend on the features
supported by the target device.

[source,c]
----
uint dot(uchar4 a, uchar4 b);
int dot(char4 a, char4 b);
int dot(uchar4 a, char4 b);
int dot(char4 a, uchar4 b);

uint dot_acc_sat(uchar4 a, uchar4 b, uint acc);
int dot_acc_sat(char4 a, char4 b, int acc);
int dot_acc_sat(uchar4 a, char4 b, int acc);
int dot_acc_sat(char4 a, uchar4 b, int acc);

uint dot_4x8packed_uu_uint(uint a, uint b);
int dot_4x8packed_ss_int(uint a, uint b);
int dot_4x8packed_us_int(uint a, uint b);
int dot_4x8packed_su_int(uint a, uint b);

uint dot_acc_sat_4x8packed_uu_uint(uint a, uint b, uint acc);
int dot_acc_sat_4x8packed_ss_int(uint a, uint b, int acc);
int dot_acc_sat_4x8packed_us_int(uint a, uint b, int acc);
int dot_acc_sat_4x8packed_su_int(uint a, uint b, int acc);
----

=== Modifications to the OpenCL API Specification

(Modify Section 4.2, *Querying Devices*) ::
+
--

(Add the following to Table 4.3, _Device Queries_) ::
+
--

[cols="2,2,4",options="header"]
|====
| cl_device_info
| Return Type
| Description

| {CL_DEVICE_INTEGER_DOT_PRODUCT_CAPABILITIES_KHR}
| {cl_device_integer_dot_product_capabilities_khr_type}
| Returns the integer dot product capabilities supported by the device. +
 +
{CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_PACKED_KHR} is always set
  indicating that all implementations that support `cl_khr_integer_dot_product`
  must support dot product built-in functions and, when SPIR-V is supported,
  SPIR-V instructions that take four-component vectors of 8-bit integers packed
  into 32-bit integers as input. +
{CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_KHR} is set when dot product
  built-in functions and, when SPIR-V is supported, SPIR-V instructions that
  take four-component of 8-bit elements as input are supported. +

|====

--
OpenCL 3 devices must report the following feature macros via
{CL_DEVICE_OPENCL_C_FEATURES} when the corresponding bit is set in the bitfield
returned for {CL_DEVICE_INTEGER_DOT_PRODUCT_CAPABILITIES_KHR}:

[cols="1,1",options="header"]
|====
| Feature bit
| Feature macro

| {CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_PACKED_KHR}
| `__opencl_c_integer_dot_product_input_4x8bit_packed`

| {CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_KHR}
| `__opencl_c_integer_dot_product_input_4x8bit`

|====
--

--
--

=== Modifications to the OpenCL C Specification

(Modify section 6.13.3, *Integer Functions*) ::
+
--

The following built-in functions and preprocessor definitions are added:

[source,c]
----
#define cl_khr_integer_dot_product 1

if (CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_PACKED_KHR) {
    #define __opencl_c_integer_dot_product_input_4x8bit_packed 1

    uint dot_4x8packed_uu_uint(uint a, uint b);
    int dot_4x8packed_ss_int(uint a, uint b);
    int dot_4x8packed_us_int(uint a, uint b);
    int dot_4x8packed_su_int(uint a, uint b);

    uint dot_acc_sat_4x8packed_uu_uint(uint a, uint b, uint acc);
    int dot_acc_sat_4x8packed_ss_int(uint a, uint b, int acc);
    int dot_acc_sat_4x8packed_us_int(uint a, uint b, int acc);
    int dot_acc_sat_4x8packed_su_int(uint a, uint b, int acc);
}

if (CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_KHR) {
    #define __opencl_c_integer_dot_product_input_4x8bit 1

    uint dot(uchar4 a, uchar4 b);
    int dot(char4 a, char4 b);
    int dot(uchar4 a, char4 b);
    int dot(char4 a, uchar4 b);

    uint dot_acc_sat(uchar4 a, uchar4 b, uint acc);
    int dot_acc_sat(char4 a, char4 b, int acc);
    int dot_acc_sat(uchar4 a, char4 b, int acc);
    int dot_acc_sat(char4 a, uchar4 b, int acc);
}
----


* `dot` returns the dot product of the two input vectors `a` and `b`. The
components of `a` and `b` are sign- or zero-extended to the width of the
destination type and the vectors with extended components are multiplied
component-wise. All the components of the resulting vectors are added
together to form the final result.

* `dot_acc_sat` returns the saturating addition of the dot product of the two
input vectors `a` and `b` and the accumulator `acc`:

----
product = dot(a,b);
result = add_sat(product, acc);
----

* `dot_*_4x8packed_XY_R` returns the dot product of the two vectors packed
into `a` and `b` (lowest component in least significant byte). The components
are unpacked, sign- or zero-extended to the width of the destination type before
the multiplications and additions. `X` represents the signedness of the components
of `a`, `Y` that of the components of `b`. `R` is the return type.
--

=== Modifications to the OpenCL SPIR-V Environment Specification

See OpenCL SPIR-V Environment Specification.

=== Interactions with Other Extensions

If `cl_khr_il_program` is supported then the SPIR-V environment specification
modifications described above apply.

