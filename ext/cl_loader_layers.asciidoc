// Copyright 2017-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_loader_layers-opencl]]
== Installable OpenCL Loader Layers

[[cl_loader_layers-overview]]
=== Overview

This section describes *cl_loader_layers* loader extension which defines
a simple mechanism through which the Khronos OpenCL installable client
driver loader (ICD Loader) may expose load multiple separate installable
interception layers (Layer ICDs) for OpenCL.

=== General information

==== Version history

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2020-11-04 | 1.0.0     | First assigned version.
|====

[[cl_loader_layers-new-procedures-and-functions]]
=== New Procedures and Functions

A layer needs to implement and expose those two new entry points in
a shared library. If one or both of those are missing, the loader will
discard the layer.

[source,opencl]
----
cl_int clGetLayerInfo(cl_layer_info  param_name,
                      size_t         param_value_size,
                      void          *param_value,
                      size_t        *param_value_size_ret);

cl_int clInitLayer(cl_uint                 num_entries,
                   const cl_icd_dispatch  *target_dispatch,
                   cl_uint                *num_entries_ret,
                   const cl_icd_dispatch **layer_dispatch);
----

[[cl_loader_layers-new-api-types]]
=== New API Types

[source,opencl]
----
typedef cl_uint cl_layer_info;
typedef cl_uint cl_layer_api_version;
----

[[cl_loader_layers-new-enums]]
=== New API Enums

Accepted as _param_name_ to the function *clGetLayerInfo*:

[source,opencl]
----
#define CL_LAYER_API_VERSION        0x4240
----


[[cl_loader_layers-new-tokens]]
=== New API Tokens

Returned by *clGetLayerInfo* when supplied *CL_LAYER_API_VERSION*
and the corresponding layer implements version 1.0.0 of the layer
API:

[source,opencl]
----
#define CL_LAYER_API_VERSION_100 100
----

[[cl_loader_layers-new-environment-variables]]
=== New Environment Variables

A colon separated list of layer libraries that the Loader must try
to load. The layers are loaded in the specified order. The most recently
loaded layer will be first in the dispatch chain.

----
OPENCL_LAYERS
----

[[cl_loader_layers-documentation]]
=== OpenCL Layer Documentation

==== Querying Layer Info

[open,refpage='clGetLayerInfo',desc='Query information about an OpenCL layer',type='protos']
Information concerning a Layer can be obtained with the function:
[source,opencl]
----
cl_int clGetLayerInfo(cl_layer_info  param_name,
                      size_t         param_value_size,
                      void          *param_value,
                      size_t        *param_value_size_ret);
----

  * _param_name_ is an enumeration constant that identifies the platform
information being queried. It can be one of the following values as
specified in the <<layer-queries-table, Layer Queries>> table.
  * _param_value_size_ specifies the size in bytes of memory pointed to by
    _param_value_.
    This size in bytes must be â‰¥ to the size of return type specified in the
    <<layer-queries-table, Layer Queries>> table.
  * _param_value_ is a pointer to memory location where appropriate values for a
    given _param_name_, as specified in the <<layer-queries-table, Layer
    Queries>> table, will be returned.
    If _param_value_ is `NULL`, it is ignored.
  * _param_value_size_ret_ returns the actual size in bytes of data being
    queried by _param_name_.
    If _param_value_size_ret_ is `NULL`, it is ignored.

The information that can be queried using *clGetLayerInfo* is specified
in the <<layer-queries-table, Layer Queries>> table.

[[layer-queries-table]]
.List of supported param_names by <<clGetLayerInfo>>
[width="100%",cols="<34%,<33%,<33%",options="header"]
|====
| Layer Info | Return Type | Description
| *CL_LAYER_API_VERSION* | cl_layer_api_version | OpenCL Layer API version
|====

*clGetLayerInfo* returns *CL_SUCCESS* if the function is executed
successfully.
Otherwise, it returns one of the following errors.

  * *CL_INVALID_VALUE* if _param_name_ is not one of the supported values or
    if size in bytes specified by _param_value_size_ is < size of return
    type as specified in the <<layer-queries-table, Layer Queries>> table,
    and _param_value_ is not a `NULL` value.

==== Layer Initialization

[open,refpage='clInitLayer',desc='Initialize an OpenCL layer',type='protos']
Initialization of a Layer can be achieved with the function:
[source,opencl]

----
cl_int clInitLayer(cl_uint                 num_entries,
                   const cl_icd_dispatch  *target_dispatch,
                   cl_uint                *num_entries_ret,
                   const cl_icd_dispatch **layer_dispatch_ret);
----

  * _num_entries_ is the number of entry provided by the Loader to
    the layer.
  * _target_dispatch_ is the dispatch table, provided by the loader, that
    the layer must redirect it's call to.
  * _num_entries_ret_ returns the number of entries in the dispatch table the
    layer will be returning.
  * _layer_dispatch_ret_ return the address of the layer dispatch table. The
    table can contain `NULL` value entries, and the loader is responsible for
    providing the missing entries using the entries from the target dispatch.

*clInitLayer* returns *CL_SUCCESS* if the function is executed
successfully.
Otherwise, it returns one of the following errors.

  * *CL_INVALID_VALUE* if _num_entries_ is insufficient for the layer or if
    _target_dispatch_ is a `NULL` value, or _num_entries_ret_ is a `NULL`
    value, or _layer_dispatch_ret_ is a `NULL` value.

[[cl_loader_layers-source-code]]
=== Source Code

The official source for the ICD loader is available on github, at:

https://github.com/KhronosGroup/OpenCL-ICD-Loader
The official API headers are available on github, at:

https://github.com/KhronosGroup/OpenCL-Headers
The header file *CL/cl_icd.h* defines the OpenCL dispatch table.
The header file *CL/cl_layer.h* defines the necessary types
and API entry points.
