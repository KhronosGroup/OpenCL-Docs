// Copyright 2021-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_external_semaphore]]
== External Semaphores (Provisional)

`cl_khr_semaphore` introduced semaphores as a new type along with a set of APIs for create, release, retain, wait and signal operations on it.
This extension defines APIs and mechanisms to share semaphores created in an external API by importing into and exporting from OpenCL.

This extension defines:

* New attributes that can be passed as part of {cl_semaphore_properties_khr_TYPE} for specifying properties of external semaphores to be imported or exported.

* New attributes that can be passed as part of {cl_semaphore_info_khr_TYPE} for specifying properties of external semaphores to be exported.

* An extension to {clCreateSemaphoreWithPropertiesKHR} to accept external semaphore properties allowing to import or export an external semaphore into or from OpenCL.

* Semaphore handle types required for importing and exporting semaphores.

* Modifications to Wait and Signal API behavior when dealing with external semaphores created from different handle types.

* API query exportable semaphores handles using specified handle type.

Other related extensions define specific external semaphores that may be imported into or exported from OpenCL.

=== General Information

==== Name Strings

`cl_khr_external_semaphore` +
`cl_khr_external_semaphore_dx_fence` +
`cl_khr_external_semaphore_opaque_fd` +
`cl_khr_external_semaphore_sync_fd` +
`cl_khr_external_semaphore_win32`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2021-09-10 | 0.9.0     | Initial version (provisional).
|====

NOTE: This is a preview of an OpenCL provisional extension specification that has been Ratified under the Khronos Intellectual Property Framework. It is being made publicly available prior to being uploaded to the Khronos registry to enable review and feedback from the community. If you have feedback please create an issue on https://github.com/KhronosGroup/OpenCL-Docs/

==== Dependencies

This extension is written against the OpenCL Specification Version 3.0.8.

This extension requires OpenCL 1.2.

The `cl_khr_semaphore` extension is required as it defines semaphore objects as well as for wait and signal operations on semaphores.

For OpenCL to be able to import external semaphores from other APIs using this extension, the other API is required to provide below mechanisms:

* Ability to export semaphore handles
* Ability to query semaphore handle in the form of one of the handle type supported by OpenCL.

The other APIs that want to use semaphore exported by OpenCL using this extension are required to provide below mechanism:

* Ability to import semaphore handles using handle types exported by OpenCL.

==== Contributors

// spell-checker: disable
Ajit Hakke-Patil,  NVIDIA +
Amit Rao, NVIDIA +
Balaji Calidas, QUALCOMM +
Ben Ashbaugh, INTEL +
Carsten Rohde, NVIDIA +
Christoph Kubisch, NVIDIA +
Debalina Bhattacharjee, NVIDIA +
James Jones, NVIDIA +
Jason Ekstrand, INTEL +
Jeremy Kemp, IMAGINATION +
Joshua Kelly, QUALCOMM +
Karthik Raghavan Ravi, NVIDIA +
Kedar Patil, NVIDIA +
Kevin Petit, ARM +
Nikhil Joshi, NVIDIA +
Sharan Ashwathnarayan, NVIDIA +
Vivek Kini, NVIDIA +
// spell-checker: enable

=== New Types

[source]
----
typedef cl_uint cl_external_semaphore_handle_type_khr;
----

=== New API Functions

[source]
----
cl_int clGetSemaphoreHandleForTypeKHR(
    cl_semaphore_khr sema_object,
    cl_device_id device,
    cl_external_semaphore_handle_type_khr handle_type,
    size_t handle_size,
    void *handle_ptr,
    size_t *handle_size_ret);
----

=== New API Enums

Accepted value for the _param_name_ parameter to {clGetPlatformInfo} to query external semaphore handle types that may be imported or exported by all devices in an OpenCL platform:

[source]
----
CL_PLATFORM_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR                       0x2037
CL_PLATFORM_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR                       0x2038
----

Accepted value for the _param_name_ parameter to {clGetDeviceInfo} to query external semaphore handle types that may be imported or exported by an OpenCL device:

[source]
----
CL_DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR                         0x204D
CL_DEVICE_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR                         0x204E
----

Following new attributes can be passed as part of {cl_semaphore_properties_khr_TYPE} and {cl_semaphore_info_khr_TYPE}:

[source]
----
CL_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR                                0x203F
CL_SEMAPHORE_EXPORT_HANDLE_TYPES_LIST_END_KHR                       0
----

External semaphore handle type added by `cl_khr_external_semaphore_dx_fence`:

[source]
----
CL_SEMAPHORE_HANDLE_D3D12_FENCE_KHR                    0x2059
----

External semaphore handle type added by `cl_khr_external_semaphore_opaque_fd`:

[source]
----
CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR                      0x2055
----

External semaphore handle type added by `cl_khr_external_semaphore_sync_fd`:

[source]
----
CL_SEMAPHORE_HANDLE_SYNC_FD_KHR                        0x2058
----

External semaphore handle types added by `cl_khr_external_semaphore_win32`:

[source]
----
CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KHR                   0x2056
CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KMT_KHR               0x2057
----

=== Modifications to existing APIs added by this spec

Following new enums are added to the list of supported _param_names_ by {clGetPlatformInfo}:

.List of supported param_names by clGetPlatformInfo
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Platform Info | Return Type | Description
| {CL_PLATFORM_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR}
  | {cl_external_semaphore_handle_type_khr_TYPE}[]
      | Returns the list of importable external semaphore handle types supported by all devices in _platform_.
      This size of this query may be 0 if no importable external semaphore handle types are supported by all devices in _platform_.
| {CL_PLATFORM_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR}
  | {cl_external_semaphore_handle_type_khr_TYPE}[]
      | Returns the list of exportable external semaphore handle types supported by all devices in the platform.
      This size of this query may be 0 if no exportable external semaphore handle types are supported by all devices in _platform_.
|====

{clGetPlatformInfo} when called with _param_name_ {CL_PLATFORM_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR} returns a common list of external semaphore handle types supported for importing by all devices in the platform.

{clGetPlatformInfo} when called with _param_name_ {CL_PLATFORM_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR} returns a common list of external semaphore handle types supported for exporting by all devices in the platform. 

Following new enums are added to the list of supported _param_names_ by {clGetDeviceInfo}:

.List of supported param_names by clGetDeviceInfo
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Device Info | Return Type | Description
| {CL_DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR}
  | {cl_external_semaphore_handle_type_khr_TYPE}[]
      | Returns the list of importable external semaphore handle types supported by _device_.
        This size of this query may be 0 indicating that the device does not support importing semaphores.
| {CL_DEVICE_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR}
  | {cl_external_semaphore_handle_type_khr_TYPE}[]
      | Returns the list of exportable external semaphore handle types supported by _device_.
        This size of this query may be 0 indicating that the device does not support exporting semaphores.
|====

{clGetDeviceInfo} when called with _param_name_ {CL_DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR} returns a list of external semaphore handle types supported for importing.

{clGetDeviceInfo} when called with _param_name_ {CL_DEVICE_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR} returns a list of external semaphore handle types supported for exporting.

One of the above two queries {CL_DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR} and {CL_DEVICE_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR} must return a non-empty list indicating support for at least one of the valid semaphore handles types either for import or for export or both.

Following new properties are added to the list of possible supported properties by {clCreateSemaphoreWithPropertiesKHR}:

.List of supported semaphore creation properties by clCreateSemaphoreWithPropertiesKHR
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Semaphore Property | Property Value | Description
// This is already described in cl_khr_semaphore so we don't need to describe it again here.
//| {CL_DEVICE_HANDLE_LIST_KHR}
//  | {cl_device_id_TYPE}[]
//      | Specifies the list of OpenCL devices (terminated with
//        {CL_DEVICE_HANDLE_LIST_END_KHR}) to associate with the semaphore.
// This is also already described in cl_khr_semaphore so we don't need to describe it again here.
//| {CL_SEMAPHORE_TYPE_KHR}
//  | {cl_semaphore_type_khr_TYPE}
//      | Specifies the type of semaphore to create.
| {CL_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR}
  | {cl_external_semaphore_handle_type_khr_TYPE}[]
      | Specifies the list of semaphore handle type properties terminated with
      {CL_SEMAPHORE_EXPORT_HANDLE_TYPES_LIST_END_KHR} that can be used to export
      the semaphore being created.
|====

Add to the list of error conditions for {clCreateSemaphoreWithPropertiesKHR}:

// This is in the base spec so we don't need to describe it here.
//* {CL_INVALID_DEVICE} if one or more devices identified by properties
//{CL_DEVICE_HANDLE_LIST_KHR} is/are not part of devices within _context_ to which
//{cl_semaphore_khr_TYPE} being created will belong to.
* {CL_INVALID_DEVICE} if one or more devices identified by properties {CL_DEVICE_HANDLE_LIST_KHR} can not import the requested external semaphore handle type.

{clCreateSemaphoreWithPropertiesKHR} may return a NULL value on some implementations if _sema_props_ does not contain an external semaphore handle type to import.
Such implementations are required to return a valid semaphore when a supported external memory handle type and valid external semaphore handle is specified.

Add to the list of supported _param_names_ by {clGetSemaphoreInfoKHR}:

.List of supported param_names by clGetSemaphoreInfoKHR
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Semaphore Info | Return Type | Description
// These are already in the base cl_khr_semaphore so we don't need to include them again here.
//| *CL_SEMAPHORE_CONTEXT_KHR*
//  | cl_context *
//      | cl_context
//          | Returns the cl_context associated with the {cl_semaphore_khr_TYPE}.
//| *CL_SEMAPHORE_REFERENCE_COUNT_KHR*
//  | cl_uint *
//      | cl_uint
//          | Returns the reference count associated with the {cl_semaphore_khr_TYPE}.
//| *CL_SEMAPHORE_PROPERTIES_KHR*
//  | cl_semaphore_properties_khr**
//      | cl_semaphore_properties_khr*
//          | Returns the array of properties associated with the {cl_semaphore_khr_TYPE}.
//| *CL_SEMAPHORE_TYPE_KHR*
//  | cl_semaphore_type_khr *
//      | cl_semaphore_type_khr
//          | Returns the type of the {cl_semaphore_khr_TYPE}.
//| *CL_SEMAPHORE_PAYLOAD_KHR*
//  | cl_semaphore_payload_khr *
//      | cl_semaphore_payload_khr
//          | Returns the payload value of the {cl_semaphore_khr_TYPE}. For semaphore of
//            type CL_SEMAPHORE_TYPE_BINARY_KHR, payload value returned should be 0  if the
//            semaphore is in unsignaled state and 1 if it is in signaled
//            state.
//| *CL_DEVICE_HANDLE_LIST_KHR*
//  |  cl_device_id **
//      | cl_device_id *
//          | Returns a NULL terminated list of cl_device_id (terminated with
//            CL_DEVICE_HANDLE_LIST_END_KHR) for OpenCL devices the semaphore is associated
//            with.
| {CL_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR}
  | {cl_external_semaphore_handle_type_khr_TYPE}[]
      | Returns the list of external semaphore handle types that may be used for
        exporting. The size of this query may be 0 indicating that this
        semaphore does not support any handle types for exporting.
|====

=== Exporting semaphore external handles

To export an external handle from a semaphore, call the function

include::{generated}/api/protos/clGetSemaphoreHandleForTypeKHR.txt[]

_sema_object_ specifies a valid semaphore object with exportable properties.

_device_ specifies a valid device for which a semaphore handle is being requested.

_handle_type_ specifies the type of semaphore handle that should be returned for this exportable _sema_object_ and must be one of the values specified when _sema_object_ was created.

_handle_size_ specifies the size of memory pointed by _handle_ptr_.

_handle_ptr_ is a pointer to memory where the exported external handle is returned.
If _param_value_ is `NULL`, it is ignored.

_handle_size_ret_ returns the actual size in bytes for the external handle.
If _handle_size_ret_ is `NULL`, it is ignored.

{clGetSemaphoreHandleForTypeKHR} returns {CL_SUCCESS} if the semaphore handle is queried successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_SEMAPHORE_KHR}
** if _sema_object_ is not a valid semaphore
// This is redundant with the error below.
** if _sema_object_ is not exportable
* {CL_INVALID_DEVICE}
** if _device_ is not a valid device, or
** if _sema_object_ belongs to a context that is not associated with _device_, or
** if _sema_object_ can not be shared with _device_.
* {CL_INVALID_VALUE} if the requested external semaphore handle type was not specified when _sema_object_ was created.
* {CL_INVALID_VALUE} if _handle_size_ is less than the size needed to store the returned handle.
// I don't think this can happen.  This would have been checked when the semaphore was created.
//    ** if CL_SEMAPHORE_HANDLE_*_KHR is specified as one of the _sema_props_ and
//    the property CL_SEMAPHORE_HANDLE_*_KHR does not identify a valid external
//    memory handle poperty reported by
//    CL_PLATFORM_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR or
//   CL_DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR queries.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

=== Importing semaphore external handles

Applications can import a semaphore payload into an existing semaphore using an
external semaphore handle. The effects of the import operation will be either
temporary or permanent, as specified by the application. If the import is
temporary, the implementation must restore the semaphore to its prior permanent
state after submitting the next semaphore wait operation. Performing a
subsequent temporary import on a semaphore before performing a semaphore wait
has no effect on this requirement; the next wait submitted on the semaphore must
still restore its last permanent state. A permanent payload import behaves as if
the target semaphore was destroyed, and a new semaphore was created with the
same handle but the imported payload. Because importing a semaphore payload
temporarily or permanently detaches the existing payload from a semaphore,
similar usage restrictions to those applied to {clReleaseSemaphoreKHR} are
applied to any command that imports a semaphore payload. Which of these import
types is used is referred to as the import operation's permanence. Each handle
type supports either one or both types of permanence.

The implementation must perform the import operation by either referencing or
copying the payload referred to by the specified external semaphore handle,
depending on the handle's type. The import method used is referred to as the
handle type's transference. When using handle types with reference transference,
importing a payload to a semaphore adds the semaphore to the set of all
semaphores sharing that payload. This set includes the semaphore from which the
payload was exported. Semaphore signaling and waiting operations performed on
any semaphore in the set must behave as if the set were a single semaphore.
Importing a payload using handle types with copy transference creates a
duplicate copy of the payload at the time of import, but makes no further
reference to it. Semaphore signaling and waiting operations performed on the
target of copy imports must not affect any other semaphore or payload.

Export operations have the same transference as the specified handle type's
import operations. Additionally, exporting a semaphore payload to a handle with
copy transference has the same side effects on the source semaphore's payload as
executing a semaphore wait operation. If the semaphore was using a temporarily
imported payload, the semaphore's prior permanent payload will be restored.

Please refer to handle specific specifications for more details on transference and
permanence requirements specific to handle type.

=== Descriptions of External Semaphore Handle Types

This section describes the external semaphore handle types that are added by related extensions.

Applications can import the same semaphore payload into multiple OpenCL contexts, into the same context from which it was exported, and multiple times into a given OpenCL context.
In all cases, each import operation must create a distinct semaphore object.

==== File Descriptor Handle Types

The `cl_khr_external_semaphore_opaque_fd` extension extends {cl_external_semaphore_handle_type_khr_TYPE} to support the following new types of handles, and adds as a property that may be specified when creating a semaphore from an external handle:

--
    * {CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR} specifies a POSIX file descriptor handle that has only limited valid usage outside of OpenCL and other compatible APIs. It must be compatible with the POSIX system calls dup, dup2, close, and the non-standard system call dup3. Additionally, it must be transportable over a socket using an SCM_RIGHTS control message. It owns a reference to the underlying synchronization primitive represented by its semaphore object.
--

Transference and permanence properties for handle types added by `cl_khr_external_semaphore_opaque_fd`:

.Transference and Permanence Properties for `cl_khr_external_semaphore_opaque_fd` handles
[width="100%",cols="60%,<20%,<20%",options="header"]
|====
| Handle Type | Transference | Permanence
| {CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR}
  |  Reference
      | Temporary, Permanent
|====

The `cl_khr_external_semaphore_sync_fd` extension extends {cl_external_semaphore_handle_type_khr_TYPE} to support the following new types of handles, and adds as a property that may be specified when creating a semaphore from an external handle:

--
    * *CL_SEMAPHORE_HANDLE_SYNC_FD_KHR* specifies a POSIX file descriptor handle to a Linux Sync File or Android Fence object. It can be used with any native API accepting a valid sync file or fence as input. It owns a reference to the underlying synchronization primitive associated with the file descriptor. Implementations which support importing this handle type must accept any type of sync or fence FD supported by the native system they are running on.
--

The special value -1 for fd is treated like a valid sync file descriptor referring to an object that has already signaled. The import operation will succeed and the semaphore will have a temporarily imported payload as if a valid file descriptor had been provided.

Note: This special behavior for importing an invalid sync file descriptor allows easier interoperability with other system APIs which use the convention that an invalid sync file descriptor represents work that has already completed and does not need to be waited for. It is consistent with the option for implementations to return a -1 file descriptor when exporting a {CL_SEMAPHORE_HANDLE_SYNC_FD_KHR} from a {cl_semaphore_khr_TYPE} which is signaled.

Transference and permanence properties for handle types added by `cl_khr_external_semaphore_sync_fd`:

.Transference and Permanence Properties for `cl_khr_external_semaphore_sync_fd` handles
[width="100%",cols="60%,<20%,<20%",options="header"]
|====
| Handle Type | Transference | Permanence
| {CL_SEMAPHORE_HANDLE_SYNC_FD_KHR}
  |  Copy
      | Temporary
|====

For these extensions, importing a semaphore payload from a file descriptor transfers ownership of the file descriptor from the application to the OpenCL implementation. The application must not perform any operations on the file descriptor after a successful import.

==== NT Handle Types

The `cl_khr_external_semaphore_dx_fence` extension extends {cl_external_semaphore_handle_type_khr_TYPE} to support the following new types of handles, and adds as a property that may be specified when creating a semaphore from an external handle:

--
    * {CL_SEMAPHORE_HANDLE_D3D12_FENCE_KHR} specifies an NT handle returned by ID3D12Device::CreateSharedHandle referring to a Direct3D 12 fence, or ID3D11Device5::CreateFence referring to a Direct3D 11 fence. It owns a reference to the underlying synchronization primitive associated with the Direct3D fence.
--

When waiting on semaphores using {clEnqueueWaitSemaphoresKHR} or signaling semaphores using {clEnqueueSignalSemaphoresKHR}, the semaphore payload must be provided for semaphores created from {CL_SEMAPHORE_HANDLE_D3D12_FENCE_KHR}.


* If _sema_objects_ list has a mix of cl_semaphore obtained from {CL_SEMAPHORE_HANDLE_D3D12_FENCE_KHR} and other handle types,
then the _sema_payload_list_ should point to a list of _num_sema_objects_ payload values for each cl_semaphore in _sema_objects_. 
However, the payload values corresponding to semaphores with type {CL_SEMAPHORE_TYPE_BINARY_KHR} can be set to 0 or will be ignored.

{clEnqueueWaitSemaphoresKHR} and {clEnqueueSignalSemaphoresKHR} may return {CL_INVALID_VALUE} if _sema_objects_ list has one or more cl_semaphore obtained from {CL_SEMAPHORE_HANDLE_D3D12_FENCE_KHR} and _sema_payload_list_ is NULL.



Transference and permanence properties for handle types added by `cl_khr_external_semaphore_dx_fence`:

--
.Transference and Permanence Properties for `cl_khr_external_semaphore_dx_fence` handles
[width="100%",cols="60%,<20%,<20%",options="header"]
|====
| Handle Type | Transference | Permanence
| {CL_SEMAPHORE_HANDLE_D3D12_FENCE_KHR}
  |  Reference
      | Temporary, Permanent
|====
--

The `cl_khr_external_semaphore_win32` extension extends {cl_external_semaphore_handle_type_khr_TYPE} to support the following new types of handles, and adds as a property that may be specified when creating a semaphore from an external handle:

--
    * {CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KHR} specifies an NT handle that has only limited valid usage outside of OpenCL and other compatible APIs. It must be compatible with the functions DuplicateHandle, CloseHandle, CompareObjectHandles, GetHandleInformation, and SetHandleInformation. It owns a reference to the underlying synchronization primitive represented by its semaphore object.
    * {CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KMT_KHR} specifies a global share handle that has only limited valid usage outside of OpenCL and other compatible APIs. It is not compatible with any native APIs. It does not own a reference to the underlying synchronization primitive represented by its semaphore object, and will therefore become invalid when all semaphore objects associated with it are destroyed.
--

Transference and permanence properties for handle types added by `cl_khr_external_semaphore_win32`:

.Transference and Permanence Properties for `cl_khr_external_semaphore_win32` handles
[width="100%",cols="60%,<20%,<20%",options="header"]
|====
| Handle Type | Transference | Permanence
| *CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KHR*
  |  Reference
      | Temporary, Permanent
| *CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KMT_KHR*
  |  Reference
      | Temporary, Permanent
|====

For these extensions, importing a semaphore payload from Windows handles does not transfer ownership of the handle to the OpenCL implementation. For handle types defined as NT handles, the application must release ownership using the CloseHandle system call when the handle is no longer needed.

[[cl_khr_external_semaphore-Sample-Code]]
=== Sample Code

. Example for importing a semaphore created by another API in OpenCL in a single-device context.
+
--
[source]
----
// Get cl_devices of the platform.
clGetDeviceIDs(..., &devices, &deviceCount);

// Create cl_context with just first device
clCreateContext(..., 1, devices, ...);
    
// Obtain fd/win32 or similar handle for external semaphore to be imported
// from the other API.
int fd = getFdForExternalSemaphore();

// Create clSema of type cl_semaphore_khr usable on the only available device
// assuming the semaphore was imported from the same device.

cl_semaphore_properties_khr sema_props[] = 
        {(cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_KHR,
         (cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_BINARY_KHR,
         (cl_semaphore_properties_khr)CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR,
         (cl_semaphore_properties_khr)fd,
          0};


int errcode_ret = 0;
cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);

----
--
. Example for importing a semaphore created by another API in OpenCL in a multi-device context for single device usage.
+
--
[source]
----
// Get cl_devices of the platform.
clGetDeviceIDs(..., &devices, &deviceCount);

// Create cl_context with first two devices
clCreateContext(..., 2, devices, ...);
    
// Obtain fd/win32 or similar handle for external semaphore to be imported
// from the other API.
int fd = getFdForExternalSemaphore();

// Create clSema of type cl_semaphore_khr usable only on devices[1]
// assuming the semaphore was imported from the same device.

cl_semaphore_properties_khr sema_props[] = 
        {(cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_KHR, 
         (cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_BINARY_KHR,
         (cl_semaphore_properties_khr)CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR, 
         (cl_semaphore_properties_khr)fd,
         (cl_semaphore_properties_khr)CL_DEVICE_HANDLE_LIST_KHR, 
         (cl_semaphore_properties_khr)devices[1], CL_DEVICE_HANDLE_LIST_END_KHR,
          0};


int errcode_ret = 0;
cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);

----
--
. Example for synchronization using a semaphore created by another API and imported in OpenCL
+
--
[source]
----
// Create clSema using one of the above examples of external semaphore creation.

int errcode_ret = 0;
cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);

// Start the main loop

while (true) {
    // (not shown) Signal the semaphore from the other API

    // Wait for the semaphore in OpenCL
    clEnqueueWaitSemaphoresKHR(/*command_queue*/           command_queue,
                               /*num_sema_objects*/        1,
                               /*sema_objects*/            &clSema,
                               /*num_events_in_wait_list*/ 0,
                               /*event_wait_list*/         NULL,
                               /*event*/                   NULL);

    // Launch kernel
    clEnqueueNDRangeKernel(command_queue, ...);

    // Signal the semaphore in OpenCL
    clEnqueueSignalSemaphoresKHR(/*command_queue*/           command_queue,
                                 /*num_sema_objects*/        1,
                                 /*sema_objects*/            &clSema,
                                 /*num_events_in_wait_list*/ 0,
                                 /*event_wait_list*/         NULL,
                                 /*event*/                   NULL);

    // (not shown) Launch work in the other API that waits on 'clSema'

}
----
--
. Example for synchronization using semaphore exported by OpenCL
+
--
[source]
----
 
// Get cl_devices of the platform.
clGetDeviceIDs(..., &devices, &deviceCount);

// Create cl_context with first two devices
clCreateContext(..., 2, devices, ...);

// Create clSema of type cl_semaphore_khr usable only on device 1
cl_semaphore_properties_khr sema_props[] = 
        {(cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_KHR, 
         (cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_BINARY_KHR,
         (cl_semaphore_properties_khr)CL_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR, 
         (cl_semaphore_properties_khr)CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR,
         CL_SEMAPHORE_EXPORT_HANDLE_TYPES_LIST_END_KHR,
         (cl_semaphore_properties_khr)CL_DEVICE_HANDLE_LIST_KHR, 
         (cl_semaphore_properties_khr)devices[1],
         CL_DEVICE_HANDLE_LIST_END_KHR,
         0};

int errcode_ret = 0;
cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);

// Application queries handle-type and the exportable handle associated with the semaphore.
clGetSemaphoreInfoKHR(clSema,
                      CL_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR,
                      sizeof(cl_external_semaphore_handle_type_khr),
                      &handle_type,
                      &handle_type_size);

// The other API or process can use the exported semaphore handle
// to import
int fd = -1;
if (handle_type == CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR) {
    clGetSemaphoreHandleForTypeKHR(clSema,
                                   device,
                                   CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR,
                                   sizeof(int),
                                   &fd,
                                   NULL);
}

// Start the main rendering loop

while (true) {
    // (not shown) Signal the semaphore from the other API

    // Wait for the semaphore in OpenCL
    clEnqueueWaitSemaphoresKHR(/*command_queue*/           command_queue,
                               /*num_sema_objects*/        1,
                               /*sema_objects*/            &clSema,
                               /*num_events_in_wait_list*/ 0,
                               /*event_wait_list*/         NULL,
                               /*event*/                   NULL);

    // Launch kernel
    clEnqueueNDRangeKernel(command_queue, ...);

    // Signal the semaphore in OpenCL
    clEnqueueSignalSemaphoresKHR(/*command_queue*/           command_queue,
                                 /*num_sema_objects*/        1,
                                 /*sema_objects*/            &clSema,
                                 /*num_events_in_wait_list*/ 0,
                                 /*event_wait_list*/         NULL,
                                 /*event*/                   NULL);

    // (not shown) Launch work in the other API that waits on 'clSema'

}
----
--
