// Copyright 2017-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_initialize_memory]]
== Local and Private Memory Initialization

Memory is allocated in various forms in OpenCL both explicitly (global
memory) or implicitly (local, private memory).
This allocation so far does not provide a straightforward mechanism to
initialize the memory on allocation.
In other words what is lacking is the equivalent of calloc for the currently
supported malloc like capability.
This functionality is useful for a variety of reasons including ease of
debugging, application controlled limiting of visibility to previous
contents of memory and in some cases, optimization.

This extension adds support for initializing local and private memory before
a kernel begins execution.
This extension name is *cl_khr_initialize_memory*.

[[cl_khr_initialize_memory-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.2 Specification

Add a new context property to _table 4.5_ in _section 4.4_.

[cols="3,2,4",options="header",]
|====
| *cl_context_properties enum*
| *Property value*
| *Description*

| *CL_CONTEXT_MEMORY_INITIALIZE_KHR*
| cl_context_memory_initialize_khr
| Describes which memory types for the context must be initialized.
  This is a bit-field, where the following values are currently supported:

  CL_CONTEXT_MEMORY_INITIALIZE_LOCAL_KHR -- Initialize local memory to
  zeros.

  CL_CONTEXT_MEMORY_INITIALIZE_PRIVATE_KHR -- Initialize private memory to
  zeros.

|====

[[cl_khr_initialize_memory-additions-to-chapter-6]]
=== Additions to Chapter 6 of the OpenCL 2.2 Specification

Updates to _section 6.9_ -- Restrictions

If the context is created with CL CONTEXT MEMORY INITIALIZE KHR, appropriate
memory locations as specified by the bit-field is initialized with zeroes,
prior to the start of execution of any kernel.
The driver chooses when, prior to kernel execution, the initialization of
local and/or private memory is performed.
The only requirement is there should be no values set from outside the
context, which can be read during a kernel execution.
