// Copyright 2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_work_group_uniform_arithmetic]]
== Work Group Uniform Arithmetic

This extension adds additional work-group collective functions to OpenCL C. 
Specifically, this extension adds support for work-group scans and reductions for the following operators:

* Logical operations (`and`, `or`, and `xor`).
* Bitwise operations (`and`, `or`, and `xor`).
* Integer multiplication (`mul`).
* Floating-point multiplication (`mul`).

=== General Information

==== Name Strings

`cl_khr_work_group_uniform_arithmetic`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2022-04-29 | 1.0.0     | Initial version.
|====

==== Dependencies

This extension is written against the OpenCL Specification
Version 3.0.10.

This extension requires OpenCL 2.0.

==== Contributors

Kevin Petit, Arm Ltd. +
Ben Ashbaugh, Intel +

=== New OpenCL C Functions

The following functions are added to OpenCL C.

[source,opencl_c]
----
int work_group_reduce_logical_and(int predicate);
int work_group_reduce_logical_or(int predicate);
int work_group_reduce_logical_xor(int predicate);

int work_group_scan_inclusive_logical_and(int predicate);
int work_group_scan_inclusive_logical_or(int predicate);
int work_group_scan_inclusive_logical_xor(int predicate);

int work_group_scan_exclusive_logical_and(int predicate);
int work_group_scan_exclusive_logical_or(int predicate);
int work_group_scan_exclusive_logical_xor(int predicate);
----

For the following functions, the generic type name `gentype` may be one of the supported built-in scalar data types `int`, `uint`, `long`, or `ulong`.

[source,opencl_c]
----
gentype work_group_reduce_and(gentype value);
gentype work_group_reduce_or(gentype value);
gentype work_group_reduce_xor(gentype value);

gentype work_group_scan_inclusive_and(gentype value);
gentype work_group_scan_inclusive_or(gentype value);
gentype work_group_scan_inclusive_xor(gentype value);

gentype work_group_scan_exclusive_and(gentype value);
gentype work_group_scan_exclusive_or(gentype value);
gentype work_group_scan_exclusive_xor(gentype value);
----

For the following functions, the generic type name `gentype` may be one of the supported built-in scalar data types `int`, `uint`, `long`, `ulong`, `float`, `double` (if double precision is supported), or `half` (if half precision is supported).

[source,opencl_c]
----
gentype work_group_reduce_mul(gentype value);
gentype work_group_scan_inclusive_mul(gentype value);
gentype work_group_scan_exclusive_mul(gentype value);
----

=== Modifications to the OpenCL C Specification

(Add to Section 6.15.16, *Work-group Collective Functions*) ::
+
--
The table below describes the OpenCL C programming language built-in functions that perform
logical arithmetic operations across work items in a work-group. These functions must be
encountered by all work items in a work-group executing the kernel, otherwise the behavior is
undefined. For these functions, a non-zero _predicate_ argument or return value is logically
`true` and a zero _predicate_ argument or return value is logically `false`.

[cols="2a,1",options="header"]
|====
| Function
| Description
|[source,opencl_c]
----
int work_group_reduce_logical_and(int predicate);
int work_group_reduce_logical_or(int predicate);
int work_group_reduce_logical_xor(int predicate);
----
| Returns the logical *and*, *or*, or *xor* of _predicate_ for all work items in the work-group.

|[source,opencl_c]
----
int work_group_scan_inclusive_logical_and(int predicate);
int work_group_scan_inclusive_logical_or(int predicate);
int work_group_scan_inclusive_logical_xor(int predicate);
----
| Returns the result of an inclusive scan operation, which is the logical
  *and*, *or*, or *xor* of _predicate_ for all work items in the work-group with
  a work-group linear local ID less than or equal to this work item’s work-group
  linear local ID.

|[source,c]
----
int work_group_scan_exclusive_logical_and(int predicate);
int work_group_scan_exclusive_logical_or(int predicate);
int work_group_scan_exclusive_logical_xor(int predicate);
----
| Returns the result of an exclusive scan operation, which is the logical
  *and*, *or*, or *xor* of _predicate_ for all work items in the work-group with
  a work-group linear local ID less than this work item’s work-group linear
  local ID.

  If there is no work item in the work-group with a work-group linear local ID
  less than this work item’s work-group linear local ID then an identity value
  `I` is returned. For *and*, the identity value is `true` (non-zero). For *or*
  and *xor*, the identity value is `false` (zero).

|====

The table below describes the OpenCL C programming language built-in functions
that perform bitwise integer operations across work items in a work-group. These
functions must be encountered by all work items in a work-group executing the
kernel, otherwise the behavior is undefined. For the functions below, the
generic type name `gentype` may be one of the supported built-in scalar data
types `int`, `uint`, `long`, and `ulong`.

[cols="2a,1",options="header"]
|====
| Function
| Description

|[source,opencl_c]
----
gentype work_group_reduce_and(gentype value);
gentype work_group_reduce_or(gentype value);
gentype work_group_reduce_xor(gentype value);
----
| Returns the bitwise *and*, *or*, or *xor* of _value_ for all work items in the work-group.

|[source,opencl_c]
----
gentype work_group_scan_inclusive_and(gentype value);
gentype work_group_scan_inclusive_or(gentype value);
gentype work_group_scan_inclusive_xor(gentype value);
----
| Returns the result of an inclusive scan operation, which is the bitwise *and*,
  *or*, or *xor* of _value_ for all work items in the work-group with a
  work-group linear local ID less than or equal to this work item’s work-group
  linear local ID.

|[source,opencl_c]
----
gentype work_group_scan_exclusive_and(gentype value);
gentype work_group_scan_exclusive_or(gentype value);
gentype work_group_scan_exclusive_xor(gentype value);
----
| Returns the result of an exclusive scan operation, which is the bitwise *and*,
  *or*, or *xor* of _value_ for all work items in the work-group with a
  work-group linear local ID less than this work item’s work-group linear local
  ID.

  If there is no work item in the work-group with a work-group linear local ID less than
  this work item’s work-group linear local ID then an identity value `I` is returned.
  For *and*, the identity value is `~0` (all bits set). For *or* and *xor*, the identity
  value is `0`.

|====

The table below describes the OpenCL C programming language built-in functions
that perform multiplicative operations across work items in a work-group. These
functions must be encountered by all work items in a work-group executing the
kernel, otherwise the behavior is undefined. For the functions below, the
generic type name `gentype` may be one of the supported built-in scalar data
types `int`, `uint`, `long`, `ulong`, `float`, `double` (if double precision is
supported), or `half` (if half precision is supported).

[cols="2a,1",options="header"]
|====
| Function
| Description

|[source,opencl_c]
----
gentype work_group_reduce_mul(gentype value);
----
| Returns the multiplication of _value_ for all work items in the work-group.

|[source,opencl_c]
----
gentype work_group_scan_inclusive_mul(gentype value);
----
| Returns the result of an inclusive scan operation which is the multiplication
  of _value_ for all work items in the work-group with a work-group linear local
  ID less than or equal to this work item’s work-group linear local ID.

|[source,opencl_c]
----
gentype work_group_scan_exclusive_mul(gentype value);
----
| Returns the result of an exclusive scan operation which is the multiplication
  of _value_ for all work items in the work-group with a work-group linear local
  ID less than this work item’s work-group linear local ID.

  If there is no work item in the work-group with a work-group linear local ID
  less than this work item’s work-group linear local ID then the identity value
  `1` is returned.

|====
--

=== Issues

. For these built-in functions, do we only want to support the types supported by the existing work-group collective functions, or do we want to support the types supported by the sub-group collective functions?
+
--
`RESOLVED`: The extension will require the same types as the existing work-group collective functions.

The difference are the 8-bit and 16-bit types: `char`, `uchar`, `short`, and `ushort`.  Note that `half` is already supported, if half-precision is supported.
--

