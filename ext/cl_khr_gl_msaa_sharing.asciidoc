// Copyright 2017-2019 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_gl_msaa_sharing]]
== Creating OpenCL Memory Objects from OpenGL MSAA Textures

This extension extends the OpenCL / OpenGL sharing (the
cl_khr_gl_sharing_extension) defined in
<<cl_khr_gl_sharing__memobjs,Creating OpenCL Memory Objects from OpenGL
Objects>> to allow an OpenCL image to be created from an OpenGL
multi-sampled (a.k.a.
MSAA) texture (color or depth).

This extension name is *cl_khr_gl_msaa_sharing*.
This extension requires *cl_khr_gl_depth_images*.

[[cl_khr_gl_msaa_sharing-additions-to-extension-specification]]
=== Additions to the OpenCL Extension Specification

Allow _texture_target_ argument to *clCreateFromGLTexture* to be
GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.

If _texture_target_ is GL_TEXTURE_2D_MULTISAMPLE, *clCreateFromGLTexture*
creates an OpenCL 2D multi-sample image object from an OpenGL 2D
multi-sample texture.

If _texture_target_ is GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
*clCreateFromGLTexture* creates an OpenCL 2D multi-sample array image object
from an OpenGL 2D multi-sample texture.

Multi-sample OpenCL image objects can only be read from a kernel.
Multi-sample OpenCL image objects cannot be used as arguments to
clEnqueueReadImage , clEnqueueWriteImage, clEnqueueCopyImage,
clEnqueueCopyImageToBuffer, clEnqueueCopyBufferToImage, clEnqueueMapImage
and clEnqueueFillImage and will return a CL_INVALID_OPERATION error.

*Add the following entry to the table describing
<<cl_khr_gl_sharing__memobjs-clGetGLTextureInfo-queries,OpenGL texture info
that may be queried with clGetGLTextureInfo>>:*

[cols=",,",options="header",]
|====
| *cl_gl_texture_info*
| *Return Type*
| *Info. returned in _param_value_*

| *CL_GL_NUM_SAMPLES*
| GLsizei
| The _samples_ argument passed to *glTexImage2DMultisample* or
  *glTexImage3DMultisample*.

  If _image_ is not a MSAA texture, 1 is returned.
|====

[[cl_khr_gl_msaa_sharing-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.2 Specification

The formats described in tables 5.8.a and 5.8.b of the OpenCL 2.2
specification and the additional formats described in
<<cl_khr_gl_depth_images-required-image-formats,required image formats for
cl_khr_gl_depth_images>> also support OpenCL images created from a OpenGL
multi-sampled color or depth texture.

*Update text that describes arg value argument to clSetKernelArg with the
following:*

"`If the argument is a multi-sample 2D image, the _arg_value_ entry must be
a pointer to a multi-sample image object.
If the argument is a multi-sample 2D depth image, the _arg_value_ entry must
be a pointer to a multisample depth image object.
If the argument is a multi-sample 2D image array, the _arg_value_ entry must
be a pointer to a multi-sample image array object.
If the argument is a multi-sample 2D depth image array, the _arg_value_
entry must be a pointer to a multi-sample depth image array object.`"

*Updated error code text for clSetKernelArg is:*

*Add the following text:*

"`CL_INVALID_MEM_OBJECT for an argument declared to be a multi-sample image,
multi-sample image array, multi-sample depth image or a multi-sample depth
image array and the argument value specified in _arg_value_ does not follow
the rules described above for a depth memory object or memory array object
argument.`"

[[cl_khr_gl_msaa_sharing-additions-to-chapter-6]]
=== Additions to Chapter 6 of the OpenCL 2.2 Specification

*Add the following new data types to _table 6.3_ in _section 6.1.3_ of the
OpenCL 2.2 specification:*

[cols=",",options="header",]
|====
| *Type*
| *Description*

| *image2d_msaa_t*
| A 2D multi-sample color image.
  Refer to _section 6.13.14_ for a detailed description of the built-in
  functions that use this type.

| *image2d_array_msaa_t*
| A 2D multi-sample color image array.
  Refer to _section 6.13.14_ for a detailed description of the built-in
  functions that use this type.

| *image2d_msaa_depth_t*
| A 2D multi-sample depth image.
  Refer to _section 6.13.14_ for a detailed description of the built-in
  functions that use this type.

| *image2d_array_msaa_depth_t*
| A 2D multi-sample depth image array.
  Refer to _section 6.13.14_ for a detailed description of the built-in
  functions that use this type.

|====

*Add the following built-in functions to section 6.13.14.3 -- BuiltIn Image
Sampler-less Read Functions:*

[source,c]
----
float4 read_imagef(
    image2d_msaa_t image,
    int2 coord,
    int sample)
----

Use the coordinate _(coord.x, coord.y)_ and _sample_ to do an element lookup
in the 2D image object specified by _image_.

*read_imagef* returns floating-point values in the range [0.0 ... 1.0] for
image objects created with _image_channel_data_type_ set to one of the
pre-defined packed formats or CL_UNORM_INT8, or CL_UNORM_INT16.

*read_imagef* returns floating-point values in the range [-1.0 ... 1.0] for
image objects created with _image_channel_data_type_ set to CL_SNORM_INT8,
or CL_SNORM_INT16.

*read_imagef* returns floating-point values for image objects created with
_image_channel_data_type_ set to CL_HALF_FLOAT or CL_FLOAT.

Values returned by *read_imagef* for image objects with
_image_channel_data_type_ values not specified in the description above are
undefined.

[source,c]
----
int4 read_imagei(image2d_msaa_t image,
                 int2 coord,
                 int sample)

uint4 read_imageui(image2d_msaa_t image,
                   int2 coord,
                   int sample)
----

Use the coordinate _(coord.x, coord.y)_ and _sample_ to do an element lookup
in the 2D image object specified by _image_.

*read_imagei* and *read_imageui* return unnormalized signed integer and
unsigned integer values respectively.
Each channel will be stored in a 32-bit integer.

*read_imagei* can only be used with image objects created with
_image_channel_data_type_ set to one of the following values:

  * CL_SIGNED_INT8,
  * CL_SIGNED_INT16, and
  * CL_SIGNED_INT32.

If the _image_channel_data_type_ is not one of the above values, the values
returned by *read_imagei* are undefined.

*read_imageui* can only be used with image objects created with
_image_channel_data_type_ set to one of the following values:

  * CL_UNSIGNED_INT8,
  * CL_UNSIGNED_INT16, and
  * CL_UNSIGNED_INT32.

If the _image_channel_data_type_ is not one of the above values, the values
returned by *read_imageui* are undefined.

[source,c]
----
float4 read_imagef(image2d_array_msaa_t image,
                   int4 coord,
                   int sample)
----

Use _coord.xy_ and _sample_ to do an element lookup in the 2D image
identified by _coord.z_ in the 2D image array specified by _image_.

*read_imagef* returns floating-point values in the range [0.0 ... 1.0] for
image objects created with _image_channel_data_type_ set to one of the
pre-defined packed formats or CL_UNORM_INT8, or CL_UNORM_INT16.

*read_imagef* returns floating-point values in the range [-1.0 ... 1.0] for
image objects created with _image_channel_data_type_ set to CL_SNORM_INT8,
or CL_SNORM_INT16.

*read_imagef* returns floating-point values for image objects created with
_image_channel_data_type_ set to CL_HALF_FLOAT or CL_FLOAT.

Values returned by *read_imagef* for image objects with
_image_channel_data_type_ values not specified in the description above are
undefined.


[source,c]
----
int4 read_imagei(image2d_array_msaa_t image,
                 int4 coord,
                 int sample)

uint4 read_imageui(image2d_array_msaa_t image,
                   int4 coord,
                   int sample)
----

Use _coord.xy_ and _sample_ to do an element lookup in the 2D image
identified by _coord.z_ in the 2D image array specified by _image_.

*read_imagei* and *read_imageui* return unnormalized signed integer and
unsigned integer values respectively.
Each channel will be stored in a 32-bit integer.

*read_imagei* can only be used with image objects created with
_image_channel_data_type_ set to one of the following values:

  * CL_SIGNED_INT8,
  * CL_SIGNED_INT16, and
  * CL_SIGNED_INT32.

If the _image_channel_data_type_ is not one of the above values, the values
returned by *read_imagei* are undefined.

*read_imageui* can only be used with image objects created with
_image_channel_data_type_ set to one of the following values:

  * CL_UNSIGNED_INT8,
  * CL_UNSIGNED_INT16, and
  * CL_UNSIGNED_INT32.

If the _image_channel_data_type_ is not one of the above values, the values
returned by *read_imageui* are undefined.

[source,c]
----
float read_imagef(image2d_msaa_depth_t image,
                  int2 coord,
                  int sample)
----

Use the coordinate _(coord.x, coord.y)_ and _sample_ to do an element lookup
in the 2D depth image object specified by _image_.

*read_imagef* returns a floating-point value in the range [0.0 ... 1.0] for
depth image objects created with _image_channel_data_type_ set to
CL_UNORM_INT16 or CL_UNORM_INT24.

*read_imagef* returns a floating-point value for depth image objects created
with _image_channel_data_type_ set to CL_FLOAT.

Values returned by *read_imagef* for image objects with
_image_channel_data_type_ values not specified in the description above are
undefined.

[source,c]
----
float read_imagef(image2d_array_msaaa_depth_t image,
                  int4 coord,
                  int sample)
----

Use _coord.xy_ and _sample_ to do an element lookup in the 2D image
identified by _coord.z_ in the 2D depth image array specified by _image_.

*read_imagef* returns a floating-point value in the range [0.0 ... 1.0] for
depth image objects created with _image_channel_data_type_ set to
CL_UNORM_INT16 or CL_UNORM_INT24.

*read_imagef* returns a floating-point value for depth image objects created
with _image_channel_data_type_ set to CL_FLOAT.

Values returned by *read_imagef* for image objects with
_image_channel_data_type_ values not specified in the description above are
undefined.

Note: When a multisample image is accessed in a kernel, the access takes one
vector of integers describing which pixel to fetch and an integer
corresponding to the sample numbers describing which sample within the pixel
to fetch.
sample identifies the sample position in the multi-sample image.

*For best performance, we recommend that _sample_ be a literal value so it
is known at compile time and the OpenCL compiler can perform appropriate
optimizations for multi-sample reads on the device*.

No standard sampling instructions are allowed on the multisample image.
Accessing a coordinate outside the image and/or a sample that is outside the
number of samples associated with each pixel in the image is undefined

*Add the following built-in functions to section 6.13.14.5 -- BuiltIn Image
Query Functions:*

[source,c]
----
int get_image_width(image2d_msaa_t image)

int get_image_width(image2d_array_msaa_t image)

int get_image_width(image2d_msaa_depth_t image)

int get_image_width(image2d_array_msaa_depth_t image)
----

Return the image width in pixels.

[source,c]
----
int get_image_height(image2d_msaa_t image)

int get_image_height(image2d_array_msaa_t image)

int get_image_height(image2d_msaa_depth_t image)

int get_image_height(image2d_array_msaa_depth_t image)
----

Return the image height in pixels.

[source,c]
----
int get_image_channel_data_type(image2d_msaa_t image)

int get_image_channel_data_type(image2d_array_msaa_t image)

int get_image_channel_data_type(image2d_msaa_depth_t image)

int get_image_channel_data_type(image2d_array_msaa_depth_t image)
----

Return the channel data type.

[source,c]
----
int get_image_channel_order(image2d_msaa_t image)

int get_image_channel_order(image2d_array_msaa_t image)

int get_image_channel_order(image2d_msaa_depth_t image)

int get_image_channel_order(image2d_array_msaa_depth_t image)
----

Return the image channel order.

[source,c]
----
int2 get_image_dim(image2d_msaa_t image)

int2 get_image_dim(image2d_array_msaa_t image)

int2 get_image_dim(image2d_msaa_depth_t image)

int2 get_image_dim(image2d_array_msaa_depth_t image)
----

Return the 2D image width and height as an int2 type.
The width is returned in the _x_ component, and the height in the _y_
component.

[source,c]
----
size_t get_image_array_size(image2d_array_msaa_depth_t image)
----

Return the number of images in the 2D image array.

[source,c]
----
int get_image_num_samples(image2d_msaa_t image)

int get_image_num_samples(image2d_array_msaa_t image)

int get_image_num_samples(image2d_msaa_depth_t image)

int get_image_num_samples(image2d_array_msaa_depth_t image)
----

Return the number of samples in the 2D MSAA image
