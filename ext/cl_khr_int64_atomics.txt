// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

[[cl_khr_int64_atomics]]
== 64-bit Atomics

This section describes the *cl_khr_int64_base_atomics* and *cl_khr_int64_extended_atomics* extensions. These extensions allow atomic operations to be performed on 64-bit signed and unsigned integers in global and local memory.

._Built-in Atomic Functions for_ *cl_khr_int64_base_atomics*
[cols="9,5",options="header",]
|=======================================================================
|*Function* |*Description*

|
long *atom_add* (volatile \_\_global long \*_p_, long _val_) +
long *atom_add* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_add* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_add* (volatile \_\_local ulong *_p_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ + _val_) and store result at location
pointed by _p_. The function returns _old_.

|
long *atom_sub* (volatile \_\_global long \*_p_, long _val_) +
long *atom_sub* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_sub* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_sub* (volatile \_\_local ulong *_p_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ - _val_) and store result at location
pointed by _p_. The function returns _old_.

|
long *atom_xchg* (volatile \_\_global long \*_p_, long _val_) +
long *atom_xchg* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_xchg* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_xchg* (volatile \_\_local ulong *_p_, ulong _val_)

|Swaps the _old_ value stored at location _p_ with new value given by
_val_. Returns _old_ value.

|
long *atom_inc* (volatile \_\_global long \*_p_) +
long *atom_inc* (volatile \_\_local long \*_p_) +
{blank}
ulong *atom_inc* (volatile \_\_global ulong \*_p_) +
ulong *atom_inc* (volatile \_\_local ulong *_p_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ + _1_) and store result at location
pointed by _p_. The function returns _old_.

|
long *atom_dec* (volatile \_\_global long \*_p_) +
long *atom_dec* (volatile \_\_local long \*_p_) +
{blank}
ulong *atom_dec* (volatile \_\_global ulong \*_p_) +
ulong *atom_dec* (volatile \_\_local ulong *_p_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ - _1_) and store result at location
pointed by _p_. The function returns _old_.

|
long *atom_cmpxchg* (volatile \_\_global long \*_p_, long _cmp_, long _val_) +
long *atom_cmpxchg* (volatile \_\_local long \*_p_, long _cmp_, long _val_) +
{blank}
ulong *atom_cmpxchg* (volatile \_\_global ulong \*_p_, ulong _cmp_, ulong _val_) +
ulong *atom_cmpxchg* (volatile \_\_local ulong *_p_, ulong _cmp_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ == _cmp_) ? _val_ : _old_ and store
result at location pointed by _p_. The function returns _old_.

|=======================================================================

._Built-in Atomic Functions for_ *cl_khr_int64_extended_atomics*
[cols=",",options="header",]
|=======================================================================
|*Function* |*Description*

|
long *atom_min* (volatile \_\_global long \*_p_, long _val_) +
long *atom_min* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_min* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_min* (volatile \_\_local ulong *_p_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute *min*(_old_, _val_) and store minimum value at
location pointed by _p_. The function returns _old_.

|
long *atom_max* (volatile \_\_global long \*_p_, long _val_) +
long *atom_max* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_max* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_max* (volatile \_\_local ulong *_p_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute *max*(_old_, _val_) and store maximum value at
location pointed by _p_. The function returns _old_.

|
long *atom_and* (volatile \_\_global long \*_p_, long _val_) +
long *atom_and* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_and* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_and* (volatile \_\_local ulong *_p_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ & val) and store result at location
pointed by _p_. The function returns _old_.

|
long *atom_or* (volatile \_\_global long \*_p_, long _val_) +
long *atom_or* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_or* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_or* (volatile \_\_local ulong *_p_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ \| val) and store result at location
pointed by _p_. The function returns _old_.

|
long *atom_xor* (volatile \_\_global long \*_p_, long _val_) +
long *atom_xor* (volatile \_\_local long \*_p_, long _val_) +
{blank}
ulong *atom_xor* (volatile \_\_global ulong \*_p_, ulong _val_) +
ulong *atom_xor* (volatile \_\_local ulong *_p_, ulong _val_)

|Read the 64-bit value (referred to as _old_) stored at location
pointed by _p_. Compute (_old_ ^ val) and store result at location
pointed by _p_. The function returns _old_.

|=======================================================================

Note: Atomic operations on 64-bit integers and 32-bit integers (and
float) are also atomic w.r.t. each other.
