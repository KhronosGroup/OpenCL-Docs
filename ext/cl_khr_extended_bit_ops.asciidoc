// Copyright 2018-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_extended_bit_ops]]
== Extended Bit Operations

This extension adds OpenCL C functions for performing extended bit operations.
Specifically, the following functions are added:

* bitfield insert: insert bits from one source operand into another source operand.
* bitfield extract: extract bits from a source operand, with sign- or zero-extension.
* bit reverse: reverse the bits of a source operand.

=== General Information

==== Name Strings

`cl_khr_extended_bit_ops`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2021-04-22 | 1.0.0     | Initial version.
|====

==== Dependencies

This extension is written against the OpenCL 3.0 C Language Specification and the OpenCL SPIR-V Environment Specification Version V3.0.6.

This extension requires OpenCL 1.0.

=== New OpenCL C Functions

[source,opencl_c]
----
gentype bitfield_insert( gentype base, gentype insert, uint offset, uint count )
igentype bitfield_extract_signed( gentype base, uint offset, uint count )
ugentype bitfield_extract_unsigned( gentype base, uint offset, uint count )
gentype bit_reverse( gentype base )
----

=== Modifications to the OpenCL C Specification

==== Modify Section 6.15.3. Integer Functions:

Add a new Section 6.15.3.X. Extended Bit Operations: ::
+
--
The functions described in the following table can be used with built-in scalar or vector integer types to perform extended bit operations.
The functions that operate on vector types operate component-wise.
The description is per-component.

In the table below, the generic type name `gentype` refers to the built-in integer types `char`, `char__n__`, `uchar`, `uchar__n__`, `short`, `short__n__`, `ushort`, `ushort__n__`, `int`, `int__n__`, `uint`, `uint__n__`, `long`, `long__n__`, `ulong`, and `ulong__n__`.
The generic type name `igentype` refers to the built-in signed integer types `char`, `char__n__`, `short`, `short__n__`, `int`, `int__n__`, `long`, and `long__n__`.
The generic type name `ugentype` refers to the built-in unsigned integer types `uchar`, `uchar__n__`, `ushort`, `ushort__n__`, `uint`, `uint__n__`, `ulong`, and `ulong__n__`.
_n_ is 2, 3, 4, 8, or 16.

.Built-in Scalar and Vector Extended Bit Operations
[cols="1a,1", options="header"]
|===
|*Function*
|*Description*

|[source,opencl_c]
----
gentype bitfield_insert(
    gentype base, gentype insert,
    uint offset, uint count)
----

|Returns a copy of _base_, with a modified bitfield that comes from _insert_.

Any bits of the result value numbered outside [_offset_, _offset_ + _count_ - 1] (inclusive) will come from the corresponding bits in _base_.

Any bits of the result value numbered inside [_offset_, _offset_ + _count_ - 1] (inclusive) will come from the bits numbered [0, _count_ - 1] (inclusive) of _insert_.

_count_ is the number of bits to be modified.
If _count_ equals 0, the return value will be equal to _base_.

If _count_ or _offset_ or _offset_ + _count_ is greater than number of bits in `gentype` (for scalar types) or components of `gentype` (for vector types), the result is undefined.

|[source,opencl_c]
----
igentype bitfield_extract_signed(
    gentype base,
    uint offset, uint count)
----

|Returns an extracted bitfield from _base_ with sign extension.
The type of the return value is always a signed type.

The bits of _base_ numbered in [_offset_, _offset_ + _count_ - 1] (inclusive) are returned as the bits numbered in [0, _count_ - 1] (inclusive) of the result.
The remaining bits in the result will be sign extended by replicating the bit numbered _offset_ + _count_ - 1 of _base_.

_count_ is the number of bits to be extracted.
If _count_ equals 0, the result is 0.

If the _count_ or _offset_ or _offset_ + _count_ is greater than number of bits in `gentype` (for scalar types) or components of `gentype` (for vector types), the result is undefined.

|[source,opencl_c]
----
ugentype bitfield_extract_unsigned(
    gentype base,
    uint offset, uint count)
----

|Returns an extracted bitfield from _base_ with zero extension.
The type of the return value is always an unsigned type.

The bits of _base_ numbered in [_offset_, _offset_ + _count_ - 1] (inclusive) are returned as the bits numbered in [0, _count_ - 1] (inclusive) of the result.
The remaining bits in the result will be zero.

_count_ is the number of bits to be extracted.
If _count_ equals 0, the result is 0.

If the _count_ or _offset_ or _offset_ + _count_ is greater than number of bits in `gentype` (for scalar types) or components of `gentype` (for vector types), the result is undefined.

|[source,opencl_c]
----
gentype bit_reverse(
    gentype base)
----

|Returns the value of _base_ with reversed bits.
That is, the bit numbered _n_ of the result value will be taken from the bit numbered _width_ - _n_ - 1 of _base_ (for scalar types) or a component of _base_ (for vector types), where _width_ is number of bits of `gentype` (for scalar types) or components of `gentype` (for vector types).

|===
--
