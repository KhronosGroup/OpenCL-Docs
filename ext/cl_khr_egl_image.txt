// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_egl_image]]
== Creating OpenCL Memory Objects from EGL Images

[[cl_khr_egl_image-overview]]
=== Overview

This section describes the *cl_khr_egl_image* extension.
This extension provides a mechanism to creating OpenCL memory objects from
from EGLImages.

[[cl_khr_egl_image-new-procedures-and-functions]]
=== New Procedures and Functions

[source]
----
cl_mem clCreateFromEGLImageKHR(cl_context context,
                               CLeglDisplayKHR display,
                               CLeglImageKHR image,
                               cl_mem_flags flags,
                               const cl_egl_image_properties_khr *properties,
                               cl_int *errcode_ret);

cl_int clEnqueueAcquireEGLObjectsKHR(cl_command_queue command_queue,
                                     cl_uint num_objects,
                                     const cl_mem *mem_objects,
                                     cl_uint num_events_in_wait_list,
                                     const cl_event *event_wait_list,
                                     cl_event *event)

cl_int clEnqueueReleaseEGLObjectsKHR(cl_command_queue command_queue,
                                     cl_uint num_objects,
                                     const cl_mem *mem_objects,
                                     cl_uint num_events_in_wait_list,
                                     const cl_event *event_wait_list,
                                     cl_event *event)
----

[[cl_khr_egl_image-new-tokens]]
=== New Tokens

New error codes:

----
CL_EGL_RESOURCE_NOT_ACQUIRED_KHR    -1092
CL_INVALID_EGL_OBJECT_KHR           -1093
----

New command types:

----
CL_COMMAND_ACQUIRE_EGL_OBJECTS_KHR  0x202D
CL_COMMAND_RELEASE_EGL_OBJECTS_KHR  0x202E
----

[[cl_khr_egl_image-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.2 Specification

In section 5.2.4, add the following text after the paragraph defining
clCreateImage:

"`The function
indexterm:[clCreateFromEGLImageKHR]
[source]
----
cl_mem clCreateFromEGLImageKHR(cl_context context,
                               CLeglDisplayKHR display,
                               CLeglImageKHR image,
                               cl_mem_flags flags,
                               const cl_egl_image_properties_khr *properties,
                               cl_int *errcode_ret);
----

creates an EGLImage target of type cl_mem from the EGLImage source provided
as _image_.

_display_ should be of type EGLDisplay, cast into the type CLeglDisplayKHR.

_image_ should be of type EGLImageKHR, cast into the type CLeglImageKHR.
Assuming no errors are generated in this function, the resulting image
object will be an EGLImage target of the specified EGLImage _image_.
The resulting cl_mem is an image object which may be used normally by all
OpenCL operations.
This maps to an image2d_t type in OpenCL kernel code.

_flags_ is a bit-field that is used to specify usage information about the
memory object being created.

The possible values for _flags_ are: CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and
CL_MEM _READ_WRITE.

For OpenCL 1.2 _flags_ also accepts: CL_MEM_HOST_WRITE_ONLY,
CL_MEM_HOST_READ_ONLY or CL_MEM_HOST_NO_ACCESS.

This extension only requires support for CL_MEM _READ_ONLY, and for OpenCL
1.2 CL_MEM_HOST_NO_ACCESS.
For OpenCL 1.1, a CL_INVALID_OPERATION will be returned for images which do
not support host mapping.

If the value passed in _flags_ is not supported by the OpenCL implementation
it will return CL_INVALID_VALUE.
The accepted _flags_ may be dependent upon the texture format used.

_properties_ specifies a list of property names and their corresponding
values.
Each property name is immediately followed by the corresponding desired
value.
The list is terminated with 0.
No properties are currently supported with this version of the extension.
_properties_ can be `NULL`.

*clCreateFromEGLImageKHR* returns a valid non-zero OpenCL image object and
_errcode_ret_ is set to CL_SUCCESS if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid OpenCL context.
  * CL_INVALID_VALUE if _properties_ contains invalid values, if _display_
    is not a valid display object or if _flags_ are not in the set defined
    above.
  * CL_INVALID_EGL_OBJECT_KHR if _image_ is not a valid EGLImage object.
  * CL_IMAGE_FORMAT_NOT_SUPPORTED if the OpenCL implementation is not able
    to create a cl_mem compatible with the provided CLeglImageKHR for an
    implementation-dependent reason (this could be caused by, but not
    limited to, reasons such as unsupported texture formats, etc).
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_INVALID_OPERATION if there are no devices in _context_ that support
    images (i.e. CL_DEVICE_IMAGE_SUPPORT specified in table 4.3 is CL_FALSE)
    or if the flags passed are not supported for that image type.`"

[[cl_khr_egl_image-lifetime-of-shared-objects]]
==== Lifetime of Shared Objects

An OpenCL memory object created from an EGL image remains valid according to
the lifetime behavior as described in EGL_KHR_image_base.

"`Any EGLImage siblings exist in any client API context`"

For OpenCL this means that while the application retains a reference on the
cl_mem (the EGL sibling), the image remains valid.

[[cl_khr_egl_image-synchronizing-opengl-and-egl-access-to-shared-objects]]
==== Synchronizing OpenCL and EGL Access to Shared Objects

In order to ensure data integrity, the application is responsible for
synchronizing access to shared CL/EGL objects by their respective APIs.
Failure to provide such synchronization may result in race conditions and
other undefined behavior including non-portability between implementations.

Prior to calling clEnqueueAcquireEGLObjectsKHR, the application must ensure
that any pending operations which access the objects specified in
mem_objects have completed.
This may be accomplished in a portable way by ceasing all client operations
on the resource, and issuing and waiting for completion of a glFinish
command on all GL contexts with pending references to these objects.
Implementations may offer more efficient synchronization methods, such as
synchronization primitives or fence operations.

Similarly, after calling clEnqueueReleaseEGLImageObjects, the application is
responsible for ensuring that any pending OpenCL operations which access the
objects specified in mem_objects have completed prior to executing
subsequent commands in other APIs which reference these objects.
This may be accomplished in a portable way by calling clWaitForEvents with
the event object returned by clEnqueueReleaseGLObjects, or by calling
clFinish.
As above, some implementations may offer more efficient methods.

Attempting to access the data store of an EGLImage object after it has been
acquired by OpenCL and before it has been released will result in undefined
behavior.
Similarly, attempting to access a shared EGLImage object from OpenCL before
it has been acquired by the OpenCL command queue or after it has been
released, will result in undefined behavior.

[[cl_khr_egl_image-sharing-memory-objects-created-from-egl-resources-between-egldisplays-and-opencl-contexts]]
==== Sharing memory objects created from EGL resources between EGLDisplays and OpenCL contexts

The function
indexterm:[clEnqueueAcquireEGLObjectsKHR]
[source]
----
cl_int clEnqueueAcquireEGLObjectsKHR(cl_command_queue command_queue,
                                     cl_uint num_objects,
                                     const cl_mem *mem_objects,
                                     cl_uint num_events_in_wait_list,
                                     const cl_event *event_wait_list,
                                     cl_event *event)
----

is used to acquire OpenCL memory objects that have been created from EGL
resources.
The EGL objects are acquired by the OpenCL context associated with
_command_queue_ and can therefore be used by all command-queues associated
with the OpenCL context.

OpenCL memory objects created from EGL resources must be acquired before
they can be used by any OpenCL commands queued to a command-queue.
If an OpenCL memory object created from a EGL resource is used while it is
not currently acquired by OpenCL, the call attempting to use that OpenCL
memory object will return CL_EGL_RESOURCE_NOT_ACQUIRED_KHR.

_command_queue_ is a valid command-queue.

_num_objects_ is the number of memory objects to be acquired in
_mem_objects_.

_mem_objects_ is a pointer to a list of OpenCL memory objects that were
created from EGL resources, within the context associate with command_queue.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this particular command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The events specified in _event_wait_list_ act as synchronization points.

_event_ returns an event object that identifies this particular command and
can be used to query or queue a wait for this particular command to
complete.
_event_ can be `NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.

*clEnqueueAcquireEGLObjectsKHR* returns CL_SUCCESS if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` then the function does
nothing and returns CL_SUCCESS.
Otherwise it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if num_objects > 0 and mem_objects is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects in the context associated with _command_queue_.
  * CL_INVALID_EGL_OBJECT_KHR if memory objects in _mem_objects_ have not
    been created from EGL resources.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The function
indexterm:[clEnqueueReleaseEGLObjectsKHR]
[source]
----
cl_int clEnqueueReleaseEGLObjectsKHR(cl_command_queue command_queue,
                                     cl_uint num_objects,
                                     const cl_mem *mem_objects,
                                     cl_uint num_events_in_wait_list,
                                     const cl_event *event_wait_list,
                                     cl_event *event)
----

is used to release OpenCL memory objects that have been created from EGL
resources.
The EGL objects are released by the OpenCL context associated with
<command_queue>.

OpenCL memory objects created from EGL resources which have been acquired by
OpenCL must be released by OpenCL before they may be accessed by EGL or by
EGL client APIs.
Accessing a EGL resource while its corresponding OpenCL memory object is
acquired is in error and will result in undefined behavior, including but
not limited to possible OpenCL errors, data corruption, and program
termination.

_command_queue_ is a valid command-queue.

_num_objects_ is the number of memory objects to be acquired in
_mem_objects_.

_mem_objects_ is a pointer to a list of OpenCL memory objects that were
created from EGL resources, within the context associate with command_queue.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this particular command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The events specified in _event_wait_list_ act as synchronization points.

_event_ returns an event object that identifies this particular command and
can be used to query or queue a wait for this particular command to
complete.
_event_ can be `NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.

*clEnqueueReleaseEGLObjectsKHR* returns CL_SUCCESS if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` then the function does
nothing and returns CL_SUCCESS.
Otherwise it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if num_objects > 0 and mem_objects is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects in the context associated with _command_queue_.
  * CL_INVALID_EGL_OBJECT_KHR if memory objects in _mem_objects_ have not
    been created from EGL resources.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

[[cl_khr_egl_image-issues]]
=== Issues

  . This extension does not support reference counting of the images, so the
    onus is on the application to behave sensibly and not release the
    underlying cl_mem object while the EGLImage is still being used.
  . In order to ensure data integrity, the application is responsible for
    synchronizing access to shared CL/EGL image objects by their respective
    APIs.
    Failure to provide such synchronization may result in race conditions
    and other undefined behavior.
    This may be accomplished by calling clWaitForEvents with the event
    objects returned by any OpenCL commands which use the shared image
    object or by calling clFinish.
  . Currently CL_MEM_READ_ONLY is the only supported flag for _flags_.
+
--
RESOLVED: Implementation will now return an error if writing to a shared
object that is not supported rather than disallowing it entirely.
--
  . Currently restricted to 2D image objects.
  . What should happen for YUV color-space conversion, multi plane images,
    and chroma-siting, and channel mapping?
+
--
RESOLVED: YUV is no longer explicitly described in this extension.
Before this removal the behavior was dependent on the platform.
This extension explicitly leaves the YUV layout to the platform and EGLImage
source extension (i.e. is implementation specific).
Colorspace conversion must be applied by the application using a color
conversion matrix.

The expected extension path if YUV color-space conversion is to be supported
is to introduce a YUV image type and provide overloaded versions of the
read_image built-in functions.

Getting image information for a YUV image should return the original image
size (non quantized size) when all of Y U and V are present in the image.
If the planes have been separated then the actual dimensionality of the
separated plane should be reported.
For example with YUV 4:2:0 (NV12) with a YUV image of 256x256, the Y only
image would return 256x256 whereas the UV only image would return 128x128.
--
  . Should an attribute list be used instead?
+
--
RESOLVED: function has been changed to use an attribute list.
--
  . What should happen for EGLImage extensions which introduce formats
    without a mapping to an OpenCL image channel data type or channel order?
+
--
RESOLVED: This extension does not define those formats.
It is expected that as additional EGL extensions are added to create EGL
images from other sources, an extension to CL will be introduced where
needed to represent those image types.
--
  . What are the guarantees to synchronization behavior provided by the
    implementation?
+
--
The basic portable form of synchronization is to use a clFinish, as is the
case for GL interop.
In addition implementations which support the synchronization extensions
cl_khr_egl_event and EGL_KHR_cl_event can interoperate more efficiently as
described in those extensions.
--
