// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_il_program]]
== Intermediate Language Programs

This section describes the *cl_khr_il_program* extension.

This extension adds the ability to create programs with intermediate language (IL),
usually SPIR-V.  Further information about the format and contents of SPIR-V may be
found in the SPIR-V Specification.  Information about how SPIR-V modules behave in
the OpenCL environment may be found in the OpenCL SPIR-V Environment Specification.

This functionality described by this extension is a core feature in OpenCL 2.1.

[[cl_khr_il_program-new-procedures-and-functions]]
=== New Procedures and Functions

[source,c]
----
cl_program clCreateProgramWithILKHR(cl_context context,
                                    const void *il,
                                    size_t length,
                                    cl_int *errcode_ret);
----

[[cl_khr_il_program-new-tokens]]
=== New Tokens

Accepted as a new _param_name_ argument to *clGetDeviceInfo*:

----
CL_DEVICE_IL_VERSION_KHR
----

Accepted as a new _param_name_ argument to *clGetProgramInfo*:

----
CL_PROGRAM_IL_KHR
----

[[cl_khr_il_program-additions-to-chapter-3]]
=== Additions to Chapter 3 of the OpenCL 2.0 Specification

In section 3.1, replace the fourth paragraph with:

"Programmers provide programs in the form of intermediate language binaries (usually SPIR-V), OpenCL C source strings, or implementation-defined binary objects. The OpenCL platform provides a compiler to translate programs represented as intermediate language binaries or OpenCL C source strings into device program executables. The compiler may be _online_ or _offline_. An _online compiler_ is available during host program execution using standard APIs. An _offline compiler_ is invoked outside of host program control, using platform-specific methods. The OpenCL runtime allows developers to get a previously compiled device program executable and to load and execute a previously compiled device program executable."

[[cl_khr_il_program-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.0 Specification

Add a new device property to *Table 4.3* _OpenCL Device Queries_:

[cols="2,1,3",options="header",]
|=======================================================================
|*cl_device_info*
|*Return Type*
|*Description*

|*CL_DEVICE_IL_VERSION_KHR*
|char[]
|The intermediate languages that are be supported by *clCreateProgramWithILKHR* for this device. +
{blank}
Returns a space separated list of IL version strings of the form: +
{blank}
+<IL_Prefix>_<Major_version>.<Minor_version>+ +
{blank}
A device that supports the *cl_khr_il_program* extension must support the “SPIR-V” IL prefix.

|=======================================================================

[[cl_khr_il_program-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.0 Specification

Add to Section 5.8.1: Creating Program Objects:

"The function

indexterm:[clCreateProgramWithILKHR]
[source,c]
----
cl_program clCreateProgramWithILKHR(cl_context context,
                                    const void *il,
                                    size_t length,
                                    cl_int *errcode_ret);
----

creates a new program object for _context_ using the _length_ bytes of intermediate language pointed to by _il_.

_context_ must be a valid OpenCL context.

_il_ is a pointer to a _length_-byte block of memory containing intermediate langage.

_length_ is the length of the block of memory pointed to by _il_.

_errcode_ret_ will return an appropriate error code. If _errcode_ret_ is NULL, no error code is returned.

*clCreateProgramWithILKHR* returns a valid non-zero program object and _errcode_ret_ is set to CL_SUCCESS if the program object is created successfully. Otherwise, it returns a NULL value with one of the following error values returned in _errcode_ret_:

* CL_INVALID_CONTEXT if _context_ is not a valid context
* CL_INVALID_VALUE if _il_ is NULL or if _length_ is zero.
* CL_INVALID_VALUE if the _length_-byte block of memory pointed to by _il_ does not contain well-formed intermediate language.
* CL_OUT_OF_RESOURCES if there is a failure to allocate resources required by the OpenCL implementation on the device.
* CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources required by the OpenCL implementation on the host."

Add to Section 5.8.2: Building Program Executables:

Add the following to the description of the _options_ parameter to *clBuildProgram*:

"Certain options are ignored when _program_ is created with IL."

Additionally, replace the error:

* CL_INVALID_OPERATION if _program_ was not created with *clCreateProgramWithSource* or *clCreateProgramWithBinary*.

with:

* CL_INVALID_OPERATION if _program_ was not created with *clCreateProgramWithSource*, *clCreateProgramWithILKHR* or *clCreateProgramWithBinary.*

Add to Section 5.8.3: Separate Compilation and Linking of Programs:

Add the following to the description of the _options_ parameter to *clCompileProgram*:

"Certain options are ignored when _program_ is created with IL."

Additionally, replace the error:

* CL_INVALID_OPERATION if _program_ has no source i.e. it has not been created with *clCreateProgramWithSource*.

with:

* CL_INVALID_OPERATION if _program_ was not created with *clCreateProgramWithSource* or *clCreateProgramWithILKHR*.

Add to Section 5.8.4.1: Preprocessor Options, +
Add to Section 5.8.4.2: Math Intrinsic Options (for -cl-single-precision-constant-only), +
Add to Section 5.8.4.3: Optimization Options, +
Add to Section 5.8.4.4: Options to Request or Suppress Warnings, and +
Add to Section 5.8.4.5: Options Controlling the OpenCL C Version:

"These options are ignored for programs created with IL."

Change one entry and add one new entry to *Table 5.17* _clGetProgramInfo parameter queries_:

[cols=",,",options="header",]
|=======================================================================
|*cl_program_info*
|*Return Type*
|*Info returned in _param_value_*

|*CL_PROGRAM_SOURCE*
|char[]
|Return the program source code specified by *clCreateProgramWithSource*. The source string returned is a concatenation of all source strings
specified to *clCreateProgramWithSource* with a null terminator. The concatenation strips any nulls in the original source strings. +
{blank}
If program is created using *clCreateProgramWithBinary,* *clCreateProgramWithBuiltinKernels,*, or *clCreateProgramWithILKHR* a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary. +
{blank}
The actual number of characters that represents the program source code including the null terminator is returned in _param_value_size_ret_.

|*CL_PROGRAM_IL_KHR*
|unsigned char[]
|Returns the program IL for programs created with *clCreateProgramWithILKHR*. +
{blank}
If program is created with *clCreateProgramWithSource*, *clCreateProgramWithBinary*, or *clCreateProgramWithBuiltinKernels*, the memory pointed to by _param_value_ will be unchanged and _param_value_size_ret_ will be set to zero.

|=======================================================================
