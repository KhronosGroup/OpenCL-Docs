// Copyright 2017-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_extended_async_copies]]
== Extended Async Copies

This section describes the *cl_khr_extended_async_copies* extension.
This extension augments built-in asynchronous copy functions to OpenCL C
to support more patterns:

1. for async copy between 2D source and 2D destination.
2. for async copy between 3D source and 3D destination.

=== General information

==== Version history

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2020-04-21 | 0.9.0     | First assigned version (provisional).
| 2021-09-06 | 0.9.1     | Elements-based proposal update.
| 2021-11-10 | 1.0.0     | First non-provisional version.
|====

[[cl_khr_extended_async_copies-additions-to-chapter-6-of-the-opencl-specification]]
=== Additions to Chapter 6 of the OpenCL C Specification

The following new built-in functions are added to the _Async Copies from Global to
Local Memory, Local to Global Memory, and Prefetch_ functions described in _section 6.12.10_
and _section 6.13.10_ of the OpenCL 1.2 and OpenCL 2.0 C specifications.

Note that *async_work_group_strided_copy* is a special case of
*async_work_group_copy_2D2D*, namely one which copies a single column to a
single line or vice versa.
For example: +
`async_work_group_strided_copy(dst, src, num_gentypes, src_stride, event)` is equal to
`async_work_group_copy_2D2D(dst, 0, src, 0, sizeof(gentype), 1, num_gentypes, src_stride, 1, event)`

These new built-in functions support arbitrary `gentype`-based buffers by
casting pointers to `void *`.

[cols="1a,1",options="header",]
|=======================================================================
|*Function* |*Description*
|[source,opencl_c]
----
event_t async_work_group_copy_2D2D(
    __local void *dst,
    size_t dst_offset,
    const __global void *src,
    size_t src_offset,
    size_t num_bytes_per_element,
    size_t num_elements_per_line,
    size_t num_lines,
    size_t src_total_line_length,
    size_t dst_total_line_length,
    event_t event)

event_t async_work_group_copy_2D2D(
    __global void *dst,
    size_t dst_offset,
    const __local void *src,
    size_t src_offset,
    size_t num_bytes_per_element,
    size_t num_elements_per_line,
    size_t num_lines,
    size_t src_total_line_length,
    size_t dst_total_line_length,
    event_t event)
----
| Perform an async copy of (_num_elements_per_line_ * _num_lines_) elements
of size _num_bytes_per_element_ from
(_src_ + (_src_offset_ * _num_bytes_per_element_)) to
(_dst_ + (_dst_offset_ * _num_bytes_per_element_)). All pointer arithmetic
is performed with implicit casting to `char*` by the implementation.
Each line contains _num_elements_per_line_ elements of size
_num_bytes_per_element_.
After each line of transfer, _src_ address is incremented by
_src_total_line_length_ elements
(i.e. _src_total_line_length_ * _num_bytes_per_element_ bytes),
_dst_ address is incremented by _dst_total_line_length_ elements
(i.e. _dst_total_line_length_ * _num_bytes_per_element_ bytes),
for the next line of transfer.

All _src_offset_, _dst_offset_, _src_total_line_length_
and _dst_total_line_length_ values are expressed in elements.

Both _src_total_line_length_ and _dst_total_line_length_ describe
the number of elements between the beginning of the current line
and the beginning of the next line.

Returns an event object that can be used by *wait_group_events* to wait
for the async copy to finish.  The _event_ argument can also be used to
associate the *async_work_group_copy_2D2D* with a previous async copy
allowing an event to be shared by multiple async copies;
otherwise _event_ should be zero.

If _event_ argument is non-zero, the event object supplied in _event_
argument will be returned.

This function does not perform any implicit synchronization of source
data such as using a *barrier* before performing the copy.

The behavior of *async_work_group_copy_2D2D* is undefined if the
source or destination addresses exceed the upper bounds of the address space
during the copy.

The behavior of *async_work_group_copy_2D2D* is also undefined if the
_src_total_line_length_ or _dst_total_line_length_ values are smaller
than _num_elements_per_line_, i.e. overlapping of lines is undefined.

The async copy is performed by all work-items in a work-group and this
built-in function must therefore be encountered by all work-items in a
work-group executing the kernel with the same argument values;
otherwise the results are undefined.

|[source,opencl_c]
----
event_t async_work_group_copy_3D3D(
    __local void *dst,
    size_t dst_offset,
    const __global void *src,
    size_t src_offset,
    size_t num_bytes_per_element,
    size_t num_elements_per_line,
    size_t num_lines,
    size_t num_planes,
    size_t src_total_line_length,
    size_t src_total_plane_area,
    size_t dst_total_line_length,
    size_t dst_total_plane_area,
    event_t event)

event_t async_work_group_copy_3D3D(
    __global void *dst,
    size_t dst_offset,
    const __local void *src,
    size_t src_offset,
    size_t num_bytes_per_element,
    size_t num_elements_per_line,
    size_t num_lines,
    size_t num_planes,
    size_t src_total_line_length,
    size_t src_total_plane_area,
    size_t dst_total_line_length,
    size_t dst_total_plane_area,
    event_t event)
----
| Perform an async copy of
((_num_elements_per_line_ * _num_lines_) * _num_planes_) elements
of size _num_bytes_per_element_ from
(_src_ + (_src_offset_ * _num_bytes_per_element_)) to
(_dst_ + (_dst_offset_ * _num_bytes_per_element_)),
arranged in _num_planes_ planes. All pointer arithmetic
is performed with implicit casting to `char*` by the implementation.
Each plane contains _num_lines_ lines.
Each line contains _num_elements_per_line_ elements.
After each line of transfer, _src_ address is incremented by
_src_total_line_length_ elements
(i.e. _src_total_line_length_ * _num_bytes_per_element_ bytes),
_dst_ address is incremented by _dst_total_line_length_ elements
(i.e. _dst_total_line_length_ * _num_bytes_per_element_ bytes),
for the next line of transfer.

All _src_offset_, _dst_offset_, _src_total_line_length_,
_dst_total_line_length_, _src_total_plane_area_ and
_dst_total_plane_area_ values are expressed in elements.

Both _src_total_line_length_ and _dst_total_line_length_ describe
the number of elements between the beginning of the current line
and the beginning of the next line.

Both _src_total_plane_area_ and _dst_total_plane_area_ describe
the number of elements between the beginning of the current plane
and the beginning of the next plane.

Returns an event object that can be used by *wait_group_events* to wait
for the async copy to finish.  The _event_ argument can also be used to
associate the *async_work_group_copy_3D3D* with a previous async copy
allowing an event to be shared by multiple async copies;
otherwise _event_ should be zero.

If _event_ argument is non-zero, the event object supplied in _event_
argument will be returned.

This function does not perform any implicit synchronization of source
data such as using a *barrier* before performing the copy.

The behavior of *async_work_group_copy_3D3D* is undefined if the
source or destination addresses exceed the upper bounds of the address space
during the copy.

The behavior of *async_work_group_copy_3D3D* is also undefined if the
_src_total_line_length_ or _dst_total_line_length_ values are smaller
than _num_elements_per_line_, i.e. overlapping of lines is undefined.

The behavior of *async_work_group_copy_3D3D* is also undefined if
_src_total_plane_area_ is smaller than (_num_lines_ * _src_total_line_length_),
or _dst_total_plane_area_ is smaller than (_num_lines_ * _dst_total_line_length_),
i.e. overlapping of planes is undefined.

The async copy is performed by all work-items in a work-group and this
built-in function must therefore be encountered by all work-items in a
work-group executing the kernel with the same argument values;
otherwise the results are undefined.

|=======================================================================
