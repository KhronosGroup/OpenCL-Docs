// Copyright 2018-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_device_uuid]]
== Unique Device Identifiers

This section describes the *cl_khr_device_uuid* extension.

This extension adds the ability to query a universally unique identifier
(UUID) for an OpenCL driver and OpenCL device.
The UUIDs returned by the query may be used to identify drivers and devices
across processes or APIs.

=== General information

==== Version history

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2020-08-27 | 1.0.0     | First assigned version.
|====

// == New API Enums
// 
// Accepted value for the _param_name_ parameter to *clGetDeviceInfo*:
// 
// [source,opencl]
// ----
// #define CL_DEVICE_UUID_KHR          0x106A
// #define CL_DRIVER_UUID_KHR          0x106B
// #define CL_DEVICE_LUID_VALID_KHR    0x106C
// #define CL_DEVICE_LUID_KHR          0x106D
// #define CL_DEVICE_NODE_MASK_KHR     0x106E
// ----
// 
// Constants describing the size of the driver and device UUIDs, and the device LUID:
// 
// [source,opencl]
// ----
// #define CL_UUID_SIZE_KHR            16
// #define CL_LUID_SIZE_KHR            8
// ----

=== Additions to Chapter 4 of the OpenCL 3.0 API Specification

Add to Table 5 - OpenCL Device Queries:

[caption="Table 5. "]
.OpenCL Device Queries
[width="100%",cols="<30%,<20%,<50%",options="header"]
|====
| *cl_device_info* | Return Type | Description
| `CL_DEVICE_UUID_KHR`
  | `cl_uchar[CL_UUID_SIZE_KHR]`
    | Returns a universally unique identifier (UUID) for the device.

      Device UUIDs must be immutable for a given device across processes, driver APIs, driver versions, and system reboots.

| `CL_DRIVER_UUID_KHR`
  | `cl_uchar[CL_UUID_SIZE_KHR]`
    | Returns a universally unique identifier (UUID) for the software driver for the device.

| `CL_DEVICE_LUID_VALID_KHR`
  | `cl_bool`
    | Returns `CL_TRUE` if the device has a valid LUID and `CL_FALSE` otherwise.

| `CL_DEVICE_LUID_KHR`
  | `cl_uchar[CL_LUID_SIZE_KHR]`
    | Returns a locally unique identifier (LUID) for the device.

      It is not an error to query `CL_DEVICE_LUID_KHR` when `CL_DEVICE_LUID_VALID_KHR` returns `CL_FALSE`, but in this case the returned LUID value is undefined.

      When `CL_DEVICE_LUID_VALID_KHR` returns `CL_TRUE`, and the OpenCL device is running on the Windows operating system, the returned LUID value can be cast to an `LUID` object and must be equal to the locally unique identifier of an `IDXGIAdapter1` object that corresponds to the OpenCL device.

| `CL_DEVICE_NODE_MASK_KHR`
  | `cl_uint`
    | Returns a node mask for the device.

      It is not an error to query `CL_DEVICE_NODE_MASK_KHR` when `CL_DEVICE_LUID_VALID_KHR` returns `CL_FALSE`, but in this case the returned node mask is undefined.

      When `CL_DEVICE_LUID_VALID_KHR` returns `CL_TRUE`, the returned node mask must contain exactly one bit.
      If the OpenCL device is running on an operating system that supports the Direct3D 12 API and the OpenCL device corresponds to an individual device in a linked device adapter, the returned node mask identifies the Direct3D 12 node corresponding to the OpenCL device.
      Otherwise, the returned node mask must be `1`.

|====

NOTE: While `CL_DEVICE_UUID_KHR` is specified to remain consistent across driver versions and system reboots, it is not intended to be usable as a serializable persistent identifier for a device.
It may change when a device is physically added to, removed from, or moved to a different connector in a system while that system is powered down.
Further, there is no reasonable way to verify with conformance testing that a given device retains the same UUID in a given system across all driver versions supported in that system.
While implementations should make every effort to report consistent device UUIDs across driver versions, applications should avoid relying on the persistence of this value for uses other than identifying compatible devices for external object sharing purposes.
