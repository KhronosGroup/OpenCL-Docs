// Copyright 2018-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_suggested_local_work_size]]
== Suggested Local Work Size Query

This extension adds the ability to query a suggested local work group size for a kernel running on a device for a specified global work size and global work offset.
The suggested local work group size will match the work group size that would be chosen if the kernel were enqueued with the specified global work size and global work offset and a `NULL` local work size.

By using the suggested local work group size query an application has greater insight into the local work group size chosen by the OpenCL implementation, and the OpenCL implementation need not re-compute the local work group size if the same kernel is enqueued multiple times with the same parameters.

=== General Information

==== Name Strings

`cl_khr_suggested_local_work_size`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2021-04-22 | 1.0.0     | Initial version.
|====

==== Dependencies

This extension is written against the OpenCL API Specification Version V3.0.6.

This extension requires OpenCL 1.0.

=== New API Functions

[source,opencl]
----
cl_int  clGetKernelSuggestedLocalWorkSizeKHR(
    cl_command_queue command_queue,
    cl_kernel kernel,
    cl_uint work_dim,
    const size_t *global_work_offset,
    const size_t *global_work_size,
    size_t *suggested_local_work_size);
----

=== Modifications to the OpenCL API Specification

==== Section 5.9 - Kernel Objects:

===== New Section 5.9.4.X - Suggested Local Work Size Query

To query a suggested local work size for a kernel object, call the function

[source,opencl]
----
cl_int  clGetKernelSuggestedLocalWorkSizeKHR(
    cl_command_queue command_queue,
    cl_kernel kernel,
    cl_uint work_dim,
    const size_t *global_work_offset,
    const size_t *global_work_size,
    size_t *suggested_local_work_size);
----

The returned suggested local work size is expected to match the local work size that would be chosen if the specified kernel object, with the same kernel arguments, were enqueued into the specified command queue with the specified global work size, specified global work offset, and with a `NULL` local work size.

* _command_queue_ specifies the command queue and device for the query.
* _kernel_ specifies the kernel object and kernel arguments for the query.
The OpenCL context associated with _kernel_ and _command_queue_ must the same.
* _work_dim_ specifies the number of work dimensions in the input global work offset and global work size, and the output suggested local work size.
* _global_work_offset_ can be used to specify an array of at least _work_dim_ global ID offset values for the query.
This is optional and may be `NULL` to indicate there is no global ID offset.
* _global_work_size_ is an array of at least _work_dim_ values describing the global work size for the query.
* _suggested_local_work_size_ is an output array of at least _work_dim_ values that will contain the result of the query.

*clGetKernelSuggestedLocalWorkSizeKHR* returns `CL_SUCCESS` if the query executed successfully.
Otherwise, it returns one of the following errors:

* `CL_INVALID_COMMAND_QUEUE` if _command_queue_ is not a valid host command queue.
* `CL_INVALID_KERNEL` if _kernel_ is not a valid kernel object.
* `CL_INVALID_CONTEXT` if the context associated with _kernel_ is not the same as the context associated with _command_queue_.
* `CL_INVALID_PROGRAM_EXECUTABLE` if there is no successfully built program executable available for _kernel_ for the device associated with _command_queue_.
* `CL_INVALID_KERNEL_ARGS` if all argument values for _kernel_ have not been set.
* `CL_MISALIGNED_SUB_BUFFER_OFFSET` if a sub-buffer object is set as an argument to _kernel_ and the offset specified when the sub-buffer object was created is not aligned to `CL_DEVICE_MEM_BASE_ADDR_ALIGN` for the device associated with _command_queue_.
* `CL_INVALID_IMAGE_SIZE` if an image object is set as an argument to _kernel_ and the image dimensions are not supported by device associated with _command_queue_.
* `CL_IMAGE_FORMAT_NOT_SUPPORTED` if an image object is set as an argument to _kernel_ and the image format is not supported by the device associated with _command_queue_.
* `CL_INVALID_OPERATION` if an SVM pointer is set as an argument to _kernel_ and the device associated with _command_queue_ does not support SVM or the required SVM capabilities for the SVM pointer.
* `CL_INVALID_WORK_DIMENSION` if _work_dim_ is not a valid value (i.e. a value between 1 and `CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS`).
* `CL_INVALID_GLOBAL_WORK_SIZE` if _global_work_size_ is NULL or if any of the values specified in _global_work_size_ are 0.
* `CL_INVALID_GLOBAL_WORK_SIZE` if any of the values specified in _global_work_size_ exceed the maximum value representable by `size_t` on the device associated with _command_queue_.
* `CL_INVALID_GLOBAL_OFFSET` if the value specified in _global_work_size_ plus the corresponding value in _global_work_offset_ for dimension exceeds the maximum value representable by `size_t` on the device associated with _command_queue_.
* `CL_INVALID_VALUE` if _suggested_local_work_size_ is NULL.
* `CL_OUT_OF_RESOURCES` if there is a failure to allocate resources required by the OpenCL implementation on the device.
* `CL_OUT_OF_HOST_RESOURCES` if there is a failure to allocate resources required by the OpenCL implementation on the host.

NOTE: These error conditions are consistent with error conditions for *clEnqueueNDRangeKernel*.
