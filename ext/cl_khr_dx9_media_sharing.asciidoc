// Copyright 2017-2019 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_dx9_media_sharing]]
== Creating OpenCL Memory Objects from DirectX 9 Media Surfaces

[[cl_khr_dx9_media_sharing-overview]]
=== Overview

This section describes the *cl_khr_dx9_media_sharing* extension.
The goal of this extension is to allow applications to use media surfaces as
OpenCL memory objects.
This allows efficient sharing of data between OpenCL and selected adapter
APIs (only DX9 for now).
If this extension is supported, an OpenCL image object can be created from a
media surface and the OpenCL API can be used to execute kernels that read
and/or write memory objects that are media surfaces.
Note that OpenCL memory objects may be created from the adapter media
surface if and only if the OpenCL context has been created from that
adapter.

[[cl_khr_dx9_media_sharing-new-procedures-and-functions]]
=== New Procedures and Functions

[source,c]
----
cl_int clGetDeviceIDsFromDX9MediaAdapterKHR(
                                    cl_platform_id platform,
                                    cl_uint num_media_adapters,
                                    cl_dx9_media_adapter_type_khr *media_adapters_type,
                                    void *media_adapters,
                                    cl_dx9_media_adapter_set_khr media_adapter_set,
                                    cl_uint num_entries,
                                    cl_device_id *devices,
                                    cl_int *num_devices)

cl_mem clCreateFromDX9MediaSurfaceKHR(cl_context context,
                                      cl_mem_flags flags,
                                      cl_dx9_media_adapter_type_khr adapter_type,
                                      void *surface_info,
                                      cl_uint plane,
                                      cl_int *errcode_ret)

cl_int clEnqueueAcquireDX9MediaSurfacesKHR(cl_command_queue command_queue,
                                           cl_uint num_objects,
                                           const cl_mem *mem_objects,
                                           cl_uint num_events_in_wait_list,
                                           const cl_event *event_wait_list,
                                           cl_event *event)

cl_int clEnqueueReleaseDX9MediaSurfacesKHR(cl_command_queue command_queue,
                                           cl_uint num_objects,
                                           const cl_mem *mem_objects,
                                           cl_uint num_events_in_wait_list,
                                           const cl_event *event_wait_list,
                                           cl_event *event)
----

[[cl_khr_dx9_media_sharing-new-tokens]]
=== New Tokens

Accepted by the _media_adapter_type_ parameter of
*clGetDeviceIDsFromDX9MediaAdapterKHR*:

----
CL_ADAPTER_D3D9_KHR
CL_ADAPTER_D3D9EX_KHR
CL_ADAPTER_DXVA_KHR
----

Accepted by the _media_adapter_set_ parameter of
*clGetDeviceIDsFromDX9MediaAdapterKHR*:

----
CL_PREFERRED_DEVICES_FOR_DX9_MEDIA_ADAPTER_KHR
CL_ALL_DEVICES_FOR_DX9_MEDIA_ADAPTER_KHR
----

Accepted as a property name in the _properties_ parameter of
*clCreateContext* and *clCreateContextFromType*:

----
CL_CONTEXT_ADAPTER_D3D9_KHR
CL_CONTEXT_ADAPTER_D3D9EX_KHR
CL_CONTEXT_ADAPTER_DXVA_KHR
----

Accepted as the property being queried in the _param_name_ parameter of
*clGetMemObjectInfo*:

----
CL_MEM_DX9_MEDIA_ADAPTER_TYPE_KHR
CL_MEM_DX9_MEDIA_SURFACE_INFO_KHR
----

Accepted as the property being queried in the _param_name_ parameter of
*clGetImageInfo*:

----
CL_IMAGE_DX9_MEDIA_PLANE_KHR
----

Returned in the _param_value_ parameter of *clGetEventInfo* when
_param_name_ is CL_EVENT_COMMAND_TYPE:

----
CL_COMMAND_ACQUIRE_DX9_MEDIA_SURFACES_KHR
CL_COMMAND_RELEASE_DX9_MEDIA_SURFACES_KHR
----

Returned by *clCreateContext* and *clCreateContextFromType* if the media
adapter specified for interoperability is not compatible with the devices
against which the context is to be created:

----
CL_INVALID_DX9_MEDIA_ADAPTER_KHR
----

Returned by *clCreateFromDX9MediaSurfaceKHR* when _adapter_type_ is set to a
media adapter and the _surface_info_ does not reference a media surface of
the required type, or if _adapter_type_ is set to a media adapter type and
_surface_info_ does not contain a valid reference to a media surface on that
adapter, by *clGetMemObjectInfo* when _param_name_ is a surface or handle
when the image was not created from an appropriate media surface, and from
*clGetImageInfo* when _param_name_ is CL IMAGE_DX9_MEDIA_PLANE KHR and image
was not created from an appropriate media surface.

----
CL_INVALID_DX9_MEDIA_SURFACE_KHR
----

Returned by *clEnqueueAcquireDX9MediaSurfacesKHR* when any of _mem_objects_
are currently acquired by OpenCL:

----
CL_DX9_MEDIA_SURFACE_ALREADY_ACQUIRED_KHR
----

Returned by *clEnqueueReleaseDX9MediaSurfacesKHR* when any of _mem_objects_
are not currently acquired by OpenCL:

----
CL_DX9_MEDIA_SURFACE_NOT_ACQUIRED_KHR
----

[[cl_khr_dx9_media_sharing-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.2 Specification

In _section 4.4_, replace the description of _properties_ under
*clCreateContext* with:

"`_properties_ specifies a list of context property names and their
corresponding values.
Each property is followed immediately by the corresponding desired value.
The list is terminated with zero.
If a property is not specified in _properties_, then its default value
(listed in _table 4.5_) is used (it is said to be specified implicitly).
If _properties_ is `NULL` or empty (points to a list whose first value is
zero), all attributes take on their default values.`"

Add the following to _table 4.5_:

[cols=",,",options="header",]
|====
| *cl_context_properties enum*
| *Property value*
| *Description*

| *CL_CONTEXT_ADAPTER_D3D9_KHR*
| IDirect3DDevice9 *
| Specifies an IDirect3DDevice9 to use for D3D9 interop.

| *CL_CONTEXT_ADAPTER_D3D9EX_KHR*
| IDirect3DDeviceEx*
| Specifies an IDirect3DDevice9Ex to use for D3D9 interop.

| *CL_CONTEXT_ADAPTER_DXVA_KHR*
| IDXVAHD_Device *
| Specifies an IDXVAHD_Device to use for DXVA interop.

|====

Add to the list of errors for *clCreateContext*:

  * CL_INVALID_ADAPTER_KHR if any of the values of the properties
    CL_CONTEXT_ADAPTER_D3D9_KHR, CL_CONTEXT_ADAPTER_D3D9EX_KHR or
    CL_CONTEXT_ADAPTER_DXVA_KHR is non-`NULL` and does not specify a valid
    media adapter with which the _cl_device_ids_ against which this context
    is to be created may interoperate.

Add to the list of errors for *clCreateContextFromType* the same new errors
described above for *clCreateContext*.

[[cl_khr_dx9_media_sharing-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.2 Specification

Add to the list of errors for *clGetMemObjectInfo*:

  * CL_INVALID_DX9_MEDIA_SURFACE_KHR if _param_name_ is
    CL_MEM_DX9_MEDIA_SURFACE_INFO_KHR and _memobj_ was not created by the
    function *clCreateFromDX9MediaSurfaceKHR* from a Direct3D9 surface.

Extend _table 5.12_ to include the following entry:

[cols=",,",options="header",]
|====
|  *cl_mem_info*
|  *Return type*
|  *Info. returned in _param_value_*

|  *CL_MEM_DX9_MEDIA_ADAPTER_TYPE_KHR*
|  *cl_dx9_media_adapter_type_khr*
| Returns the _cl_dx9_media_adapter_type_khr_ argument value specified when
  _memobj_ is created using *clCreateFromDX9MediaSurfaceKHR*.

|  *CL_MEM_DX9_MEDIA_SURFACE_INFO_KHR*
|  *cl_dx9_surface_info_khr*
| Returns the _cl_dx9_surface_info_khr_ argument value specified when
  _memobj_ is created using *clCreateFromDX9MediaSurfaceKHR*.

|====

Add to the list of errors for *clGetImageInfo*:

  * CL_INVALID_DX9_MEDIA_SURFACE_KHR if _param_name_ is
    CL_IMAGE_DX9_MEDIA_PLANE_KHR and _image_ was not created by the function
    *clCreateFromDX9MediaSurfaceKHR*.

Extend _table 5.9_ to include the following entry.

[cols=",,",options="header",]
|====
| *cl_image_info*
| *Return type*
| *Info. returned in _param_value_*

| *CL_IMAGE_DX9_MEDIA_PLANE_KHR*
| *cl_uint*
| Returns the _plane_ argument value specified when _memobj_ is created
  using *clCreateFromDX9MediaSurfaceKHR*.

|====

Add to _table 5.22_ in the *Info returned in param_value* column for
_cl_event_info_ = CL_EVENT_COMMAND_TYPE:

----
CL_COMMAND_ACQUIRE_DX9_MEDIA_SURFACES_KHR
CL_COMMAND_RELEASE_DX9_MEDIA_SURFACES_KHR
----

[[cl_khr_dx9_media_sharing-sharing-media-surfaces-with-opencl]]
=== Sharing Media Surfaces with OpenCL

This section discusses OpenCL functions that allow applications to use media
surfaces as OpenCL memory objects.
This allows efficient sharing of data between OpenCL and media surface APIs.
The OpenCL API may be used to execute kernels that read and/or write memory
objects that are also media surfaces.
An OpenCL image object may be created from a media surface.
OpenCL memory objects may be created from media surfaces if and only if the
OpenCL context has been created from a media adapter.

[[cl_khr_dx9_media_sharing-querying-opencl-devices-corresponding-to-media-adapters]]
==== Querying OpenCL Devices corresponding to Media Adapters

Media adapters are an abstraction associated with devices that provide media
capabilities.

The function
indexterm:[clGetDeviceIDsFromDX9MediaAdapterKHR]
[source,c]
----
cl_int clGetDeviceIDsFromDX9MediaAdapterKHR(
                                    cl_platform_id platform,
                                    cl_uint num_media_adapters,
                                    cl_dx9_media_adapter_type_khr *media_adapters_type,
                                    void *media_adapters,
                                    cl_dx9_media_adapter_set_khr media_adapter_set,
                                    cl_uint num_entries,
                                    cl_device_id *devices,
                                    cl_int *num_devices)
----

queries a media adapter for any associated OpenCL devices.
Adapters with associated OpenCL devices can enable media surface sharing
between the two.

_platform_ refers to the platform ID returned by *clGetPlatformIDs*.

_num_media_adapters_ specifies the number of media adapters.

_media_adapters_type_ is an array of _num_media_adapters_ entries.
Each entry specifies the type of media adapter and must be one of the values
described in the table below.

[[cl_khr_dx9_media_sharing-media-adapter-types]]
._cl_dx9_media_adapter_type_khr values_
[cols=",",options="header",]
|====
| *cl_dx9_media_adapter_type_khr*
| *Type of media adapters*

| *CL_ADAPTER_D3D9_KHR*
| IDirect3DDevice9 *

| *CL_ADAPTER_D3D9EX_KHR*
| IDirect3DDevice9Ex *

| *CL_ADAPTER_DXVA_KHR*
| IDXVAHD_Device *

|====

[[cl_khr_dx9_media_sharing-media-adapter-sets]]
._cl_dx9_media_adapter_set_khr values_
[cols=",",options="header",]
|====
| *cl_dx9_media_adapter_set_khr*
| *Description*
| *CL_PREFERRED_DEVICES_FOR_DX9_MEDIA_ADAPTER_KHR*
| The preferred OpenCL devices associated with the media adapter.

| *CL_ALL_DEVICES_FOR_MEDIA_DX9_ADAPTER_KHR*
| All OpenCL devices that may interoperate with the media adapter
|====

_media_adapters_ is an array of _num_media_adapters_ entries.
Each entry specifies the actual adapter whose type is specified by
_media_adapter_type_.
The _media_adapters_ must be one of the types described in the table
<<cl_khr_dx9_media_sharing-media-adapter-types,_cl_dx9_media_adapter_type_khr
values_>>.
_media_adapter_set_ specifies the set of adapters to return and must be one
of the values described in the table
<<[[cl_khr_dx9_media_sharing-media-adapter-sets,_cl_dx9_media_adapter_set_khr
values_>>.

_num_entries_ is the number of cl_device_id entries that can be added to
_devices_.
If _devices_ is not `NULL`, the _num_entries_ must be greater than zero.

_devices_ returns a list of OpenCL devices found that support the list of
media adapters specified.
The cl_device_id values returned in _devices_ can be used to identify a
specific OpenCL device.
If _devices_ argument is `NULL`, this argument is ignored.
The number of OpenCL devices returned is the minimum of the value specified
by _num_entries_ or the number of OpenCL devices whose type matches
_device_type_.

_num_devices_ returns the number of OpenCL devices.
If _num_devices_ is `NULL`, this argument is ignored.

*clGetDeviceIDsFromDX9MediaAdapterKHR* returns CL_SUCCESS if the function is
executed successfully.
Otherwise, it returns one of the following errors:

  * CL_INVALID_PLATFORM if _platform_ is not a valid platform.
  * CL_INVALID_VALUE if _num_media_adapters_ is zero or if
    _media_adapters_type_ is `NULL` or if _media_adapters_ is `NULL`.
  * CL_INVALID_VALUE if any of the entries in _media_adapters_type_ or
    _media_adapters_ is not a valid value.
  * CL_INVALID_VALUE if _media_adapter_set_ is not a valid value.
  * CL_INVALID_VALUE if _num_entries_ is equal to zero and _devices_ is not
    `NULL` or if both _num_devices_ and _devices_ are `NULL`.
  * CL_DEVICE_NOT_FOUND if no OpenCL devices that correspond to adapters
    specified in _media_adapters_ and _media_adapters_type_ were found.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

[[cl_khr_dx9_media_sharing-creating-media-resources-as-opencl-image-objects]]
==== Creating Media Resources as OpenCL Image Objects

The function
indexterm:[clCreateFromDX9MediaSurfaceKHR]
[source,c]
----
cl_mem clCreateFromDX9MediaSurfaceKHR(cl_context context,
                                      cl_mem_flags flags,
                                      cl_dx9_media_adapter_type_khr adapter_type,
                                      void *surface_info,
                                      cl_uint plane,
                                      cl_int *errcode_ret)
----

creates an OpenCL image object from a media surface.

_context_ is a valid OpenCL context created from a media adapter.

flags is a bit-field that is used to specify usage information.
Refer to _table 5.3_ for a description of flags.
Only CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and CL_MEM_READ_WRITE values
specified in _table 5.3_ can be used.

_adapter_type_ is a value from enumeration of supported adapters described
in the table
<<cl_khr_dx9_media_sharing-media-adapter-types,_cl_dx9_media_adapter_type_khr
values_>>.
The type of _surface_info_ is determined by the adapter type.
The implementation does not need to support all adapter types.
This approach provides flexibility to support additional adapter types in
the future.
Supported adapter types are CL_ADAPTER_D3D9_KHR, CL_ADAPTER_D3D9EX_KHR and
CL_ADAPTER_DXVA_KHR.

If _adapter_type_ is CL_ADAPTER_D3D9_KHR, CL_ADAPTER_D3D9EX_KHR and
CL_ADAPTER_DXVA_KHR, the _surface_info_ points to the following structure:

[source,c]
----
typedef struct _cl_dx9_surface_info_khr
{
    IDirect3DSurface9 *resource;
    HANDLE shared_handle;
} cl_dx9_surface_info_khr;
----

For DX9 surfaces, we need both the handle to the resource and the resource
itself to have a sufficient amount of information to eliminate a copy of the
surface for sharing in cases where this is possible.
Elimination of the copy is driver dependent.
_shared_handle_ may be `NULL` and this may result in sub-optimal
performance.

_surface_info_ is a pointer to one of the structures defined in the
_adapter_type_ description above passed in as a void *.

_plane_ is the plane of resource to share for planar surface formats.
For planar formats, we use the plane parameter to obtain a handle to thie
specific plane (Y, U or V for example).
For non-planar formats used by media, _plane_ must be 0.

_errcode_ret_ will return an appropriate error code.
If _errcode_ret_ is `NULL`, no error code is returned.

*clCreateFromDX9MediaSurfaceKHR* returns a valid non-zero 2D image object
and _errcode_ret_ is set to CL_SUCCESS if the 2D image object is created
successfully.
Otherwise it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context.
  * CL_INVALID_VALUE if values specified in _flags_ are not valid or if
    _plane_ is not a valid plane of _resource_ specified in _surface_info_.
  * CL_INVALID_DX9_MEDIA_SURFACE_KHR if _resource_ specified in
    _surface_info_ is not a valid resource or is not associated with
    _adapter_type_ (e.g., _adapter_type_ is set to CL_ADAPTER_D3D9_KHR and
    _resource_ is not a Direct3D 9 surface created in D3DPOOL_DEFAULT).
  * CL_INVALID_DX9_MEDIA_SURFACE_KHR if _shared_handle_ specified in
    _surface_info_ is not `NULL` or a valid handle value.
  * CL_INVALID_IMAGE_FORMAT_DESCRIPTOR if the texture format of _resource_
    is not listed in <<cl_khr_dx9_media_sharing-fourcc-image-formats,_YUV
    FourCC codes and corresponding OpenCL image format_>> or
    <<cl_khr_dx9_media_sharing-d3d-image-formats,_Direct3D formats and
    corresponding OpenCL image formats_>>.
  * CL_INVALID_OPERATION if there are no devices in _context_ that support
    _adapter_type_.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The width and height of the returned OpenCL 2D image object are determined
by the width and height of the plane of resource.
The channel type and order of the returned image object is determined by the
format and plane of resource and are described in the table
<<cl_khr_dx9_media_sharing-fourcc-image-formats,_YUV FourCC codes and
corresponding OpenCL image format_>> or
<<cl_khr_dx9_media_sharing-d3d-image-formats,_Direct3D formats and
corresponding OpenCL image formats_>>.

This call will increment the internal media surface count on _resource_.
The internal media surface reference count on _resource_ will be decremented
when the OpenCL reference count on the returned OpenCL memory object drops
to zero.

[[cl_khr_dx9_media_sharing-querying-media-surface-properties-of-memory-objects-created-from-media-surfaces]]
==== Querying Media Surface Properties of Memory Objects created from Media Surfaces

Properties of media surface objects may be queried using
*clGetMemObjectInfo* and *clGetImageInfo* with _param_name_
CL_MEM_DX9_MEDIA_ADAPTER_TYPE_KHR, CL_MEM_DX9_MEDIA_SURFACE_INFO_KHR and
CL_IMAGE_DX9_MEDIA_PLANE_KHR as described in _sections 5.4.3_ and _5.3.6_.

[[cl_khr_dx9_media_sharing-sharing-memory-objects-created-from-media-surfaces-between-a-media-adapter-and-opencl]]
==== Sharing Memory Objects created from Media Surfaces between a Media Adapter and OpenCL

The function
indexterm:[clEnqueueAcquireDX9MediaSurfacesKHR]
[source,c]
----
cl_int clEnqueueAcquireDX9MediaSurfacesKHR(cl_command_queue command_queue,
                                           cl_uint num_objects,
                                           const cl_mem *mem_objects,
                                           cl_uint num_events_in_wait_list,
                                           const cl_event *event_wait_list,
                                           cl_event *event)
----

is used to acquire OpenCL memory objects that have been created from a media
surface.
The media surfaces are acquired by the OpenCL context associated with
_command_queue_ and can therefore be used by all command-queues associated
with the OpenCL context.

OpenCL memory objects created from media surfaces must be acquired before
they can be used by any OpenCL commands queued to a command-queue.
If an OpenCL memory object created from a media surface is used while it is
not currently acquired by OpenCL, the call attempting to use that OpenCL
memory object will return CL_DX9_MEDIA_SURFACE_NOT_ACQUIRED_KHR.

If CL_CONTEXT_INTEROP_USER_SYNC is not specified as CL_TRUE during context
creation, *clEnqueueAcquireDX9MediaSurfacesKHR* provides the synchronization
guarantee that any media adapter API calls involving the interop device(s)
used in the OpenCL context made before *clEnqueueAcquireDX9MediaSurfacesKHR*
is called will complete executing before _event_ reports completion and
before the execution of any subsequent OpenCL work issued in _command_queue_
begins.
If the context was created with properties specifying
CL_CONTEXT_INTEROP_USER_SYNC as CL_TRUE, the user is responsible for
guaranteeing that any media adapter API calls involving the interop
device(s) used in the OpenCL context made before
*clEnqueueAcquireDX9MediaSurfacesKHR* is called have completed before
calling *clEnqueueAcquireDX9MediaSurfacesKHR* *.*

_command_queue_ is a valid command-queue.

_num_objects_ is the number of memory objects to be acquired in
_mem_objects_.

_mem_objects_ is a pointer to a list of OpenCL memory objects that were
created from media surfaces.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this particular command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The events specified in _event_wait_list_ act as synchronization points.

_event_ returns an event object that identifies this particular command and
can be used to query or queue a wait for this particular command to
complete.
_event_ can be `NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.
If the _event_wait_list_ and the _event_ arguments are not `NULL`, the
_event_ argument should not refer to an element of the _event_wait_list_
array.

*clEnqueueAcquireDX9MediaSurfacesKHR* returns CL_SUCCESS if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` then the function does
nothing and returns CL_SUCCESS.
Otherwise it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects or if memory objects in _mem_objects_ have not
    been created from media surfaces.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_CONTEXT if context associated with _command_queue_ was not
    created from a device that can share the media surface referenced by
    _mem_objects_.
  * CL_DX9_MEDIA_SURFACE_ALREADY_ACQUIRED_KHR if memory objects in
    _mem_objects_ have previously been acquired using
    *clEnqueueAcquireDX9MediaSurfacesKHR* but have not been released using
    *clEnqueueReleaseDX9MediaSurfacesKHR*.
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The function
indexterm:[clEnqueueReleaseDX9MediaSurfacesKHR]
[source,c]
----
cl_int clEnqueueReleaseDX9MediaSurfacesKHR(cl_command_queue command_queue,
                                           cl_uint num_objects,
                                           const cl_mem *mem_objects,
                                           cl_uint num_events_in_wait_list,
                                           const cl_event *event_wait_list,
                                           cl_event *event)
----

is used to release OpenCL memory objects that have been created from media
surfaces.
The media surfaces are released by the OpenCL context associated with
_command_queue_.

OpenCL memory objects created from media surfaces which have been acquired
by OpenCL must be released by OpenCL before they may be accessed by the
media adapter API.
Accessing a media surface while its corresponding OpenCL memory object is
acquired is in error and will result in undefined behavior, including but
not limited to possible OpenCL errors, data corruption, and program
termination.

If CL_CONTEXT_INTEROP_USER_SYNC is not specified as CL_TRUE during context
creation, *clEnqueueReleaseDX9MediaSurfacesKHR* provides the synchronization
guarantee that any calls to media adapter APIs involving the interop
device(s) used in the OpenCL context made after the call to
*clEnqueueReleaseDX9MediaSurfacesKHR* will not start executing until after
all events in _event_wait_list_ are complete and all work already submitted
to _command_queue_ completes execution.
If the context was created with properties specifying
CL_CONTEXT_INTEROP_USER_SYNC as CL_TRUE, the user is responsible for
guaranteeing that any media adapter API calls involving the interop
device(s) used in the OpenCL context made after
*clEnqueueReleaseDX9MediaSurfacesKHR* will not start executing until after
event returned by *clEnqueueReleaseDX9MediaSurfacesKHR* reports completion.

_num_objects_ is the number of memory objects to be released in
_mem_objects_.

_mem_objects_ is a pointer to a list of OpenCL memory objects that were
created from media surfaces.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this particular command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The event specified by _event_ returns an event object that identifies this
particular command and can be used to query or queue a wait for this
particular command to complete.
_event_ can be `NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.
If the _event_wait_list_ and the _event_ arguments are not `NULL`, the
_event_ argument should not refer to an element of the _event_wait_list_
array.

*clEnqueueReleaseDX9MediaSurfaceKHR* returns CL_SUCCESS if the function is
executed successfully.
If _num_objects_ is 0 and <__mem_objects__> is `NULL` the function does
nothing and returns CL_SUCCESS.
Otherwise it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects or if memory objects in _mem_objects_ have not
    been created from valid media surfaces.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_CONTEXT if context associated with _command_queue_ was not
    created from a media object.
  * CL_DX9_MEDIA_SURFACE_NOT_ACQUIRED_KHR if memory objects in _mem_objects_
    have not previously been acquired using
    *clEnqueueAcquireDX9MediaSurfacesKHR*, or have been released using
    *clEnqueueReleaseDX9MediaSurfacesKHR* since the last time that they were
    acquired.
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    __num_events_in_wait_list__> is 0, or if event objects in
    _event_wait_list_ are not valid events.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

[[cl_khr_dx9_media_sharing-surface-formats-for-media-surface-sharing]]
==== Surface formats for Media Surface Sharing

This section includes the D3D surface formats that are supported when the
adapter type is one of the Direct 3D lineage .
Using a D3D surface format not listed here is an error.
To extend the use of this extension to support media adapters beyond
DirectX9 tables similar to the ones in this section will need to be defined
for the surface formats supported by the new media adapter.
All implementations that support this extension are required to support the
NV12 surface format, the other surface formats supported are the same
surface formats that the adapter you are sharing with supports as long as
they are listed in the table
<<cl_khr_dx9_media_sharing-fourcc-image-formats,_YUV FourCC codes and
corresponding OpenCL image format_>> or in the table
<<cl_khr_dx9_media_sharing-d3d-image-formats,_Direct3D formats and
corresponding OpenCL image formats_>>.

[[cl_khr_dx9_media_sharing-fourcc-image-formats]]
._YUV FourCC codes and corresponding OpenCL image format_
[cols=",",options="header",]
|====
| *FOUR CC code*
| *CL image format*

*(channel order, channel data type)*

| FOURCC('N','V','1','2'), Plane 0 | CL_R, CL_UNORM_INT8
| FOURCC('N','V','1','2'), Plane 1 | CL_RG, CL_UNORM_INT8
| FOURCC('Y','V','1','2'), Plane 0 | CL_R, CL_UNORM_INT8
| FOURCC('Y','V','1','2'), Plane 1 | CL_R, CL_UNORM_INT8
| FOURCC('Y','V','1','2'), Plane 2 | CL_R, CL_UNORM_INT8
|====

In the table <<cl_khr_dx9_media_sharing-fourcc-image-formats,_YUV FourCC
codes and corresponding OpenCL image format_>> above, NV12 Plane 0
corresponds to the luminance (Y) channel and Plane 1 corresponds to the UV
channels.
The YV12 Plane 0 corresponds to the Y channel, Plane 1 corresponds to the V
channel and Plane 2 corresponds to the U channel.
Note that the YUV formats map to CL_R and CL_RG but do not perform any YUV
to RGB conversion and vice-versa.

[[cl_khr_dx9_media_sharing-d3d-image-formats]]
._Direct3D formats and corresponding OpenCL image formats_
[cols=",",options="header",]
|====
| *D3D format*
| *CL image format* +
*(channel order, channel data type)*

| D3DFMT_R32F          | CL_R, CL_FLOAT
| D3DFMT_R16F          | CL_R, CL_HALF_FLOAT
| D3DFMT_L16           | CL_R, CL_UNORM_INT16
| D3DFMT_A8            | CL_A, CL_UNORM_INT8
| D3DFMT_L8            | CL_R, CL_UNORM_INT8
|                      |
| D3DFMT_G32R32F       | CL_RG, CL_FLOAT
| D3DFMT_G16R16F       | CL_RG, CL_HALF_FLOAT
| D3DFMT_G16R16        | CL_RG, CL_UNORM_INT16
| D3DFMT_A8L8          | CL_RG, CL_UNORM_INT8
|                      |
| D3DFMT_A32B32G32R32F | CL_RGBA, CL_FLOAT
| D3DFMT_A16B16G16R16F | CL_RGBA, CL_HALF_FLOAT
| D3DFMT_A16B16G16R16  | CL_RGBA, CL_UNORM_INT16
| D3DFMT_A8B8G8R8      | CL_RGBA, CL_UNORM_INT8
| D3DFMT_X8B8G8R8      | CL_RGBA, CL_UNORM_INT8
| D3DFMT_A8R8G8B8      | CL_BGRA, CL_UNORM_INT8
| D3DFMT_X8R8G8B8      | CL_BGRA, CL_UNORM_INT8
|====

Note: The D3D9 format names in the table above seem to imply that the
order of the color channels are switched relative to OpenCL but this is
not the case.
For example, the layout of channels for each pixel for D3DFMT_A32FB32FG32FR32F
is the same as CL_RGBA, CL_FLOAT.