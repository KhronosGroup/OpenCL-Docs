// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_gl_sharing__memobjs]]
== Creating OpenCL Memory Objects from OpenGL Objects

This section describes OpenCL functions that allow applications to use
OpenGL buffer, texture and renderbuffer objects as OpenCL memory objects.
This allows efficient sharing of data between OpenCL and OpenGL.
The OpenCL API may be used to execute kernels that read and/or write memory
objects that are also OpenGL objects.

An OpenCL image object may be created from an OpenGL texture or renderbuffer
object.
An OpenCL buffer object may be created from an OpenGL buffer object.

OpenCL memory objects may be created from OpenGL objects if and only if the
OpenCL context has been created from an OpenGL share group object or
context.
OpenGL share groups and contexts are created using platform specific APIs
such as EGL, CGL, WGL, and GLX.
On MacOS X, an OpenCL context may be created from an OpenGL share group
object using the OpenCL platform extension *cl_apple_gl_sharing*.
On other platforms including Microsoft Windows, Linux/Unix, and others, an
OpenCL context may be created from an OpenGL context using the extension
*cl_khr_gl_sharing*.
Refer to the platform documentation for your OpenCL implementation, or visit
the Khronos Registry at http://www.khronos.org/registry/cl/ for more
information.

Any supported OpenGL object defined within the GL share group object, or the
share group associated with the GL context from which the OpenCL context is
created, may be shared, with the exception of the default OpenGL objects
(i.e. objects named zero), which may not be shared.

[[cl_khr_gl_sharing__memobjs-lifetime-of-shared-objects]]
=== Lifetime of Shared Objects

An OpenCL memory object created from an OpenGL object (hereinafter referred
to as a "`shared CL/GL object`") remains valid as long as the corresponding
GL object has not been deleted.
If the GL object is deleted through the GL API (e.g. *glDeleteBuffers*,
*glDeleteTextures,* or *glDeleteRenderbuffers*), subsequent use of the CL
buffer or image object will result in undefined behavior, including but not
limited to possible CL errors and data corruption, but may not result in
program termination.

The CL context and corresponding command-queues are dependent on the
existence of the GL share group object, or the share group associated with
the GL context from which the CL context is created.
If the GL share group object or all GL contexts in the share group are
destroyed, any use of the CL context or command-queue(s) will result in
undefined behavior, which may include program termination.
Applications should destroy the CL command-queue(s) and CL context before
destroying the corresponding GL share group or contexts

[[cl_khr_gl_sharing__memobjs-cl-buffer-objects-from-gl-buffer-objects]]
=== OpenCL Buffer Objects from OpenGL Buffer Objects

The function
indexterm:[clCreateFromGLBuffer]
[source,c]
----
cl_mem clCreateFromGLBuffer(cl_context context,
                            cl_mem_flags flags,
                            GLuint bufobj,
                            cl_int *errcode_ret)
----

creates an OpenCL buffer object from an OpenGL buffer object.

_context_ is a valid OpenCL context created from an OpenGL context.

_flags_ is a bit-field that is used to specify usage information.
Refer to _table 5.3_ for a description of _flags_.
Only CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and CL_MEM_READ_WRITE values
specified in _table 5.3_ can be used.

_bufobj_ is the name of a GL buffer object.
The data store of the GL buffer object must have have been previously
created by calling *glBufferData*, although its contents need not be
initialized.
The size of the data store will be used to determine the size of the CL
buffer object.

_errcode_ret_ will return an appropriate error code as described below.
If _errcode_ret_ is `NULL`, no error code is returned.

*clCreateFromGLBuffer* returns a valid non-zero OpenCL buffer object and
_errcode_ret_ is set to CL_SUCCESS if the buffer object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context or was not
    created from a GL context.
  * CL_INVALID_VALUE if values specified in _flags_ are not valid.
  * CL_INVALID_GL_OBJECT if _bufobj_ is not a GL buffer object or is a GL
    buffer object but does not have an existing data store or the size of
    the buffer is 0.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The size of the GL buffer object data store at the time
*clCreateFromGLBuffer* is called will be used as the size of buffer object
returned by *clCreateFromGLBuffer*.
If the state of a GL buffer object is modified through the GL API (e.g.
*glBufferData*) while there exists a corresponding CL buffer object,
subsequent use of the CL buffer object will result in undefined behavior.

The *clRetainMemObject* and *clReleaseMemObject* functions can be used to
retain and release the buffer object.

The CL buffer object created using clCreateFromGLBuffer can also be used to
create a CL 1D image buffer object.

[[cl_khr_gl_sharing__memobjs-cl-image-objects-from-gl-textures]]
=== OpenCL Image Objects from OpenGL Textures

The function
indexterm:[clCreateFromGLTexture]
[source,c]
----
cl_mem clCreateFromGLTexture(cl_context context,
                             cl_mem_flags flags,
                             GLenum texture_target,
                             GLint miplevel,
                             GLuint texture,
                             cl_int *errcode_ret)
----

creates the following:

  * an OpenCL 2D image object from an OpenGL 2D texture object or a single
    face of an OpenGL cubemap texture object,
  * an OpenCL 2D image array object from an OpenGL 2D texture array object,
  * an OpenCL 1D image object from an OpenGL 1D texture object,
  * an OpenCL 1D image buffer object from an OpenGL texture buffer object,
  * an OpenCL 1D image array object from an OpenGL 1D texture array object,
  * an OpenCL 3D image object from an OpenGL 3D texture object.

_context_ is a valid OpenCL context created from an OpenGL context.

_flags_ is a bit-field that is used to specify usage information.
Refer to _table 5.3_ for a description of _flags_.
Only CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and CL_MEM_READ_WRITE values
specified in _table 5.3_ may be used.

_texture_target_ must be one of GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY,
GL_TEXTURE_BUFFER, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D,
GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or
GL_TEXTURE_RECTANGLE (Note: GL_TEXTURE_RECTANGLE requires OpenGL 3.1.
Alternatively, GL_TEXTURE_RECTANGLE_ARB may be specified if the OpenGL
extension *GL_ARB_texture_rectangle* is supported.).
_texture_target_ is used only to define the image type of _texture_.
No reference to a bound GL texture object is made or implied by this
parameter.

_miplevel_ is the mipmap level to be used.
If _texture_target_ is GL_TEXTURE_BUFFER, _miplevel_ must be 0.
Note: Implementations may return CL_INVALID_OPERATION for miplevel
values > 0.

_texture_ is the name of a GL 1D, 2D, 3D, 1D array, 2D array, cubemap,
rectangle or buffer texture object.
The texture object must be a complete texture as per OpenGL rules on texture
completeness.
The _texture_ format and dimensions defined by OpenGL for the specified
_miplevel_ of the texture will be used to create the OpenCL image memory
object.
Only GL texture objects with an internal format that maps to appropriate
image channel order and data type specified in _tables 5.5_ and _5.6_ may be
used to create the OpenCL image memory object.

_errcode_ret_ will return an appropriate error code as described below.
If _errcode_ret_ is `NULL`, no error code is returned.

*clCreateFromGLTexture* returns a valid non-zero OpenCL image object and
_errcode_ret_ is set to CL_SUCCESS if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context or was not
    created from a GL context.
  * CL_INVALID_VALUE if values specified in _flags_ are not valid or if
    value specified in _texture_target_ is not one of the values specified
    in the description of _texture_target_.
  * CL_INVALID_MIP_LEVEL if _miplevel_ is less than the value of
    _level~base~_ (for OpenGL implementations) or zero (for OpenGL ES
    implementations); or greater than the value of _q_ (for both OpenGL and
    OpenGL ES).
    _level~base~_ and _q_ are defined for the texture in _section 3.8.10_
    (Texture Completeness) of the OpenGL 2.1 specification and _section
    3.7.10_ of the OpenGL ES 2.0.
  * CL_INVALID_MIP_LEVEL if _miplevel_ is greather than zero and the OpenGL
    implementation does not support creating from non-zero mipmap levels.
  * CL_INVALID_GL_OBJECT if _texture_ is not a GL texture object whose type
    matches _texture_target_, if the specified _miplevel_ of _texture_ is
    not defined, or if the width or height of the specified _miplevel_ is
    zero or if the GL texture object is incomplete.
  * CL_INVALID_IMAGE_FORMAT_DESCRIPTOR if the OpenGL texture internal format
    does not map to a supported OpenCL image format.
  * CL_INVALID_OPERATION if _texture_ is a GL texture object created with a
    border width value greater than zero.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

If the state of a GL texture object is modified through the GL API (e.g.
*glTexImage2D*, *glTexImage3D* or the values of the texture parameters
GL_TEXTURE_BASE_LEVEL or GL_TEXTURE_MAX_LEVEL are modified) while there
exists a corresponding CL image object, subsequent use of the CL image
object will result in undefined behavior.

The *clRetainMemObject* and *clReleaseMemObject* functions can be used to
retain and release the image objects.

[[cl_khr_gl_sharing__memobjs-list-of-opengl-and-corresponding-opencl-image-formats]]
==== List of OpenGL and corresponding OpenCL Image Formats

The table below describes the list of OpenGL texture internal formats and
the corresponding OpenCL image formats.
If a OpenGL texture object with an internal format from the table below is
successfully created by OpenGL, then there is guaranteed to be a mapping to
one of the corresponding OpenCL image format(s) in that table.
Texture objects created with other OpenGL internal formats may (but are not
guaranteed to) have a mapping to an OpenCL image format; if such mappings
exist, they are guaranteed to preserve all color components, data types, and
at least the number of bits/component actually allocated by OpenGL for that
format.

[[cl_khr_gl_sharing__memobjs-mapping-of-image-formats]]
._OpenGL internal formats and corresponding OpenCL internal formats_
[cols=",",options="header",]
|====
| *GL internal format*
| *CL image format*

  *(channel order, channel data type)*

| GL_RGBA8
| CL_RGBA, CL_UNORM_INT8 or

CL_BGRA, CL_UNORM_INT8

| GL_SRGB8_ALPHA8
| CL_sRGBA, CL_UNORM_INT8

| GL_RGBA, GL_UNSIGNED_INT_8_8_8_8_REV
| CL_RGBA, CL_UNORM_INT8

| GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV
| CL_BGRA, CL_UNORM_INT8

|
|

| GL_RGBA8I, GL_RGBA8I_EXT
| CL_RGBA, CL_SIGNED_INT8

| GL_RGBA16I, GL_RGBA16I_EXT
| CL_RGBA, CL_SIGNED_INT16

| GL_RGBA32I, GL_RGBA32I_EXT
| CL_RGBA, CL_SIGNED_INT32

|
|

| GL_RGBA8UI, GL_RGBA8UI_EXT
| CL_RGBA, CL_UNSIGNED_INT8

| GL_RGBA16UI, GL_RGBA16UI_EXT
| CL_RGBA, CL_UNSIGNED_INT16

| GL_RGBA32UI, GL_RGBA32UI_EXT
| CL_RGBA, CL_UNSIGNED_INT32

|
|

| GL_RGBA8_SNORM
| CL_RGBA, CL_SNORM_INT8

| GL_RGBA16
| CL_RGBA, CL_UNORM_INT16

| GL_RGBA16_SNORM
| CL_RGBA, CL_SNORM_INT16

| GL_RGBA16F, GL_RGBA16F_ARB
| CL_RGBA, CL_HALF_FLOAT

| GL_RGBA32F, GL_RGBA32F_ARB
| CL_RGBA, CL_FLOAT

|
|

| GL_R8
| CL_R, CL_UNORM_INT8

| GL_R8_SNORM
| CL_R, CL_SNORM_INT8

| GL_R16
| CL_R, CL_UNORM_INT16

| GL_R16_SNORM
| CL_R, CL_SNORM_INT16

| GL_R16F
| CL_R, CL_HALF_FLOAT

| GL_R32F
| CL_R, CL_FLOAT

|
|

| GL_R8I
| CL_R, CL_SIGNED_INT8

| GL_R16I
| CL_R, CL_SIGNED_INT16

| GL_R32I
| CL_R, CL_SIGNED_INT32

| GL_R8UI
| CL_R, CL_UNSIGNED_INT8

| GL_R16UI
| CL_R, CL_UNSIGNED_INT16

| GL_R32UI
| CL_R, CL_UNSIGNED_INT32

|
|

| GL_RG8
| CL_RG, CL_UNORM_INT8

| GL_RG8_SNORM
| CL_RG, CL_SNORM_INT8

| GL_RG16
| CL_RG, CL_UNORM_INT16

| GL_RG16_SNORM
| CL_RG, CL_SNORM_INT16

| GL_RG16F
| CL_RG, CL_HALF_FLOAT

| GL_RG32F
| CL_RG, CL_FLOAT

|
|

| GL_RG8I
| CL_RG, CL_SIGNED_INT8

| GL_RG16I
| CL_RG, CL_SIGNED_INT16

| GL_RG32I
| CL_RG, CL_SIGNED_INT32

| GL_RG8UI
| CL_RG, CL_UNSIGNED_INT8

| GL_RG16UI
| CL_RG, CL_UNSIGNED_INT16

| GL_RG32UI
| CL_RG, CL_UNSIGNED_INT32
|====

[[cl_khr_gl_sharing__memobjs-cl-image-objects-from-gl-renderbuffers]]
=== OpenCL Image Objects from OpenGL Renderbuffers

The function
indexterm:[clCreateFromGLRenderbuffer]
[source,c]
----
cl_mem clCreateFromGLRenderbuffer(cl_context context,
                                  cl_mem_flags flags,
                                  GLuint renderbuffer,
                                  cl_int *errcode_ret)
----

creates an OpenCL 2D image object from an OpenGL renderbuffer object.

_context_ is a valid OpenCL context created from an OpenGL context.

_flags_ is a bit-field that is used to specify usage information.
Refer to _table 5.3_ for a description of _flags_.
Only CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and CL_MEM_READ_WRITE values
specified in _table 5.3_ can be used.

_renderbuffer_ is the name of a GL renderbuffer object.
The renderbuffer storage must be specified before the image object can be
created.
The _renderbuffer_ format and dimensions defined by OpenGL will be used to
create the 2D image object.
Only GL renderbuffers with internal formats that maps to appropriate image
channel order and data type specified in _tables 5.5_ and _5.6_ can be used
to create the 2D image object.

_errcode_ret_ will return an appropriate error code as described below.
If _errcode_ret_ is `NULL`, no error code is returned.

*clCreateFromGLRenderbuffer* returns a valid non-zero OpenCL image object
and _errcode_ret_ is set to CL_SUCCESS if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context or was not
    created from a GL context.
  * CL_INVALID_VALUE if values specified in _flags_ are not valid.
  * CL_INVALID_GL_OBJECT if _renderbuffer_ is not a GL renderbuffer object
    or if the width or height of _renderbuffer_ is zero.
  * CL_INVALID_IMAGE_FORMAT_DESCRIPTOR if the OpenGL renderbuffer internal
    format does not map to a supported OpenCL image format.
  * CL_INVALID_OPERATION if _renderbuffer_ is a multi-sample GL renderbuffer
    object.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

If the state of a GL renderbuffer object is modified through the GL API
(i.e. changes to the dimensions or format used to represent pixels of the GL
renderbuffer using appropriate GL API calls such as *glRenderbufferStorage*)
while there exists a corresponding CL image object, subsequent use of the CL
image object will result in undefined behavior.

The *clRetainMemObject* and *clReleaseMemObject* functions can be used to
retain and release the image objects.

The table <<cl_khr_gl_sharing__memobjs-mapping-of-image-formats,_OpenGL
internal formats and corresponding OpenCL internal formats_>> describes the
list of OpenGL renderbuffer internal formats and the corresponding OpenCL
image formats.
If an OpenGL renderbuffer object with an internal format from the table is
successfully created by OpenGL, then there is guaranteed to be a mapping to
one of the corresponding OpenCL image format(s) in that table.
Renderbuffer objects created with other OpenGL internal formats may (but are
not guaranteed to) have a mapping to an OpenCL image format; if such
mappings exist, they are guaranteed to preserve all color components, data
types, and at least the number of bits/component actually allocated by
OpenGL for that format.

[[cl_khr_gl_sharing__memobjs-querying-gl-object-information-from-a-cl-memory-object]]
=== Querying OpenGL object information from an OpenCL memory object

The OpenGL object used to create the OpenCL memory object and information
about the object type i.e. whether it is a texture, renderbuffer or buffer
object can be queried using the following function.
indexterm:[clGetGLObjectInfo]
[source,c]
----
cl_int clGetGLObjectInfo(cl_mem memobj,
                         cl_gl_object_type *gl_object_type,
                         GLuint *gl_object_name)
----

_gl_object_type_ returns the type of GL object attached to _memobj_ and can
be CL_GL_OBJECT_BUFFER, CL_GL_OBJECT_TEXTURE2D, CL_GL_OBJECT_TEXTURE3D,
CL_GL_OBJECT_TEXTURE2D_ARRAY, CL_GL_OBJECT_TEXTURE1D,
CL_GL_OBJECT_TEXTURE1D_ARRAY, CL_GL_OBJECT_TEXTURE_BUFFER, or
CL_GL_OBJECT_RENDERBUFFER.
If _gl_object_type_ is `NULL`, it is ignored

_gl_object_name_ returns the GL object name used to create _memobj_.
If _gl_object_name_ is `NULL`, it is ignored.

*clGetGLObjectInfo* returns CL_SUCCESS if the call was executed
successfully.
Otherwise, it returns one of the following errors:

  * CL_INVALID_MEM_OBJECT if _memobj_ is not a valid OpenCL memory object.
  * CL_INVALID_GL_OBJECT if there is no GL object associated with _memobj_.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The function
indexterm:[clGetGLTextureInfo]
[source,c]
----
cl_int clGetGLTextureInfo(cl_mem memobj,
                          cl_gl_texture_info param_name,
                          size_t param_value_size,
                          void *param_value,
                          size_t *param_value_size_ret)
----

returns additional information about the GL texture object associated with
_memobj_.

_param_name_ specifies what additional information about the GL texture
object associated with _memobj_ to query.
The list of supported _param_name_ types and the information returned in
_param_value_ by *clGetGLTextureInfo* is described in the table below.

_param_value_ is a pointer to memory where the result being queried is
returned.
If _param_value_ is `NULL`, it is ignored.

_param_value_size_ is used to specify the size in bytes of memory pointed to
by _param_value_.
This size must be >= size of return type as described in the table below.

_param_value_size_ret_ returns the actual size in bytes of data copied to
_param_value_.
If _param_value_size_ret_ is `NULL`, it is ignored.

[[cl_khr_gl_sharing__memobjs-clGetGLTextureInfo-queries]]
._OpenGL texture info that may be queried with_ *clGetGLTextureInfo*
[cols=",,",options="header",]
|====
| *cl_gl_texture_info*
| *Return Type*
| *Info. returned in _param_value_*

| *CL_GL_TEXTURE_TARGET*
| GLenum
| The _texture_target_ argument specified in *clCreateFromGLTexture*.

| *CL_GL_MIPMAP_LEVEL*
| GLint
| The _miplevel_ argument specified in *clCreateFromGLTexture*.
|====

*clGetGLTextureInfo* returns CL_SUCCESS if the function is executed
successfully.
Otherwise, it returns one of the following errors:

  * CL_INVALID_MEM_OBJECT if _memobj_ is not a valid OpenCL memory object.
  * CL_INVALID_GL_OBJECT if there is no GL texture object associated with
    _memobj_.
  * CL_INVALID_VALUE if _param_name_ is not valid, or if size in bytes
    specified by _param_value_size_ is less than the size of the return type
    as described in the table above and _param_value_ is not `NULL`, or if
    _param_value_ and _param_value_size_ret_ are `NULL`.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

[[cl_khr_gl_sharing__memobjs-sharing-memory-objects-that-map-to-gl-objects-between-gl-and-cl-contexts]]
=== Sharing memory objects that map to GL objects between GL and CL contexts

The function
indexterm:[clEnqueueAcquireGLObjects]
[source,c]
----
cl_int  clEnqueueAcquireGLObjects(cl_command_queue command_queue,
                                  cl_uint num_objects,
                                  const cl_mem *mem_objects,
                                  cl_uint num_events_in_wait_list,
                                  const cl_event *event_wait_list,
                                  cl_event *event)
----

is used to acquire OpenCL memory objects that have been created from OpenGL
objects.
These objects need to be acquired before they can be used by any OpenCL
commands queued to a command-queue.
The OpenGL objects are acquired by the OpenCL context associated with
_command_queue_ and can therefore be used by all command-queues associated
with the OpenCL context.

_command_queue_ is a valid command-queue.
All devices used to create the OpenCL context associated with
_command_queue_ must support acquiring shared CL/GL objects.
This constraint is enforced at context creation time.

_num_objects_ is the number of memory objects to be acquired in
_mem_objects_.

_mem_objects_ is a pointer to a list of CL memory objects that correspond to
GL objects.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this particular command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The events specified in

_event_wait_list_ act as synchronization points.

_event_ returns an event object that identifies this command and can be used
to query or queue a wait for the command to complete.
_event_ can be `NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.
If the _event_wait_list_ and the _event_ arguments are not `NULL`, the
_event_ argument should not refer to an element of the _event_wait_list_
array.

*clEnqueueAcquireGLObjects* returns CL_SUCCESS if the function is executed
successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` the function does nothing
and returns CL_SUCCESS.
Otherwise, it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_CONTEXT if context associated with _command_queue_ was not
    created from an OpenGL context
  * CL_INVALID_GL_OBJECT if memory objects in _mem_objects_ have not been
    created from a GL object(s).
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The function
indexterm:[clEnqueueReleaseGLObjects]
[source,c]
----
cl_int clEnqueueReleaseGLObjects(cl_command_queue command_queue,
                                 cl_uint num_objects,
                                 const cl_mem *mem_objects,
                                 cl_uint num_events_in_wait_list,
                                 const cl_event *event_wait_list,
                                 cl_event *event)
----

is used to release OpenCL memory objects that have been created from OpenGL
objects.
These objects need to be released before they can be used by OpenGL.
The OpenGL objects are released by the OpenCL context associated with
_command_queue_.

_num_objects_ is the number of memory objects to be released in
_mem_objects_.

_mem_objects_ is a pointer to a list of CL memory objects that correspond to
GL objects.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The events specified in _event_wait_list_ act as synchronization points.

_event_ returns an event object that identifies this particular
command and can be used to query or queue a wait for the command to
complete.
_event_ can be`NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.
If the _event_wait_list_ and the _event_ arguments are not `NULL`, the
_event_ argument should not refer to an element of the _event_wait_list_
array.

*clEnqueueReleaseGLObjects* returns CL_SUCCESS if the function is executed
successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` the function does nothing
and returns CL_SUCCESS.
Otherwise, it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_CONTEXT if context associated with _command_queue_ was not
    created from an OpenGL context
  * CL_INVALID_GL_OBJECT if memory objects in _mem_objects_ have not been
    created from a GL object(s).
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

[[cl_khr_gl_sharing__memobjs-synchronizing-opencl-and-opengl-access-to-shared-objects]]
==== Synchronizing OpenCL and OpenGL Access to Shared Objects

In order to ensure data integrity, the application is responsible for
synchronizing access to shared CL/GL objects by their respective APIs.
Failure to provide such synchronization may result in race conditions and
other undefined behavior including non-portability between implementations.

Prior to calling *clEnqueueAcquireGLObjects*, the application must ensure
that any pending GL operations which access the objects specified in
_mem_objects_ have completed.
This may be accomplished portably by issuing and waiting for completion of a
*glFinish* command on all GL contexts with pending references to these
objects.
Implementations may offer more efficient synchronization methods; for
example on some platforms calling *glFlush* may be sufficient, or
synchronization may be implicit within a thread, or there may be
vendor-specific extensions that enable placing a fence in the GL command
stream and waiting for completion of that fence in the CL command queue.
Note that no synchronization methods other than *glFinish* are portable
between OpenGL implementations at this time.

Similarly, after calling *clEnqueueReleaseGLObjects*, the application is
responsible for ensuring that any pending OpenCL operations which access the
objects specified in _mem_objects_ have completed prior to executing
subsequent GL commands which reference these objects.
This may be accomplished portably by calling *clWaitForEvents* with the
event object returned by *clEnqueueReleaseGLObjects,* or by calling
*clFinish*.
As above, some implementations may offer more efficient methods.

The application is responsible for maintaining the proper order of
operations if the CL and GL contexts are in separate threads.

If a GL context is bound to a thread other than the one in which
*clEnqueueReleaseGLObjects* is called, changes to any of the objects in
_mem_objects_ may not be visible to that context without additional steps
being taken by the application.
For an OpenGL 3.1 (or later) context, the requirements are described in
Appendix D ("`Shared Objects and Multiple Contexts`") of the OpenGL 3.1
Specification.
For prior versions of OpenGL, the requirements are implementation-dependent.

Attempting to access the data store of an OpenGL object after it has been
acquired by OpenCL and before it has been released will result in undefined
behavior.
Similarly, attempting to access a shared CL/GL object from OpenCL before it
has been acquired by the OpenCL command queue, or after it has been
released, will result in undefined behavior.
