// Copyright 2017-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_mipmap_image]]
== Mipmaps

This section describes OpenCL support for mipmaps.

There are two optional mipmap extensions.
The *cl_khr_mipmap_image* extension adds the ability to create a mip-mapped
image, enqueue commands to read/write/copy/map/unmap a region of a mipmapped
image, and built-in functions that can be used to read a mip-mapped image in
an OpenCL C program.
The *cl_khr_mipmap_image_writes* extension adds built-in functions that can
be used to write a mip-mapped image in an OpenCL C program.
If the *cl_khr_mipmap_image_writes* extension is supported by the OpenCL
device, the *cl_khr_mipmap_image* extension must also be supported.

[[cl_khr_mipmap_image-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.2 Specification

[[cl_khr_mipmap_image-additions-to-section-5.3]]
==== Additions to section 5.3 -- Image Objects

A mip-mapped 1D image, 1D image array, 2D image, 2D image array or 3D image
is created by specifying _num_mip_levels_ to be a value greater than one in
the _cl_image_desc_ passed to *clCreateImage*.
The dimensions of a mip-mapped image can be a power of two or a non-power of
two.
Each successively smaller mipmap level is half the size of the previous
level.
If this half value is a fractional value, it is rounded down to the nearest
integer.

*Restrictions*

The following restrictions apply when mip-mapped images are created with
*clCreateImage*:

  * CL_MEM_USE_HOST_PTR or CL_MEM_COPY_HOST_PTR cannot be specified if a
    mip-mapped image is created.
  * The _host_ptr_ argument to *clCreateImage* must be a `NULL` value.
  * Mip-mapped images cannot be created for CL_MEM_OBJECT_IMAGE1D_BUFFER
    images, depth images or multi-sampled (i.e. msaa) images.

Calls to *clEnqueueReadImage*, *clEnqueueWriteImage* and *clEnqueueMapImage*
can be used to read from or write to a specific mip-level of a mip-mapped
image.
If image argument is a 1D image, _origin_[1] specifies the mip-level to use.
If image argument is a 1D image array, _origin_[2] specifies the mip-level
to use.
If image argument is a 2D image, _origin_[2] specifies the mip-level to use.
If image argument is a 2D image array or a 3D image, _origin_[3] specifies
the mip-level to use.

Calls to *clEnqueueCopyImage*, *clEnqueueCopyImageToBuffer* and
*clEnqueueCopyBufferToImage* can also be used to copy from and to a specific
mip-level of a mip-mapped image.
If _src_image_ argument is a 1D image, _src_origin_[1] specifies the
mip-level to use.
If _src_image_ argument is a 1D image array, _src_origin_[2] specifies the
mip-level to use.
If _src_image_ argument is a 2D image, _src_origin_[2] specifies the
mip-level to use.
If _src_image_ argument is a 2D image array or a 3D image, _src_origin_[3]
specifies the mip-level to use.
If _dst_image_ argument is a 1D image, _dst_origin_[1] specifies the
mip-level to use.
If _dst_image_ argument is a 1D image array, _dst_origin_[2] specifies the
mip-level to use.
If _dst_image_ argument is a 2D image, _dst_origin_[2] specifies the
mip-level to use.
If _dst_image_ argument is a 2D image array or a 3D image, _dst_origin_[3]
specifies the mip-level to use.

If the mip level specified is not a valid value, these functions return the
error CL_INVALID_MIP_LEVEL.

Calls to clEnqueueFillImage can be used to write to a specific mip-level of
a mip-mapped image.
If image argument is a 1D image, origin[1] specifies the mip-level to use.
If image argument is a 1D image array, origin[2] specifies the mip-level to
use.
If image argument is a 2D image, origin[2] specifies the mip-level to use.
If image argument is a 2D image array or a 3D image, origin[3] specifies the
mip-level to use.

[[cl_khr_mipmap_image-additions-to-section-5.7]]
==== Additions to section 5.7 -- Sampler Objects

Add the following sampler properties _to table 5.14_ that can be specified
when a sampler object is created using *clCreateSamplerWithProperties*.

[cols="3,1,2",options="header",]
|====
| *cl_sampler_properties enum*
| *Property Value*
| *Default Value*

| *CL_SAMPLER_MIP_FILTER_MODE_KHR*
| cl_filter_mode
| CL_FILTER_NEAREST

| *CL_SAMPLER_LOD_MIN_KHR*
| cl_float
| 0.0f

| *CL_SAMPLER_LOD_MAX_KHR*
| cl_float
| MAXFLOAT

|====

Note: The sampler properties CL_SAMPLER_MIP_FILTER_MODE_KHR,
CL_SAMPLER_LOD_MIN_KHR and CL_SAMPLER_LOD_MAX_KHR cannot be specified with
any samplers initialized in the OpenCL program source.
Only the default values for these properties will be used.
To create a sampler with specific values for these properties, a sampler
object must be created with *clCreateSamplerWithProperties* and passed as an
argument to a kernel.

[[cl_khr_mipmap_image-additions-to-chapter-6-of-the-opencl-2.0-specification]]
=== Additions to Chapter 6 of the OpenCL 2.0 Specification

[[cl_khr_mipmap_image-additions-to-section-6.13.14-image-read-write-and-query-functions]]
==== Additions to section 6.13.14 â€“ Image Read, Write and Query Functions

The image read and write functions described in _sections 6.13.14.2_,
_6.13.14.3_ and _6.13.14.4_ read from and write to mip-level 0 if the
image argument is a mip-mapped image.

The following new built-in functions are added to _section 6.13.14.2_.

[cols="5a,4",options="header",]
|=======================================================================
|*Function* |*Description*
|[source,c]
----
float4 read_imagef(
    read_only image2d_t image,
    sampler_t sampler,
    float2 coord,
    float lod)

int4 read_imagei(
    read_only image2d_t image,
    sampler_t sampler,
    float2 coord,
    float lod)

uint4 read_imageui(
    read_only image2d_t image,
    sampler_t sampler,
    float2 coord,
    float lod)

float read_imagef(
    read_only image2d_depth_t image,
    sampler_t sampler,
    float2 coord,
    float lod)
----
| Use the coordinate _coord.xy_ to do an element lookup in the mip-level specified by _lod_ in the 2D image object specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image2d_t image,
    sampler_t sampler,
    float2 coord,
    float2 gradient_x,
    float2 gradient_y)

int4 read_imagei(
    read_only image2d_t image,
    sampler_t sampler,
    float2 coord,
    float2 gradient_x,
    float2 gradient_y)

uint4 read_imageui(
    read_only image2d_t image,
    sampler_t sampler,
    float2 coord,
    float2 gradient_x,
    float2 gradient_y)

float read_imagef(
    read_only image2d_depth_t image,
    sampler_t sampler,
    float2 coord,
    float2 gradient_x,
    float2 gradient_y)
----
| Use the gradients to compute the lod and coordinate _coord.xy_ to do an element lookup in the mip-level specified by the computed lod in the 2D image object specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image1d_t image,
    sampler_t sampler,
    float coord,
    float lod)

int4 read_imagei(
    read_only image1d_t image,
    sampler_t sampler,
    float coord,
    float lod)

uint4 read_imageui(
    read_only image1d_t image,
    sampler_t sampler,
    float coord,
    float lod)
----
| Use the coordinate _coord_ to do an element lookup in the mip-level specified by _lod_ in the 1D image object specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image1d_t image,
    sampler_t sampler,
    float coord,
    float gradient_x,
    float gradient_y)

int4 read_imagei(
    read_only image1d_t image,
    sampler_t sampler,
    float coord,
    float gradient_x,
    float gradient_y)

uint4 read_imageui(
    read_only image1d_t image,
    sampler_t sampler,
    float coord,
    float gradient_x,
    float gradient_y)
----
| Use the gradients to compute the lod and coordinate _coord_ to do an element lookup in the mip-level specified by the computed lod in the 1D image object specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image3d_t image,
    sampler_t sampler,
    float4 coord,
    float lod)

int4 read_imagei(
    read_only image3d_t image,
    sampler_t sampler,
    float4 coord,
    float lod)

uint4 read_imageui(
    read_only image3d_t image,
    sampler_t sampler,
    float4 coord,
    float lod)
----
| Use the coordinate _coord.xyz_ to do an element lookup in the mip-level specified by _lod_ in the 3D image object specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image3d_t image,
    sampler_t sampler,
    float4 coord,
    float4 gradient_x,
    float4 gradient_y)

int4 read_imagei(
    read_only image3d_t image,
    sampler_t sampler,
    float4 coord,
    float4 gradient_x,
    float4 gradient_y)

uint4 read_imageui(
    read_only image3d_t image,
    sampler_t sampler,
    float4 coord,
    float4 gradient_x,
    float4 gradient_y)
----
| Use the gradients to compute the lod and coordinate _coord.xyz_ to do an element lookup in the mip-level specified by the computed lod in the 3D image object specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image1d_array_t image,
    sampler_t sampler,
    float2 coord,
    float lod)

int4 read_imagei(
    read_only image1d_array_t image,
    sampler_t sampler,
    float2 coord,
    float lod)

uint4 read_imageui(
    read_only image1d_array_t image,
    sampler_t sampler,
    float2 coord,
    float lod)
----
| Use the coordinate _coord.x_ to do an element lookup in the 1D image identified by _coord.x_ and mip-level specified by _lod_ in the 1D image array specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image1d_array_t image,
    sampler_t sampler,
    float2 coord,
    float gradient_x,
    float gradient_y)

int4 read_imagei(
    read_only image1d_array_t image,
    sampler_t sampler,
    float2 coord,
    float gradient_x,
    float gradient_y)

uint4 read_imageui(
    read_only image1d_array_t image,
    sampler_t sampler,
    float2 coord,
    float gradient_x,
    float gradient_y)
----
| Use the gradients to compute the lod and coordinate _coord.x_ to do an element lookup in the mip-level specified by the computed lod in the 1D image array specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image2d_array_t image,
    sampler_t sampler,
    float4 coord,
    float lod)

int4 read_imagei(
    read_only image2d_array_t image,
    sampler_t sampler,
    float4 coord,
    float lod)

uint4 read_imageui(
    read_only image2d_array_t image,
    sampler_t sampler,
    float4 coord,
    float lod)

float read_imagef(
    read_only image2d_array_depth_t image,
    sampler_t sampler,
    float4 coord,
    float lod)
----
| Use the coordinate _coord.xy_ to do an element lookup in the 2D image identified by _coord.z_ and mip-level specified by _lod_ in the 2D image array specified by _image_.

|[source,c]
----
float4 read_imagef(
    read_only image2d_array_t image,
    sampler_t sampler,
    float4 coord,
    float2 gradient_x,
    float2 gradient_y)

int4 read_imagei(
    read_only image2d_array_t image,
    sampler_t sampler,
    float4 coord,
    float2 gradient_x,
    float2 gradient_y)

uint4 read_imageui(
    read_only image2d_array_t image,
    sampler_t sampler,
    float4 coord,
    float2 gradient_x,
    float2 gradient_y)

float read_imagef(
    read_only image2d_array_depth_t image,
    sampler_t sampler,
    float4 coord,
    float2 gradient_x,
    float2 gradient_y)
----
| Use the gradients to compute the lod coordinate and _coord.xy_ to do an element lookup in the 2D image identified by _coord.z_ and mip-level specified by the computed lod in the 2D image array specified by _image_.
|=======================================================================

NOTE: CL_SAMPLER_NORMALIZED_COORDS must be CL_TRUE for built-in functions described in the table above that read from a mip-mapped image; otherwise the behavior is undefined.
The value specified in the _lod_ argument is clamped to the minimum of (actual number of mip-levels â€“ 1) in the image or value specified for CL_SAMPLER_LOD_MAX.

The following new built-in functions are added to _section 6.13.14.4_.

[cols="1a,1",options="header",]
|=======================================================================
|*Function* |*Description*
|[source,c]
----
void write_imagef(
    write_only image2d_t image,
    int2 coord,
    int lod,
    float4 color)

void write_imagei(
    write_only image2d_t image,
    int2 coord,
    int lod,
    int4 color)

void write_imageui(
    write_only image2d_t image,
    int2 coord,
    int lod,
    uint4 color)

void write_imagef(
    write_only image2d_depth_t image,
    int2 coord,
    int lod,
    float depth)
----
| Write _color_ value to location specified by _coord.xy_ in the mip-level specified by _lod_ in the 2D image object specified by _image_.
Appropriate data format conversion to the specified image format is done before writing the color value.
_coord.x_ and _coord.y_ are considered to be unnormalized coordinates and must be in the range 0 .. image width of mip-level specified by _lod_ â€“ 1, and 0 .. image height of mip-level specified by _lod_ â€“ 1.

The behavior of *write_imagef*, *write_imagei* and *write_imageui* if (_x_, _y_) coordinate values are not in the range (0 .. image width of the mip-level specified by _lod_ â€“ 1, 0 .. image height of the mip-level specified by _lod_ â€“ 1) or _lod_ value exceeds the (number of mip-levels in the image â€“ 1) is undefined.

|[source,c]
----
void write_imagef(
    write_only image1d_t image,
    int coord,
    int lod,
    float4 color)

void write_imagei(
    write_only image1d_t image,
    int coord,
    int lod,
    int4 color)

void write_imageui(
    write_only image1d_t image,
    int coord,
    int lod,
    uint4 color)
----
|Write _color_ value to location specified by _coord_ in the mip-level specified by _lod_ in the 1D image object specified by _image_.
Appropriate data format conversion to the specified image format is done before writing the color value.
_coord_ is considered to be unnormalized coordinates and must be in the range 0 .. image width of the mip-level
specified by _lod_ â€“ 1.

The behavior of *write_imagef*, *write_imagei* and *write_imageui* if coordinate value is not in the range (0 .. image width of the mip-level specified by _lod_ â€“ 1) or _lod_ value exceeds the (number of mip-levels in the image â€“ 1), is undefined.

|[source,c]
----
void write_imagef(
    write_only image1d_array_t image,
    int2 coord,
    int lod,
    float4 color)

void write_imagei(
    write_only image1d_array_t image,
    int2 coord,
    int lod,
    int4 color)

void write_imageui(
    write_only image1d_array_t image,
    int2 coord,
    int lod,
    uint4 color)
----
| Write _color_ value to location specified by _coord.x_ in the 1D image identified by _coord.y_ and mip-level _lod_ in the 1D image array specified by _image_.
Appropriate data format conversion to the specified image format is done before writing the color value.
_coord.x_ and _coord.y_ are considered to be unnormalized coordinates and must be in the range 0 .. image width of the mip-level specified by _lod_ â€“ 1 and 0 .. image number of layers â€“ 1.

The behavior of *write_imagef*, *write_imagei* and *write_imageui* if (_x_, _y_) coordinate values are not in the range (0 .. image width of the mip-level specified by _lod_ â€“ 1, 0 .. image number of layers â€“ 1), respectively or _lod_ value exceeds the (number of mip-levels in the image â€“ 1), is undefined.

|[source,c]
----
void write_imagef(
    write_only image2d_array_t image,
    int4 coord,
    int lod,
    float4 color)

void write_imagei(
    write_only image2d_array_t image,
    int4 coord,
    int lod,
    int4 color)

void write_imageui(
    write_only image2d_array_t image,
    int4 coord,
    int lod,
    uint4 color)

void write_imagef(
    write_only image2d_array_depth_t image,
    int4 coord,
    int lod,
    float depth)
----
| Write _color_ value to location specified by _coord.xy_ in the 2D image identified by _coord.z_ and mip-level _lod_ in the 2D image array specified by _image_.
Appropriate data format conversion to the specified image format is done before writing the color value.
_coord.x_, _coord.y_ and _coord.z_ are considered to be unnormalized coordinates and must be in the range 0 .. image width of the mip-level specified by _lod_ â€“ 1, 0 .. image height â€“ 1 specified by _lod_ â€“ 1 and 0 .. image number of layers â€“ 1.

The behavior of *write_imagef*, *write_imagei* and *write_imageui* if (_x_, _y, z_) coordinate values are not in the range (0 .. image width of the mip-level specified by _lod_ â€“ 1, 0 .. image height of the mip-level specified by _lod_ â€“ 1, 0 .. image number of layers â€“ 1), respectively or _lod_ value exceeds the (number of mip-levels in the image â€“ 1), is undefined.

|[source,c]
----
void write_imagef(
    write_only image3d_t image,
    int4 coord,
    int lod,
    float4 color)

void write_imagei(
    write_only image3d_t image,
    int4 coord,
    int lod,
    int4 color)

void write_imageui(
    write_only image3d_t image,
    int4 coord,
    int lod,
    uint4 color)
----
| Write color value to location specified by _coord.xyz_ and mip-level _lod_ in the 3D image object specified by _image_. 
Appropriate data format conversion to the specified image format is done before writing the color value.
_coord.x_, _coord.y_ and _coord.z_ are considered to be unnormalized coordinates and must be in the range 0 .. image width â€“ 1
specified by _lod_ â€“ 1, 0 .. image height â€“ 1 specified by _lod_ â€“ 1 and 0 .. image depth â€“ 1 specified by _lod_ â€“ 1.

The behavior of *write_imagef*, *write_imagei* and *write_imageui* if (_x_, _y, z_) coordinate values are not in the range (0 .. image width of the mip-level specified by _lod_ â€“ 1, 0 .. image height of the mip-level specified by _lod_ â€“ 1, 0 .. image depth â€“ 1), respectively or _lod_ value exceeds the (number of mip-levels in the image â€“ 1), is undefined.

|=======================================================================

The following new built-in functions are added to _section 6.13.14.5_.

[cols="1a,1",options="header",]
|=================================
|*Function* |*Description*
|[source,c]
----
int get_image_num_mip_levels(
    image1d_t image)

int get_image_num_mip_levels(
    image2d_t image)

int get_image_num_mip_levels(
    image3d_t image)

int get_image_num_mip_levels(
    image1d_array_t image)

int get_image_num_mip_levels(
    image2d_array_t image)

int get_image_num_mip_levels(
    image2d_depth_t image)

int get_image_num_mip_levels(
    image2d_array_depth_t image)
----
| Return the number of mip-levels.
|=================================

[[cl_khr_mipmap_image-additions-to-creating-opencl-memory-objects-from-opengl-objects]]
=== Additions to <<cl_khr_gl_sharing__memobjs,Creating OpenCL Memory Objects from OpenGL Objects>>

If both the *`cl_khr_mipmap_image`* and *`cl_khr_gl_sharing`* extensions are
supported by the OpenCL device, the *`cl_khr_gl_sharing`* extension may also
be used to create a mipmapped OpenCL image from a mipmapped OpenGL texture.

To create a mipmapped OpenCL image from a mipmapped OpenGL texture, pass a
negative value as the _miplevel_ argument to *clCreateFromGLTexture*.
If _miplevel_ is a negative value then an OpenCL mipmapped image object is
created from a mipmapped OpenGL texture object, instead of an OpenCL image
object for a specific miplevel of the OpenGL texture.

Note: For a detailed description of how the level of detail is computed,
please refer to _section 3.9.7_ of the OpenGL 3.0 specification.
