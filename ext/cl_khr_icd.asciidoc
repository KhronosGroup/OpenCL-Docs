// Copyright 2017-2019 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_icd-opencl]]
== Installable Client Drivers

[[cl_khr_icd-overview]]
=== Overview

This section describes a platform extension which defines a simple mechanism
through which the Khronos OpenCL installable client driver loader (ICD
Loader) may expose multiple separate vendor installable client drivers
(Vendor ICDs) for OpenCL.
An application written against the ICD Loader will be able to access all
cl_platform_ids exposed by all vendor implementations with the ICD Loader
acting as a demultiplexor.

This is a platform extension, so if this extension is supported by an
implementation, the string *cl_khr_icd* will be present in the
`CL_PLATFORM_EXTENSIONS` string.

[[cl_khr_icd-inferring-vendors-from-function-call-arguments]]
=== Inferring Vendors from Function Call Arguments

At every OpenCL function call, the ICD Loader infers the vendor ICD function
to call from the arguments to the function.
An object is said to be ICD compatible if it is of the following structure:

[source,c]
----
struct _cl_<object>
{
    struct _cl_icd_dispatch *dispatch;
    // ... remainder of internal data
};
----

<object> is one of platform_id, device_id, context, command_queue, mem,
program, kernel, event, or sampler.

The structure `_cl_icd_dispatch` is a function pointer dispatch table which
is used to direct calls to a particular vendor implementation.
All objects created from ICD compatible objects must be ICD compatible.

The order of the functions in `_cl_icd_dispatch` is determined by the ICD
Loader's source.
The ICD Loader's source's `_cl_icd_dispatch` table is to be appended to
only.

Functions which do not have an argument from which the vendor implementation
may be inferred have been deprecated and may be ignored.

[[cl_khr_icd-icd-data]]
=== ICD Data

A Vendor ICD is defined by two pieces of data:

  * The Vendor ICD library specifies a library which contains the OpenCL
    entry points for the vendor's OpenCL implementation.
    The vendor ICD's library file name should include the vendor name, or a
    vendor-specific implementation identifier.
  * The Vendor ICD extension suffix is a short string which specifies the
    default suffix for extensions implemented only by that vendor.
    The vendor suffix string is optional.

[[cl_khr_icd-icd-loader-vendor-enumeration-on-windows]]
=== ICD Loader Vendor Enumeration on Windows

To enumerate Vendor ICDs on Windows, the ICD Loader will first
scan for REG_SZ string values in the "Display Adapter" and
"Software Components" HKR registry keys.  The exact registry
keys to scan should be obtained via PnP Configuration Manager
APIs, but will look like:

For 64-bit ICDs:

----
HKLM\SYSTEM\CurrentControlSet\Control\Class\
{Display Adapter GUID}\{Instance ID}\OpenCLDriverName, or

HKLM\SYSTEM\CurrentControlSet\Control\Class\
{Software Component GUID}\{Instance ID}\OpenCLDriverName
----

For 32-bit ICDs:

----
HKLM\SYSTEM\CurrentControlSet\Control\Class\
{Display Adapter GUID}\{Instance ID}\OpenCLDriverNameWoW, or

HKLM\SYSTEM\CurrentControlSet\Control\Class\
{Software Component GUID}\{Instance ID}\OpenCLDriverNameWoW
----

These registry values contain the path to the Vendor ICD library.
For example, if the registry contains the value:

----
[HKLM\SYSTEM\CurrentControlSet\Control\Class\{GUID}\{Instance}]
"OpenCLDriverName"="c:\\vendor a\\vndra_ocl.dll"
----

Then the ICD Loader will open the Vendor ICD library:

----
c:\vendor a\vndra_ocl.dll
----

The ICD Loader will also scan for REG_DWORD values in the registry
key:

----
HKLM\SOFTWARE\Khronos\OpenCL\Vendors
----

For each registry value in this key which has data set to 0, the
ICD Loader will open the Vendor ICD library specified by the name
of the registry value.

For example, if the registry contains the value:

----
[HKLM\SOFTWARE\Khronos\OpenCL\Vendors]
"c:\\vendor a\\vndra_ocl.dll"=dword:00000000
----

Then the ICD will open the Vendor ICD library:

----
c:\vendor a\vndra_ocl.dll
----

[[cl_khr_icd-icd-loader-vendor-enumeration-on-linux]]
=== ICD Loader Vendor Enumeration on Linux

To enumerate vendor ICDs on Linux, the ICD Loader scans the files in the
path `/etc/OpenCL/vendors`.
For each file in this path, the ICD Loader opens the file as a text file.
The expected format for the file is a single line of text which specifies
the Vendor ICD's library.
The ICD Loader will attempt to open that file as a shared object using
dlopen().
Note that the library specified may be an absolute path or just a file name.

For example, if the following file exists

----
/etc/OpenCL/vendors/VendorA.icd
----

and contains the text

----
libVendorAOpenCL.so
----

then the ICD Loader will load the library `libVendorAOpenCL.so`.

[[cl_khr_icd-icd-loader-vendor-enumeration-on-android]]
=== ICD Loader Vendor Enumeration on Android

To enumerate vendor ICDs on Android, the ICD Loader scans the files in the
path `/system/vendor/Khronos/OpenCL/vendors`.
For each file in this path, the ICD Loader opens the file as a text file.
The expected format for the file is a single line of text which specifies
the Vendor ICD's library.
The ICD Loader will attempt to open that file as a shared object using
dlopen().
Note that the library specified may be an absolute path or just a file name.

For example, if the following file exists

----
/system/vendor/Khronos/OpenCL/vendors/VendorA.icd
----

and contains the text

----
libVendorAOpenCL.so
----

then the ICD Loader will load the library `libVendorAOpenCL.so`.

[[cl_khr_icd-adding-a-vendor-library]]
=== Adding a Vendor Library

Upon successfully loading a Vendor ICD's library, the ICD Loader queries the
following functions from the library: *clIcdGetPlatformIDsKHR*,
*clGetPlatformInfo*, and *clGetExtensionFunctionAddress* (note:
*clGetExtensionFunctionAddress* has been deprecated, but is still required
for the ICD loader).
If any of these functions are not present then the ICD Loader will close and
ignore the library.

Next the ICD Loader queries available ICD-enabled platforms in the library
using *clIcdGetPlatformIDsKHR*.
For each of these platforms, the ICD Loader queries the platform's extension
string to verify that *cl_khr_icd* is supported, then queries the platform's
Vendor ICD extension suffix using *clGetPlatformInfo* with the value
CL_PLATFORM_ICD_SUFFIX_KHR.

If any of these steps fail, the ICD Loader will ignore the Vendor ICD and
continue on to the next.

[[cl_khr_icd-new-procedures-and-functions]]
=== New Procedures and Functions

[source,c]
----
cl_int clIcdGetPlatformIDsKHR(cl_uint num_entries,
                              cl_platform_id *platforms,
                              cl_uint *num_platforms);
----

[[cl_khr_icd-new-tokens]]
=== New Tokens

Accepted as _param_name_ to the function *clGetPlatformInfo*:

----
CL_PLATFORM_ICD_SUFFIX_KHR
----

Returned by *clGetPlatformIDs* when no platforms are found:

----
CL_PLATFORM_NOT_FOUND_KHR
----

[[cl_khr_icd-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.2 Specification

In _section 4.1_, replace the description of the return values of
*clGetPlatformIDs* with:

"clGetPlatformIDs* returns CL_SUCCESS if the function is executed
successfully and there are a non zero number of platforms available.
It returns CL_PLATFORM_NOT_FOUND_KHR if zero platforms are available.
It returns CL_INVALID_VALUE if _num_entries_ is equal to zero and
_platforms_ is not `NULL` or if both _num_platforms_ and _platforms_ are
`NULL`."

In _section 4.1_, add the following after the description of
*clGetPlatformIDs*:

"The list of platforms accessible through the Khronos ICD Loader can be
obtained using the following function:
indexterm:[clIcdGetPlatformIDsKHR]
[source,c]
----
cl_int clIcdGetPlatformIDsKHR(cl_uint num_entries,
                              cl_platform_id *platforms,
                              cl_uint *num_platforms);
----

_num_entries_ is the number of cl_platform_id entries that can be added to
_platforms_.
If _platforms_ is not `NULL`, then _num_entries_ must be greater than zero.

_platforms_ returns a list of OpenCL platforms available for access through
the Khronos ICD Loader.
The cl_platform_id values returned in _platforms_ are ICD compatible and can
be used to identify a specific OpenCL platform.
If the _platforms_ argument is `NULL`, then this argument is ignored.
The number of OpenCL platforms returned is the minimum of the value
specified by _num_entries_ or the number of OpenCL platforms available.

_num_platforms_ returns the number of OpenCL platforms available.
If _num_platforms_ is `NULL`, then this argument is ignored.

*clIcdGetPlatformIDsKHR* returns CL_SUCCESS if the function is executed
successfully and there are a non zero number of platforms available.
It returns CL_PLATFORM_NOT_FOUND_KHR if zero platforms are available.
It returns CL_INVALID_VALUE if _num_entries_ is equal to zero and
_platforms_ is not `NULL` or if both _num_platforms_ and _platforms_ are
`NULL`."

Add the following to _table 4.1_:

[cols="2,1,2",options="header",]
|====
| *cl_platform_info enum*
| *Return Type*
| *Description*

| *CL_PLATFORM_ICD_SUFFIX_KHR*
| char[]
| The function name suffix used to identify extension functions to be
  directed to this platform by the ICD Loader.

|====

[[cl_khr_icd-source-code]]
=== Source Code

The official source for the ICD loader is available on github, at:

https://github.com/KhronosGroup/OpenCL-ICD-Loader

The complete `_cl_icd_dispatch` structure is defined in the header
*icd_dispatch.h*, which is available as a part of the source code.

[[cl_khr_icd-issues]]
=== Issues

  . Some OpenCL functions do not take an object argument from which their
    vendor library may be identified (e.g, clUnloadCompiler), how will they
    be handled?
+
--
RESOLVED: Such functions will be a noop for all calls through the ICD.
--

  . How are OpenCL extension to be handled?
+
--
RESOLVED: OpenCL extension functions may be added to the ICD as soon as they
are implemented by any vendor.
The suffix mechanism provides access for vendor extensions which are not yet
added to the ICD.
--

  . How will the ICD handle a `NULL` cl_platform_id?
+
--
RESOLVED: The ICD will by default choose the first enumerated platform as
the `NULL` platform.
The user can override this default by setting an environment variable
OPENCL_ICD_DEFAULT_PLATFORM to the desired platform index.
The API calls that deal with platforms will return CL_INVALID_PLATFORM if
the index is not between zero and (number of platforms - 1), both inclusive.
--

  . There exists no mechanism to unload the ICD, should there be one?
+
--
RESOLVED: As there is no standard mechanism for unloading a vendor
implementation, do not add one for the ICD.
--

  . How will the ICD loader handle `NULL` objects passed to the OpenCL
    functions?
+
--
RESOLVED: The ICD loader will check for `NULL` objects passed to the OpenCL
functions without trying to dereference the `NULL` objects for obtaining the
ICD dispatch table.
On detecting a `NULL` object it will return one of the CL_INVALID_* error
values corresponding to the object in question.
--
