// Copyright 2017-2019 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_d3d10_sharing]]
== Creating OpenCL Memory Objects from Direct3D 10 Buffers and Textures

[[cl_khr_d3d10_sharing-overview]]
=== Overview

This section describes the *cl_khr_d3d10_sharing* extension.
The goal of this extension is to provide interoperability between OpenCL and
Direct3D 10.

[[cl_khr_d3d10_sharing-new-procedures-and-functions]]
=== New Procedures and Functions

[source,c]
----
cl_int clGetDeviceIDsFromD3D10KHR(cl_platform_id platform,
                                  cl_d3d10_device_source_khr d3d_device_source,
                                  void *d3d_object,
                                  cl_d3d10_device_set_khr d3d_device_set,
                                  cl_uint num_entries,
                                  cl_device_id *devices,
                                  cl_uint *num_devices)

cl_mem clCreateFromD3D10BufferKHR(cl_context context,
                                  cl_mem_flags flags,
                                  ID3D10Buffer *resource,
                                  cl_int *errcode_ret)

cl_mem clCreateFromD3D10Texture2DKHR(cl_context context,
                                     cl_mem_flags flags,
                                     ID3D10Texture2D *resource,
                                     UINT subresource,
                                     cl_int *errcode_ret)

cl_mem clCreateFromD3D10Texture3DKHR(cl_context context,
                                     cl_mem_flags flags,
                                     ID3D10Texture3D *resource,
                                     UINT subresource,
                                     cl_int *errcode_ret)

cl_int clEnqueueAcquireD3D10ObjectsKHR(cl_command_queue command_queue,
                                       cl_uint num_objects,
                                       const cl_mem *mem_objects,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)

cl_int clEnqueueReleaseD3D10ObjectsKHR(cl_command_queue command_queue,
                                       cl_uint num_objects,
                                       const cl_mem *mem_objects,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
----

[[cl_khr_d3d10_sharing-new-tokens]]
=== New Tokens

Accepted as a Direct3D 10 device source in the _d3d_device_source_ parameter
of *clGetDeviceIDsFromD3D10KHR*:

----
CL_D3D10_DEVICE_KHR
CL_D3D10_DXGI_ADAPTER_KHR
----

Accepted as a set of Direct3D 10 devices in the _d3d_device_set_ parameter
of *clGetDeviceIDsFromD3D10KHR*:

----
CL_PREFERRED_DEVICES_FOR_D3D10_KHR
CL_ALL_DEVICES_FOR_D3D10_KHR
----

Accepted as a property name in the _properties_ parameter of
*clCreateContext* and *clCreateContextFromType*:

----
CL_CONTEXT_D3D10_DEVICE_KHR
----

Accepted as a property name in the _param_name_ parameter of
*clGetContextInfo*:

----
CL_CONTEXT_D3D10_PREFER_SHARED_RESOURCES_KHR
----

Accepted as the property being queried in the _param_name_ parameter of
*clGetMemObjectInfo*:

----
CL_MEM_D3D10_RESOURCE_KHR
----

Accepted as the property being queried in the _param_name_ parameter of
*clGetImageInfo*:

----
CL_IMAGE_D3D10_SUBRESOURCE_KHR
----

Returned in the _param_value_ parameter of *clGetEventInfo* when
_param_name_ is CL_EVENT_COMMAND_TYPE:

----
CL_COMMAND_ACQUIRE_D3D10_OBJECTS_KHR
CL_COMMAND_RELEASE_D3D10_OBJECTS_KHR
----

Returned by *clCreateContext* and *clCreateContextFromType* if the Direct3D
10 device specified for interoperability is not compatible with the devices
against which the context is to be created:

----
CL_INVALID_D3D10_DEVICE_KHR
----

Returned by *clCreateFromD3D10BufferKHR* when _resource_ is not a Direct3D
10 buffer object, and by *clCreateFromD3D10Texture2DKHR* and
*clCreateFromD3D10Texture3DKHR* when _resource_ is not a Direct3D 10 texture
object:

----
CL_INVALID_D3D10_RESOURCE_KHR
----

Returned by *clEnqueueAcquireD3D10ObjectsKHR* when any of _mem_objects_ are
currently acquired by OpenCL:

----
CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR
----

Returned by *clEnqueueReleaseD3D10ObjectsKHR* when any of _mem_objects_ are
not currently acquired by OpenCL:

----
CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR
----

[[cl_khr_d3d10_sharing-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.2 Specification

In _section 4.4_, replace the description of _properties_ under
*clCreateContext* with:

"`_properties_ specifies a list of context property names and their
corresponding values.
Each property is followed immediately by the corresponding desired value.
The list is terminated with zero.
If a property is not specified in _properties_, then its default value
(listed in _table 4.5_) is used (it is said to be specified implicitly).
If _properties_ is `NULL` or empty (points to a list whose first value is
zero), all attributes take on their default values.`"

Add the following to _table 4.5_:

[cols="2,1,2",options="header",]
|====
| *cl_context_properties enum*
| *Property value*
| *Description*

| *CL_CONTEXT_D3D10_DEVICE_KHR*
| ID3D10Device *
| Specifies the ID3D10Device * to use for Direct3D 10 interoperability.
  The default value is `NULL`.

|====

Add to the list of errors for *clCreateContext*:

  * CL_INVALID_D3D10_DEVICE_KHR if the value of the property
    CL_CONTEXT_D3D10_DEVICE_KHR is non-`NULL` and does not specify a valid
    Direct3D 10 device with which the _cl_device_ids_ against which this
    context is to be created may interoperate.
  * CL_INVALID_OPERATION if Direct3D 10 interoperability is specified by
    setting CL_INVALID_D3D10_DEVICE_KHR to a non-`NULL` value, and
    interoperability with another graphics API is also specified.

Add to the list of errors for *clCreateContextFromType* the same new errors
described above for *clCreateContext*.

Add the following row to _table 4.6_:

[cols="2,1,2",options="header",]
|====
| *cl_context_info*
| *Return Type*
| *Information returned in param_value*

| *CL_CONTEXT_D3D10_PREFER_SHARED_RESOURCES_KHR*
| *cl_bool*
| Returns CL_TRUE if Direct3D 10 resources created as shared by setting
  _MiscFlags_ to include D3D10_RESOURCE_MISC_SHARED will perform faster when
  shared with OpenCL, compared with resources which have not set this flag.
  Otherwise returns CL_FALSE.
|====

[[cl_khr_d3d10_sharing-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.2 Specification

Add to the list of errors for *clGetMemObjectInfo*:

  * CL_INVALID_D3D10_RESOURCE_KHR if _param_name_ is
    CL_MEM_D3D10_RESOURCE_KHR and _memobj_ was not created by the function
    *clCreateFromD3D10BufferKHR*, *clCreateFromD3D10Texture2DKHR*, or
    *clCreateFromD3D10Texture3DKHR*.

Extend _table 5.12_ to include the following entry.

[cols="2,1,2",options="header",]
|====
| *cl_mem_info*
| *Return type*
| *Info. returned in _param_value_*

| *CL_MEM_D3D10_RESOURCE_KHR*
| ID3D10Resource *
| If _memobj_ was created using *clCreateFromD3D10BufferKHR*,
  *clCreateFromD3D10Texture2DKHR*, or *clCreateFromD3D10Texture3DKHR*,
  returns the _resource_ argument specified when _memobj_ was created.

|====

Add to the list of errors for *clGetImageInfo*:

  * CL_INVALID_D3D10_RESOURCE_KHR if _param_name_ is
    CL_MEM_D3D10_SUBRESOURCE_KHR and _image_ was not created by the function
    *clCreateFromD3D10Texture2DKHR*, or *clCreateFromD3D10Texture3DKHR*.

Extend _table 5.9_ to include the following entry.

[cols="2,1,2",options="header",]
|====
| *cl_image_info*
| *Return type*
| *Info. returned in _param_value_*

| *CL_MEM_D3D10_SUBRESOURCE_KHR*
| UINT
| If _image_ was created using *clCreateFromD3D10Texture2DKHR*, or
  *clCreateFromD3D10Texture3DKHR*, returns the _subresource_ argument
  specified when _image_ was created.
|====

Add to _table 5.22_ in the *Info returned in <param_value>* column for
_cl_event_info_ = CL_EVENT_COMMAND_TYPE:

----
CL_COMMAND_ACQUIRE_D3D10_OBJECTS_KHR
CL_COMMAND_RELEASE_D3D10_OBJECTS_KHR
----

[[cl_khr_d3d10_sharing-sharing-memory-objects-with-direct3d-10-resources]]
=== Sharing Memory Objects with Direct3D 10 Resources

This section discusses OpenCL functions that allow applications to use
Direct3D 10 resources as OpenCL memory objects.
This allows efficient sharing of data between OpenCL and Direct3D 10.
The OpenCL API may be used to execute kernels that read and/or write memory
objects that are also Direct3D 10 resources.
An OpenCL image object may be created from a Direct3D 10 texture resource.
An OpenCL buffer object may be created from a Direct3D 10 buffer resource.
OpenCL memory objects may be created from Direct3D 10 objects if and only if
the OpenCL context has been created from a Direct3D 10 device.

[[cl_khr_d3d10_sharing-querying-opencl-devices-corresponding-to-direct3d-10-devices]]
==== Querying OpenCL Devices Corresponding to Direct3D 10 Devices

The OpenCL devices corresponding to a Direct3D 10 device may be queried.
The OpenCL devices corresponding to a DXGI adapter may also be queried.
The OpenCL devices corresponding to a Direct3D 10 device will be a subset of
the OpenCL devices corresponding to the DXGI adapter against which the
Direct3D 10 device was created.

The OpenCL devices corresponding to a Direct3D 10 device or a DXGI device
may be queried using the function
indexterm:[clGetDeviceIDsFromD3D10KHR]
[source,c]
----
cl_int clGetDeviceIDsFromD3D10KHR(cl_platform_id platform,
                                  cl_d3d10_device_source_khr d3d_device_source,
                                  void *d3d_object,
                                  cl_d3d10_device_set_khr d3d_device_set,
                                  cl_uint num_entries,
                                  cl_device_id *devices,
                                  cl_uint *num_devices)
----

_platform_ refers to the platform ID returned by *clGetPlatformIDs*.

_d3d_device_source_ specifies the type of _d3d_object_, and must be one of
the values shown in the table below.

_d3d_object_ specifies the object whose corresponding OpenCL devices are
being queried.
The type of _d3d_object_ must be as specified in the table below.

_d3d_device_set_ specifies the set of devices to return, and must be one of
the values shown in the table below.

_num_entries_ is the number of cl_device_id entries that can be added to
_devices_.
If _devices_ is not `NULL` then _num_entries_ must be greater than zero.

_devices_ returns a list of OpenCL devices found.
The cl_device_id values returned in _devices_ can be used to identify a
specific OpenCL device.
If _devices_ is `NULL`, this argument is ignored.
The number of OpenCL devices returned is the minimum of the value specified
by _num_entries_ and the number of OpenCL devices corresponding to
_d3d_object_.

_num_devices_ returns the number of OpenCL devices available that correspond
to _d3d_object_.
If _num_devices_ is `NULL`, this argument is ignored.

*clGetDeviceIDsFromD3D10KHR* returns CL_SUCCESS if the function is executed
successfully.
Otherwise it may return

  * CL_INVALID_PLATFORM if _platform_ is not a valid platform.
  * CL_INVALID_VALUE if _d3d_device_source_ is not a valid value,
    _d3d_device_set_ is not a valid value, _num_entries_ is equal to zero
    and _devices_ is not `NULL`, or if both _num_devices_ and _devices_ are
    `NULL`.
  * CL_DEVICE_NOT_FOUND if no OpenCL devices that correspond to _d3d_object_
    were found.

[[cl_khr_d3d10_sharing-clGetDeviceIDsFromD3D10KHR-object-type]]
._Direct3D 10 object types that may be used by_ *clGetDeviceIDsFromD3D10KHR*
[cols=",",options="header",]
|====
| *cl_d3d_device_source_khr*
| *Type of _d3d_object_*

| CL_D3D10_DEVICE_KHR
| ID3D10Device *

| CL_D3D10_DXGI_ADAPTER_KHR
| IDXGIAdapter *

|====

[[cl_khr_d3d10_sharing-clGetDeviceIDsFromD3D10KHR-devices]]
._Sets of devices queriable using_ *clGetDeviceIDsFromD3D10KHR*
[cols=",",options="header",]
|====
| *cl_d3d_device_set_khr*
| *Devices returned in _devices_*

| CL_PREFERRED_DEVICES_FOR_D3D10_KHR
| The preferred OpenCL devices associated with the specified Direct3D
  object.

| CL_ALL_DEVICES_FOR_D3D10_KHR
| All OpenCL devices which may interoperate with the specified Direct3D
  object.
  Performance of sharing data on these devices may be considerably less than
  on the preferred devices.

|====

[[cl_khr_d3d10_sharing-lifetime-of-shared-objects]]
==== Lifetime of Shared Objects

An OpenCL memory object created from a Direct3D 10 resource remains valid as
long as the corresponding Direct3D 10 resource has not been deleted.
If the Direct3D 10 resource is deleted through the Direct3D 10 API,
subsequent use of the OpenCL memory object will result in undefined
behavior, including but not limited to possible OpenCL errors, data
corruption, and program termination.

The successful creation of a cl_context against a Direct3D 10 device
specified via the context create parameter CL_CONTEXT_D3D10_DEVICE_KHR will
increment the internal Direct3D reference count on the specified Direct3D 10
device.
The internal Direct3D reference count on that Direct3D 10 device will be
decremented when the OpenCL reference count on the returned OpenCL context
drops to zero.

The OpenCL context and corresponding command-queues are dependent on the
existence of the Direct3D 10 device from which the OpenCL context was
created.
If the Direct3D 10 device is deleted through the Direct3D 10 API, subsequent
use of the OpenCL context will result in undefined behavior, including but
not limited to possible OpenCL errors, data corruption, and program
termination.

[[cl_khr_d3d10_sharing-sharing-direct3d-10-buffer-resources-as-opencl-buffer-objects]]
==== Sharing Direct3D 10 Buffer Resources as OpenCL Buffer Objects

The function
indexterm:[clCreateFromD3D10BufferKHR]
[source,c]
----
cl_mem clCreateFromD3D10BufferKHR(cl_context context,
                                  cl_mem_flags flags,
                                  ID3D10Buffer *resource,
                                  cl_int *errcode_ret)
----

creates an OpenCL buffer object from a Direct3D 10 buffer.

_context_ is a valid OpenCL context created from a Direct3D 10 device.

_flags_ is a bit-field that is used to specify usage information.
Refer to _table 5.3_ for a description of _flags_.
Only CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and CL_MEM_READ_WRITE values
specified in _table 5.3_ can be used.

_resource_ is a pointer to the Direct3D 10 buffer to share.

_errcode_ret_ will return an appropriate error code.
If _errcode_ret_ is `NULL`, no error code is returned.

*clCreateFromD3D10BufferKHR* returns a valid non-zero OpenCL buffer object
and _errcode_ret_ is set to CL_SUCCESS if the buffer object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context.
  * CL_INVALID_VALUE if values specified in _flags_ are not valid.
  * CL_INVALID_D3D10_RESOURCE_KHR if _resource_ is not a Direct3D 10 buffer
    resource, if _resource_ was created with the D3D10_USAGE flag
    D3D10_USAGE_IMMUTABLE, if a cl_mem from _resource_ has already been
    created using *clCreateFromD3D10BufferKHR*, or if _context_ was not
    created against the same Direct3D 10 device from which _resource_ was
    created.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The size of the returned OpenCL buffer object is the same as the size of
_resource_.
This call will increment the internal Direct3D reference count on
_resource_.
The internal Direct3D reference count on _resource_ will be decremented when
the OpenCL reference count on the returned OpenCL memory object drops to
zero.

[[cl_khr_d3d10_sharing-sharing-direct3d-10-texture-and-resources-as-opencl-image-objects]]
==== Sharing Direct3D 10 Texture and Resources as OpenCL Image Objects

The function
indexterm:[clCreateFromD3D10Texture2DKHR]
[source,c]
----
cl_mem clCreateFromD3D10Texture2DKHR(cl_context context,
                                     cl_mem_flags flags,
                                     ID3D10Texture2D *resource,
                                     UINT subresource,
                                     cl_int *errcode_ret)
----

creates an OpenCL 2D image object from a subresource of a Direct3D 10 2D
texture.

_context_ is a valid OpenCL context created from a Direct3D 10 device.

_flags_ is a bit-field that is used to specify usage information.
Refer to _table 5.3_ for a description of _flags_.
Only CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and CL_MEM_READ_WRITE values
specified in _table 5.3_ can be used.

_resource_ is a pointer to the Direct3D 10 2D texture to share.

_subresource_ is the subresource of _resource_ to share.

_errcode_ret_ will return an appropriate error code.
If _errcode_ret_ is `NULL`, no error code is returned.

*clCreateFromD3D10Texture2DKHR* returns a valid non-zero OpenCL image object
and _errcode_ret_ is set to CL_SUCCESS if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context.
  * CL_INVALID_VALUE if values specified in _flags_ are not valid or if
    _subresource_ is not a valid subresource index for _resource_.
  * CL_INVALID_D3D10_RESOURCE_KHR if _resource_ is not a Direct3D 10 texture
    resource, if _resource_ was created with the D3D10_USAGE flag
    D3D10_USAGE_IMMUTABLE, if _resource_ is a multisampled texture, if a
    cl_mem from subresource _subresource_ of _resource_ has already been
    created using *clCreateFromD3D10Texture2DKHR*, or if _context_ was not
    created against the same Direct3D 10 device from which _resource_ was
    created.
  * CL_INVALID_IMAGE_FORMAT_DESCRIPTOR if the Direct3D 10 texture format of
    _resource_ is not listed in the table
    <<cl_khr_d3d10_sharing-mapping-of-image-formats,_Direct3D 10 formats and
    corresponding OpenCL image formats_>> or if the Direct3D 10 texture
    format of _resource_ does not map to a supported OpenCL image format.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The width and height of the returned OpenCL 2D image object are determined
by the width and height of subresource _subresource_ of _resource_.
The channel type and order of the returned OpenCL 2D image object is
determined by the format of _resource_ by the table
<<cl_khr_d3d10_sharing-mapping-of-image-formats,_Direct3D 10 formats and
corresponding OpenCL image formats_>>.

This call will increment the internal Direct3D reference count on
_resource_.
The internal Direct3D reference count on _resource_ will be decremented when
the OpenCL reference count on the returned OpenCL memory object drops to
zero.

The function
indexterm:[clCreateFromD3D10Texture3DKHR]
[source,c]
----
cl_mem clCreateFromD3D10Texture3DKHR(cl_context context,
                                     cl_mem_flags flags,
                                     ID3D10Texture3D *resource,
                                     UINT subresource,
                                     cl_int *errcode_ret)
----

creates an OpenCL 3D image object from a subresource of a Direct3D 10 3D
texture.

_context_ is a valid OpenCL context created from a Direct3D 10 device.

_flags_ is a bit-field that is used to specify usage information.
Refer to table 5.3 for a description of _flags_.
Only CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY and CL_MEM_READ_WRITE values
specified in _table 5.3_ can be used.

_resource_ is a pointer to the Direct3D 10 3D texture to share.

_subresource_ is the subresource of _resource_ to share.

_errcode_ret_ will return an appropriate error code.
If _errcode_ret_ is `NULL`, no error code is returned.

*clCreateFromD3D10Texture3DKHR* returns a valid non-zero OpenCL image object
and _errcode_ret_ is set to CL_SUCCESS if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * CL_INVALID_CONTEXT if _context_ is not a valid context.
  * CL_INVALID_VALUE if values specified in _flags_ are not valid or if
    _subresource_ is not a valid subresource index for _resource_.
  * CL_INVALID_D3D10_RESOURCE_KHR if _resource_ is not a Direct3D 10 texture
    resource, if _resource_ was created with the D3D10_USAGE flag
    D3D10_USAGE_IMMUTABLE, if _resource_ is a multisampled texture, if a
    cl_mem from subresource _subresource_ of _resource_ has already been
    created using *clCreateFromD3D10Texture3DKHR*, or if _context_ was not
    created against the same Direct3D 10 device from which _resource_ was
    created.
  * CL_INVALID_IMAGE_FORMAT_DESCRIPTOR if the Direct3D 10 texture format of
    _resource_ is not listed in the table
    <<cl_khr_d3d10_sharing-mapping-of-image-formats,_Direct3D 10 formats and
    corresponding OpenCL image formats_>> or if the Direct3D 10 texture
    format of _resource_ does not map to a supported OpenCL image format.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The width, height and depth of the returned OpenCL 3D image object are
determined by the width, height and depth of subresource _subresource_ of
_resource_.
The channel type and order of the returned OpenCL 3D image object is
determined by the format of _resource_ by the table
<<cl_khr_d3d10_sharing-mapping-of-image-formats,_Direct3D 10 formats and
corresponding OpenCL image formats_>>.

This call will increment the internal Direct3D reference count on
_resource_.
The internal Direct3D reference count on _resource_ will be decremented when
the OpenCL reference count on the returned OpenCL memory object drops to
zero.

[[cl_khr_d3d10_sharing-mapping-of-image-formats]]
._Direct3D 10 formats and corresponding OpenCL image formats_
[cols=",",options="header",]
|====
| *DXGI format*
| *CL image format*

*(channel order, channel data type)*

| DXGI_FORMAT_R32G32B32A32_FLOAT | CL_RGBA, CL_FLOAT
| DXGI_FORMAT_R32G32B32A32_UINT  | CL_RGBA, CL_UNSIGNED_INT32
| DXGI_FORMAT_R32G32B32A32_SINT  | CL_RGBA, CL_SIGNED_INT32
|                                |
| DXGI_FORMAT_R16G16B16A16_FLOAT | CL_RGBA, CL_HALF_FLOAT
| DXGI_FORMAT_R16G16B16A16_UNORM | CL_RGBA, CL_UNORM_INT16
| DXGI_FORMAT_R16G16B16A16_UINT  | CL_RGBA, CL_UNSIGNED_INT16
| DXGI_FORMAT_R16G16B16A16_SNORM | CL_RGBA, CL_SNORM_INT16
| DXGI_FORMAT_R16G16B16A16_SINT  | CL_RGBA, CL_SIGNED_INT16
|                                |
| DXGI_FORMAT_B8G8R8A8_UNORM     | CL_BGRA, CL_UNORM_INT8
| DXGI_FORMAT_R8G8B8A8_UNORM     | CL_RGBA, CL_UNORM_INT8
| DXGI_FORMAT_R8G8B8A8_UINT      | CL_RGBA, CL_UNSIGNED_INT8
| DXGI_FORMAT_R8G8B8A8_SNORM     | CL_RGBA, CL_SNORM_INT8
| DXGI_FORMAT_R8G8B8A8_SINT      | CL_RGBA, CL_SIGNED_INT8
|                                |
| DXGI_FORMAT_R32G32_FLOAT       | CL_RG, CL_FLOAT
| DXGI_FORMAT_R32G32_UINT        | CL_RG, CL_UNSIGNED_INT32
| DXGI_FORMAT_R32G32_SINT        | CL_RG, CL_SIGNED_INT32
|                                |
| DXGI_FORMAT_R16G16_FLOAT       | CL_RG, CL_HALF_FLOAT
| DXGI_FORMAT_R16G16_UNORM       | CL_RG, CL_UNORM_INT16
| DXGI_FORMAT_R16G16_UINT        | CL_RG, CL_UNSIGNED_INT16
| DXGI_FORMAT_R16G16_SNORM       | CL_RG, CL_SNORM_INT16
| DXGI_FORMAT_R16G16_SINT        | CL_RG, CL_SIGNED_INT16
|                                |
| DXGI_FORMAT_R8G8_UNORM         | CL_RG, CL_UNORM_INT8
| DXGI_FORMAT_R8G8_UINT          | CL_RG, CL_UNSIGNED_INT8
| DXGI_FORMAT_R8G8_SNORM         | CL_RG, CL_SNORM_INT8
| DXGI_FORMAT_R8G8_SINT          | CL_RG, CL_SIGNED_INT8
|                                |
| DXGI_FORMAT_R32_FLOAT          | CL_R, CL_FLOAT
| DXGI_FORMAT_R32_UINT           | CL_R, CL_UNSIGNED_INT32
| DXGI_FORMAT_R32_SINT           | CL_R, CL_SIGNED_INT32
|                                |
| DXGI_FORMAT_R16_FLOAT          | CL_R, CL_HALF_FLOAT
| DXGI_FORMAT_R16_UNORM          | CL_R, CL_UNORM_INT16
| DXGI_FORMAT_R16_UINT           | CL_R, CL_UNSIGNED_INT16
| DXGI_FORMAT_R16_SNORM          | CL_R, CL_SNORM_INT16
| DXGI_FORMAT_R16_SINT           | CL_R, CL_SIGNED_INT16
|                                |
| DXGI_FORMAT_R8_UNORM           | CL_R, CL_UNORM_INT8
| DXGI_FORMAT_R8_UINT            | CL_R, CL_UNSIGNED_INT8
| DXGI_FORMAT_R8_SNORM           | CL_R, CL_SNORM_INT8
| DXGI_FORMAT_R8_SINT            | CL_R, CL_SIGNED_INT8
|====

[[cl_khr_d3d10_sharing-querying-direct3d-properties-of-memory-objects-created-from-direct3d-10-resources]]
==== Querying Direct3D properties of memory objects created from Direct3D 10 resources

Properties of Direct3D 10 objects may be queried using *clGetMemObjectInfo*
and *clGetImageInfo* with _param_name_ CL_MEM_D3D10_RESOURCE_KHR and

CL_IMAGE_D3D10_SUBRESOURCE_KHR respectively as described in _sections 5.4.3_
and _5.3.6_.

[[cl_khr_d3d10_sharing-sharing-memory-objects-created-from-direct3d-10-resources-between-direct3d-10-and-opencl-contexts]]
==== Sharing memory objects created from Direct3D 10 resources between Direct3D 10 and OpenCL contexts

The function
indexterm:[clEnqueueAcquireD3D10ObjectsKHR]
[source,c]
----
cl_int clEnqueueAcquireD3D10ObjectsKHR(cl_command_queue command_queue,
                                       cl_uint num_objects,
                                       const cl_mem *mem_objects,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
----

is used to acquire OpenCL memory objects that have been created from
Direct3D 10 resources.
The Direct3D 10 objects are acquired by the OpenCL context associated with
_command_queue_ and can therefore be used by all command-queues associated
with the OpenCL context.

OpenCL memory objects created from Direct3D 10 resources must be acquired
before they can be used by any OpenCL commands queued to a command-queue.
If an OpenCL memory object created from a Direct3D 10 resource is used while
it is not currently acquired by OpenCL, the call attempting to use that
OpenCL memory object will return CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR.

If CL_CONTEXT_INTEROP_USER_SYNC is not specified as CL_TRUE during context
creation, *clEnqueueAcquireD3D10ObjectsKHR* provides the synchronization
guarantee that any Direct3D 10 calls involving the interop device(s) used in
the OpenCL context made before *clEnqueueAcquireD3D10ObjectsKHR* is called
will complete executing before _event_ reports completion and before the
execution of any subsequent OpenCL work issued in _command_queue_ begins.
If the context was created with properties specifying
CL_CONTEXT_INTEROP_USER_SYNC as CL_TRUE, the user is responsible for
guaranteeing that any Direct3D 10 calls involving the interop device(s) used
in the OpenCL context made before *clEnqueueAcquireD3D10ObjectsKHR* is
called have completed before calling *clEnqueueAcquireD3D10ObjectsKHR.*

_command_queue_ is a valid command-queue.

_num_objects_ is the number of memory objects to be acquired in
_mem_objects_.

_mem_objects_ is a pointer to a list of OpenCL memory objects that were
created from Direct3D 10 resources.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this particular command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The events specified in _event_wait_list_ act as synchronization points.

_event_ returns an event object that identifies this particular command and
can be used to query or queue a wait for this particular command to
complete.
_event_ can be `NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.
If the _event_wait_list_ and the _event_ arguments are not `NULL`, the
_event_ argument should not refer to an element of the _event_wait_list_
array.

*clEnqueueAcquireD3D10ObjectsKHR* returns CL_SUCCESS if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` then the function does
nothing and returns CL_SUCCESS.
Otherwise it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects or if memory objects in _mem_objects_ have not
    been created from Direct3D 10 resources.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_CONTEXT if context associated with _command_queue_ was not
    created from an Direct3D 10 context.
  * CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR if memory objects in
    _mem_objects_ have previously been acquired using
    *clEnqueueAcquireD3D10ObjectsKHR* but have not been released using
    *clEnqueueReleaseD3D10ObjectsKHR*.
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

The function
indexterm:[clEnqueueReleaseD3D10ObjectsKHR]
[source,c]
----
cl_int clEnqueueReleaseD3D10ObjectsKHR(cl_command_queue command_queue,
                                       cl_uint num_objects,
                                       const cl_mem *mem_objects,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
----

is used to release OpenCL memory objects that have been created from
Direct3D 10 resources.
The Direct3D 10 objects are released by the OpenCL context associated with
_command_queue_.

OpenCL memory objects created from Direct3D 10 resources which have been
acquired by OpenCL must be released by OpenCL before they may be accessed by
Direct3D 10.
Accessing a Direct3D 10 resource while its corresponding OpenCL memory
object is acquired is in error and will result in undefined behavior,
including but not limited to possible OpenCL errors, data corruption, and
program termination.

If CL_CONTEXT_INTEROP_USER_SYNC is not specified as CL_TRUE during context
creation, *clEnqueueReleaseD3D10ObjectsKHR* provides the synchronization
guarantee that any calls to Direct3D 10 calls involving the interop
device(s) used in the OpenCL context made after the call to
*clEnqueueReleaseD3D10ObjectsKHR* will not start executing until after all
events in _event_wait_list_ are complete and all work already submitted to
_command_queue_ completes execution.
If the context was created with properties specifying
CL_CONTEXT_INTEROP_USER_SYNC as CL_TRUE, the user is responsible for
guaranteeing that any Direct3D 10 calls involving the interop device(s) used
in the OpenCL context made after *clEnqueueReleaseD3D10ObjectsKHR* will not
start executing until after event returned by
*clEnqueueReleaseD3D10ObjectsKHR* reports completion.

_num_objects_ is the number of memory objects to be released in
_mem_objects_.

_mem_objects_ is a pointer to a list of OpenCL memory objects that were
created from Direct3D 10 resources.

_event_wait_list_ and _num_events_in_wait_list_ specify events that need to
complete before this particular command can be executed.
If _event_wait_list_ is `NULL`, then this particular command does not wait
on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by
_event_wait_list_ must be valid and _num_events_in_wait_list_ must be
greater than 0.
The event specified by _event_ returns an event object that identifies this
particular command and can be used to query or queue a wait for this
particular command to complete.
_event_ can be `NULL` in which case it will not be possible for the
application to query the status of this command or queue a wait for this
command to complete.
If the _event_wait_list_ and the _event_ arguments are not `NULL`, the
_event_ argument should not refer to an element of the _event_wait_list_
array.

*clEnqueueReleaseD3D10ObjectsKHR* returns CL_SUCCESS if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` the function does nothing
and returns CL_SUCCESS.
Otherwise it returns one of the following errors:

  * CL_INVALID_VALUE if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * CL_INVALID_MEM_OBJECT if memory objects in _mem_objects_ are not valid
    OpenCL memory objects or if memory objects in _mem_objects_ have not
    been created from Direct3D 10 resources.
  * CL_INVALID_COMMAND_QUEUE if _command_queue_ is not a valid
    command-queue.
  * CL_INVALID_CONTEXT if context associated with _command_queue_ was not
    created from a Direct3D 10 device.
  * CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR if memory objects in _mem_objects_
    have not previously been acquired using
    *clEnqueueAcquireD3D10ObjectsKHR*, or have been released using
    *clEnqueueReleaseD3D10ObjectsKHR* since the last time that they were
    acquired.
  * CL_INVALID_EVENT_WAIT_LIST if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    __num_events_in_wait_list__> is 0, or if event objects in
    _event_wait_list_ are not valid events.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

[[cl_khr_d3d10_sharing-issues]]
=== Issues

  . Should this extension be KHR or EXT?
+
--
PROPOSED: KHR.
If this extension is to be approved by Khronos then it should be KHR,
otherwise EXT.
Not all platforms can support this extension, but that is also true of
OpenGL interop.

RESOLVED: KHR.
--

  . Requiring SharedHandle on ID3D10Resource
+
--
Requiring this can largely simplify things at the DDI level and make some
implementations faster.
However, the DirectX spec only defines the shared handle for a subset of the
resources we would like to support:

----
D3D10_RESOURCE_MISC_SHARED - Enables the sharing of resource data between
two or more Direct3D devices.
The only resources that can be shared are 2D non-mipmapped textures.
----

PROPOSED A: Add wording to the spec about some implementations needing the
resource setup as shared:

"`Some implementations may require the resource to be shared on the D3D10
side of the API`"

If we do that, do we need another enum to describe this failure case?

PROPOSED B: Require that all implementations support both shared and
non-shared resources.
The restrictions prohibiting multisample textures and the flag
D3D10_USAGE_IMMUTABLE guarantee software access to all shareable resources.

RESOLVED: Require that implementations support both
D3D10_RESOURCE_MISC_SHARED being set and not set.
Add the query for CL_CONTEXT_D3D10_PREFER_SHARED_RESOURCES_KHR to determine
on a per-context basis which method will be faster.
--

  . Texture1D support
+
--
There is not a matching CL type, so do we want to support this and map to
buffer or Texture2D? If so the command might correspond to the 2D / 3D
versions:

[source,c]
----
cl_mem clCreateFromD3D10Texture1D(cl_context context,
                                  cl_mem_flags flags,
                                  ID3D10Texture2D *resource,
                                  UINT subresource,
                                  cl_int *errcode_ret)
----

RESOLVED: We will not add support for ID3D10Texture1D objects unless a
corresponding OpenCL 1D Image type is created.
--

  . CL/D3D10 queries
+
--
The GL interop has clGetGLObjectInfo and clGetGLTextureInfo.
It is unclear if these are needed on the D3D10 interop side since the D3D10
spec makes these queries trivial on the D3D10 object itself.
Also, not all of the semantics of the GL call map across.

PROPOSED: Add the *clGetMemObjectInfo* and *clGetImageInfo* parameter names
CL_MEM_D3D10_RESOURCE_KHR and CL_IMAGE_D3D10_SUBRESOURCE_KHR to query the
D3D10 resource from which a cl_mem was created.
From this data, any D3D10 side information may be queried using the D3D10
API.

RESOLVED: We will use *clGetMemObjectInfo* and *clGetImageInfo* to access
this information.
--
