// Copyright 2017-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_expect_assume]]
== Kernel Optimization Hints

This extension adds mechanisms to provide information to the compiler that may improve the performance of some kernels.
Specifically, this extension adds the ability to:

* Tell the compiler the _expected_ value of a variable.
* Allow the compiler to _assume_ a condition is true.

These functions are not required for functional correctness.

The initial version of this extension extends the OpenCL SPIR-V environment to support new instructions for offline compilation tool chains.
Similar functionality may be provided by some OpenCL C online compilation tool chains, but formal support in OpenCL C is not required by the initial version of the extension.

=== General information

==== Name Strings

`cl_khr_expect_assume`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2021-11-10 | 1.0.0     | First assigned version.
|====

==== Dependencies

This extension is written against the OpenCL Specifications Version V3.0.8.

The initial version of this extension extends the OpenCL SPIR-V environment to support new instructions.
Please refer to the OpenCL SPIR-V Environment Specification that describes how this extension modifies the OpenCL SPIR-V environment.

=== Sample Code

Although this extension does not formally extend OpenCL C, the ability to provide _expect_ and _assume_ information is supported by many OpenCL C compiler tool chains.
The sample code below describes how to test for and provide _expect_ and _assume_ information to compilers based on Clang:

[source,opencl_c]
----
// __has_builtin is an optional compiler feature that is supported by Clang.
// If this feature is not supported, we will assume the builtin is not present.
#ifndef __has_builtin
#define __has_builtin(x)    0
#endif

kernel void test(global int* dst, global int* src)
{
    int value = src[get_global_id(0)];

    // Tell the compiler that the most likely source value is zero.
#if __has_builtin(__builtin_expect)
    value = __builtin_expect(value, 0);
#endif

    // Tell the compiler that the source value is non-negative.
    // Behavior is undefined if the source value is actually negative.
#if __has_builtin(__builtin_assume)
    __builtin_assume(value >= 0);
#endif

    dst[get_global_id(0)] = value % 4;
}
----
