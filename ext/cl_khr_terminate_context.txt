// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_terminate_context]]
== Terminating OpenCL contexts

Today, OpenCL provides an API to release a context.
This operation is done only after all queues, memory object, programs and
kernels are released, which in turn might wait for all ongoing operations to
complete.
However, there are cases in which a fast release is required, or release
operation cannot be done, as commands are stuck in mid execution.
An example of the first case can be program termination due to exception, or
quick shutdown due to low power.
Examples of the second case are when a kernel is running too long, or gets
stuck, or it may result from user action which makes the results of the
computation unnecessary.

In many cases, the driver or the device is capable of speeding up the
closure of ongoing operations when the results are no longer required in a
much more expedient manner than waiting for all previously enqueued
operations to finish.

This extension implements a new query to check whether a device can
terminate an OpenCL context and adds an API to terminate a context.

The extension name is *cl_khr_terminate_context*.

[[cl_khr_terminate_context-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.2 Specification

Add a new device property to _table 4.3_ in _section 4.2_.

[cols="3,2,4",options="header",]
|====
| *cl_device_info*
| *Return Type*
| *Description*

| *CL_DEVICE_TERMINATE_CAPABILITY_KHR*
| *cl_device_terminate_capability_khr*
| Describes the termination capability of the OpenCL device.
  This is a bit-field, where the following values are currently supported:

  CL_DEVICE_TERMINATE_CAPABILITY_CONTEXT_KHR - Indicates that context
  termination is supported.

|====

Add a new context property to _table 4.5_ in _section 4.4_.

[cols="3,2,4",options="header",]
|====
| *cl_context_properties enum*
| *Property value*
| *Description*

| *CL_CONTEXT_TERMINATE_KHR*
| *cl_bool*
| Specifies whether the context can be terminated.
  The default value is CL_FALSE.

|====

CL_CONTEXT_TERMINATE_KHR can be specified in the context properties only if
all devices associated with the context support the ability to support
context termination (i.e. CL_DEVICE_TERMINATE_CAPABILITY_CONTEXT_KHR is set
for CL_DEVICE_TERMINATE_CAPABILITY_KHR).
Otherwise, context creation fails with error code of CL_INVALID_PROPERTY.

The new function
indexterm:[clTerminateContextKHR]
[source,c]
----
cl_int clTerminateContextKHR(cl context context)
----

terminates all pending work associated with the context and renders all data
owned by the context invalid.
It is the responsibility of the application to release all objects
associated with the context being terminated.

When a context is terminated:

  * The execution status of enqueued commands will be CL_TERMINATED_KHR.
    Event objects can be queried using *clGetEventInfo*.
    Event callbacks can be registered and registered event callbacks will be
    called with _event_command_exec_status_ set to CL_TERMINATED_KHR.
    *clWaitForEvents* will return as immediately for commands associated
    with event objects specified in event_list.
    The status of user events can be set.
    Event objects can be retained and released.
    *clGetEventProfilingInfo* returns CL_PROFILING_INFO_NOT_AVAILABLE.
  * The context is considered to be terminated.
    A callback function registered when the context was created will be
    called.
    Only queries, retain and release operations can be performed on the
    context.
    All other APIs that use a context as an argument will return
    CL_CONTEXT_TERMINATED_KHR.
  * The contents of the memory regions of the memory objects is undefined.
    Queries, registering a destructor callback, retain and release
    operations can be performed on the memory objects.
  * Once a context has been terminated, all OpenCL API calls that create
    objects or enqueue commands will return CL_CONTEXT_TERMINATED_KHR.
    APIs that release OpenCL objects will continue to operate as though
    *clTerminateContextKHR* was not called.
  * The behavior of callbacks will remain unchanged, and will report
    appropriate error, if executing after termination of context.
    This behavior is similar to enqueued commands, after the command queue
    has become invalid.

*clTerminateContextKHR* returns CL_SUCCESS if the function is executed
successfully.
Otherwise, it returns one of the following errors:

  * CL_INVALID_CONTEXT if _context_ is not a valid OpenCL context.
  * CL_CONTEXT_TERMINATED_KHR if _context_ has already been terminated.
  * CL_INVALID_OPERATION if _context_ was not created with
    CL_CONTEXT_TERMNATE_KHR set to CL_TRUE.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

An implementation that supports this extension must be able to terminate
commands currently executing on devices or queued across all command-queues
associated with the context that is being terminated.
The implementation cannot implement this extension by waiting for currently
executing (or queued) commands to finish execution on devices associated
with this context (i.e. doing a *clFinish*).
