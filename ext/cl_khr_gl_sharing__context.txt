// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_gl_sharing]]
== Creating an OpenCL Context from an OpenGL Context or Share Group

[[cl_khr_gl_sharing-overview]]
=== Overview

This section describes the *cl_khr_gl_sharing* extension.
The section <<cl_khr_gl_sharing__memobjs,Creating OpenCL Memory Objects from
OpenGL Objects>> defines how to share data with texture and buffer objects
in a parallel OpenGL implementation, but does not define how the association
between an OpenCL context and an OpenGL context or share group is
established.
This extension defines optional attributes to OpenCL context creation
routines which associate a OpenGL context or share group object with a newly
created OpenCL context.

An OpenGL implementation supporting buffer objects and sharing of texture
and buffer object images with OpenCL is required by this extension.

[[cl_khr_gl_sharing-new-procedures-and-functions]]
=== New Procedures and Functions

[source,c]
----
cl_int clGetGLContextInfoKHR(const cl_context_properties *properties,
                             cl_gl_context_info param_name,
                             size_t param_value_size,
                             void *param_value,
                             size_t *param_value_size_ret);
----

[[cl_khr_gl_sharing-new-tokens]]
=== New Tokens

Returned by *clCreateContext*, *clCreateContextFromType*, and
*clGetGLContextInfoKHR* when an invalid OpenGL context or share group object
handle is specified in _properties_:

----
CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR
----

Accepted as the _param_name_ argument of *clGetGLContextInfoKHR*:

----
CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR
CL_DEVICES_FOR_GL_CONTEXT_KHR
----

Accepted as an attribute name in the _properties_ argument of
*clCreateContext* and *clCreateContextFromType*:

----
CL_GL_CONTEXT_KHR
CL_EGL_DISPLAY_KHR
CL_GLX_DISPLAY_KHR
CL_WGL_HDC_KHR
CL_CGL_SHAREGROUP_KHR
----

[[cl_khr_gl_sharing-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.2 Specification

In _section 4.4_, replace the description of _properties_ under
*clCreateContext* with:

"`_properties_ points to an attribute list, which is a array of ordered
<attribute name, value> pairs terminated with zero.
If an attribute is not specified in _properties_, then its default value
(listed in _table 4.5_) is used (it is said to be specified implicitly).
If _properties_ is `NULL` or empty (points to a list whose first value is
zero), all attributes take on their default values.

Attributes control sharing of OpenCL memory objects with OpenGL buffer,
texture, and renderbuffer objects.
Depending on the platform-specific API used to bind OpenGL contexts to the
window system, the following attributes may be set to identify an OpenGL
context:

  * When the CGL binding API is supported, the attribute
    CL_CGL_SHAREGROUP_KHR should be set to a CGLShareGroup handle to a CGL
    share group object.
  * When the EGL binding API is supported, the attribute CL_GL_CONTEXT_KHR
    should be set to an EGLContext handle to an OpenGL ES or OpenGL context,
    and the attribute CL_EGL_DISPLAY_KHR should be set to the EGLDisplay
    handle of the display used to create the OpenGL ES or OpenGL context.
  * When the GLX binding API is supported, the attribute CL_GL_CONTEXT_KHR
    should be set to a GLXContext handle to an OpenGL context, and the
    attribute CL_GLX_DISPLAY_KHR should be set to the Display handle of the
    X Window System display used to create the OpenGL context.
  * When the WGL binding API is supported, the attribute CL_GL_CONTEXT_KHR
    should be set to an HGLRC handle to an OpenGL context, and the attribute
    CL_WGL_HDC_KHR should be set to the HDC handle of the display used to
    create the OpenGL context.

Memory objects created in the context so specified may be shared with the
specified OpenGL or OpenGL ES context (as well as with any other OpenGL
contexts on the share list of that context, according to the description of
sharing in the GLX 1.4 and EGL 1.4 specifications, and the WGL documentation
for OpenGL implementations on Microsoft Windows), or with the explicitly
identified OpenGL share group for CGL.
If no OpenGL or OpenGL ES context or share group is specified in the
attribute list, then memory objects may not be shared, and calling any of
the commands described in <<cl_khr_gl_sharing__memobjs,Creating OpenCL
Memory Objects from OpenGL Objects>> will result in a
CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR error.`"

OpenCL / OpenGL sharing does not support the CL_CONTEXT_INTEROP_USER_SYNC
property defined in _table 4.5_.
Specifying this property when creating a context with OpenCL / OpenGL
sharing will return an appropriate error.

Add to _table 4.5_:

._OpenGL Sharing Context Creation Attributes_
[cols=",,",options="header",]
|====
| *Attribute Name*
| *Allowed Values*

  *(Default value is in bold)*
| *Description*

| CL_GL_CONTEXT_KHR
| *0*, OpenGL context handle
| OpenGL context to associated the OpenCL context with

| CL_CGL_SHAREGROUP_KHR
| *0*, CGL share group handle
| CGL share group to associate the OpenCL context with

| CL_EGL_DISPLAY_KHR
| *EGL_NO_DISPLAY*, EGLDisplay handle
| EGLDisplay an OpenGL context was created with respect to

| CL_GLX_DISPLAY_KHR
| *None*, X handle
| X Display an OpenGL context was created with respect to

| CL_WGL_HDC_KHR
| *0*, HDC handle
| HDC an OpenGL context was created with respect to
|====

Replace the first error in the list for *clCreateContext* with:

"`_errcode_ret_ returns CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR if a context
was specified by any of the following means:

  * A context was specified for an EGL-based OpenGL ES or OpenGL
    implementation by setting the attributes CL_GL_CONTEXT_KHR and
    CL_EGL_DISPLAY_KHR.
  * A context was specified for a GLX-based OpenGL implementation by setting
    the attributes CL_GL_CONTEXT_KHR and CL_GLX_DISPLAY_KHR.
  * A context was specified for a WGL-based OpenGL implementation by setting
    the attributes CL_GL_CONTEXT_KHR and CL_WGL_HDC_KHR

and any of the following conditions hold:

  * The specified display and context attributes do not identify a valid
    OpenGL or OpenGL ES context.
  * The specified context does not support buffer and renderbuffer objects.
  * The specified context is not compatible with the OpenCL context being
    created (for example, it exists in a physically distinct address space,
    such as another hardware device; or it does not support sharing data
    with OpenCL due to implementation restrictions).

_errcode_ret_ returns CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR if a share
group was specified for a CGL-based OpenGL implementation by setting the
attribute CL_CGL_SHAREGROUP_KHR, and the specified share group does not
identify a valid CGL share group object.

_errcode_ret_ returns CL_INVALID_OPERATION if a context was specified as
described above and any of the following conditions hold:

  * A context or share group object was specified for one of CGL, EGL, GLX,
    or WGL and the OpenGL implementation does not support that window-system
    binding API.
  * More than one of the attributes CL_CGL_SHAREGROUP_KHR,
    CL_EGL_DISPLAY_KHR, CL_GLX_DISPLAY_KHR, and CL_WGL_HDC_KHR is set to a
    non-default value.
  * Both of the attributes CL_CGL_SHAREGROUP_KHR and CL_GL_CONTEXT_KHR are
    set to non-default values.
  * Any of the devices specified in the _devices_ argument cannot support
    OpenCL objects which share the data store of an OpenGL object.

_errcode_ret_ returns CL_INVALID_PROPERTY if an attribute name other than
those specified in _table 4.5_ or if CL_CONTEXT_INTEROP_USER_SYNC is
specified in _properties_.`"

Replace the description of _properties_ under *clCreateContextFromType*
with:

"`_properties_ points to an attribute list whose format and valid contents
are identical to the *properties* argument of *clCreateContext*.`"

Replace the first error in the list for *clCreateContextFromType* with the
same two new errors described above for *clCreateContext*.

[[cl_khr_gl_sharing-additions-to-chapter-5]]
=== Additions to Chapter 5 of the OpenCL 2.2 Specification

Add a new section to describe the new API for querying OpenCL devices that
support sharing with OpenGL:

"`OpenCL device(s) corresponding to an OpenGL context may be queried.
Such a device may not always exist (for example, if an OpenGL context is
specified on a GPU not supporting OpenCL command queues, but which does
support shared CL/GL objects), and if it does exist, may change over time.
When such a device does exist, acquiring and releasing shared CL/GL objects
may be faster on a command queue corresponding to this device than on
command queues corresponding to other devices available to an OpenCL
context.

To query the currently corresponding device, use the function
indexterm:[clGetGLContextInfoKHR]
[source,c]
----
cl_int clGetGLContextInfoKHR(const cl_context_properties *properties,
                             cl_gl_context_info param_name,
                             size_t param_value_size,
                             void *param_value,
                             size_t *param_value_size_ret)
----

_properties_ points to an attribute list whose format and valid contents are
identical to the _properties_ argument of *clCreateContext*.
_properties_ must identify a single valid GL context or GL share group
object.

_param_name_ is a constant that specifies the device types to query, and
must be one of the values shown in the table below.

_param_value_ is a pointer to memory where the result of the query is
returned as described in the table below.
If _param_value_ is `NULL`, it is ignored.

_param_value_size_ specifies the size in bytes of memory pointed to by
_param_value_.
This size must be greater than or equal to the size of the return type
described in the table below.

_param_value_size_ret_ returns the actual size in bytes of data being
queried by _param_value_.
If _param_value_size_ret_ is `NULL`, it is ignored.

[[cl_khr_gl_sharing-clGetGLContextInfoKHR-table]]
._Supported Device Types for_ *clGetGLContextInfoKHR*
[cols="2,1,2",options="header",]
|====
| *param_name*
| *Return Type*
| *Information returned in param_value*

| CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR
| *cl_device_id*
| Return the OpenCL device currently associated with the specified OpenGL
  context.

| CL_DEVICES_FOR_GL_CONTEXT_KHR
| *cl_device_id[]*
| Return all OpenCL devices which may be associated with the specified
  OpenGL context.
|====

*clGetGLContextInfoKHR* returns CL_SUCCESS if the function is executed
successfully.
If no device(s) exist corresponding to _param_name_, the call will not fail,
but the value of _param_value_size_ret_ will be zero.

*clGetGLContextInfoKHR* returns CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR if a
context was specified by any of the following means:

  * A context was specified for an EGL-based OpenGL ES or OpenGL
    implementation by setting the attributes CL_GL_CONTEXT_KHR and
    CL_EGL_DISPLAY_KHR.
  * A context was specified for a GLX-based OpenGL implementation by setting
    the attributes CL_GL_CONTEXT_KHR and CL_GLX_DISPLAY_KHR.
  * A context was specified for a WGL-based OpenGL implementation by setting
    the attributes CL_GL_CONTEXT_KHR and CL_WGL_HDC_KHR.

and any of the following conditions hold:

  * The specified display and context attributes do not identify a valid
    OpenGL or OpenGL ES context.
  * The specified context does not support buffer and renderbuffer objects.
  * The specified context is not compatible with the OpenCL context being
    created (for example, it exists in a physically distinct address space,
    such as another hardware device; or it does not support sharing data
    with OpenCL due to implementation restrictions).

*clGetGLContextInfoKHR* returns CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR if a
share group was specified for a CGL-based OpenGL implementation by setting
the attribute CL_CGL_SHAREGROUP_KHR, and the specified share group does not
identify a valid CGL share group object.

*clGetGLContextInfoKHR* returns CL_INVALID_OPERATION if a context was
specified as described above and any of the following conditions hold:

  * A context or share group object was specified for one of CGL, EGL, GLX,
    or WGL and the OpenGL implementation does not support that window-system
    binding API.
  * More than one of the attributes CL_CGL_SHAREGROUP_KHR,
    CL_EGL_DISPLAY_KHR, CL_GLX_DISPLAY_KHR, and CL_WGL_HDC_KHR is set to a
    non-default value.
  * Both of the attributes CL_CGL_SHAREGROUP_KHR and CL_GL_CONTEXT_KHR are
    set to non-default values.
  * Any of the devices specified in the <devices> argument cannot support
    OpenCL objects which share the data store of an OpenGL object.

*clGetGLContextInfoKHR* returns CL_INVALID_VALUE if an attribute name other
than those specified in _table 4.5_ is specified in _properties_.

Additionally, *clGetGLContextInfoKHR* returns CL_INVALID_VALUE if
_param_name_ is not one of the values listed in the table
<<cl_khr_gl_sharing-clGetGLContextInfoKHR-table,_GL context information that
can be queried with_ *clGetGLContextInfoKHR*>>, or if the size in bytes
specified by _param_value_size_ is less than the size of the return type
shown in the table and _param_value_ is not a `NULL` value;
CL_OUT_OF_RESOURCES if there is a failure to allocate resources required by
the OpenCL implementation on the device; or CL_OUT_OF_HOST_MEMORY if there
is a failure to allocate resources required by the OpenCL implementation on
the host.`"

[[cl_khr_gl_sharing-issues]]
=== Issues

  . How should the OpenGL context be identified when creating an associated
    OpenCL context?
+
--
RESOLVED: by using a (display,context handle) attribute pair to identify an
arbitrary OpenGL or OpenGL ES context with respect to one of the
window-system binding layers EGL, GLX, or WGL, or a share group handle to
identify a CGL share group.
If a context is specified, it need not be current to the thread calling
clCreateContext*.

A previously suggested approach would use a single boolean attribute
CL_USE_GL_CONTEXT_KHR to allow creating a context associated with the
currently bound OpenGL context.
This may still be implemented as a separate extension, and might allow more
efficient acquire/release behavior in the special case where they are being
executed in the same thread as the bound GL context used to create the CL
context.
--

  . What should the format of an attribute list be?
+
--
After considerable discussion, we think we can live with a list of
<attribute name,value> pairs terminated by zero.
The list is passed as 'cl_context_properties *_properties'_, where
cl_context_properties is typedefed to be 'intptr_t' in cl.h.

This effectively allows encoding all scalar integer, pointer, and handle
values in the host API into the argument list and is analogous to the
structure and type of EGL attribute lists.
`NULL` attribute lists are also allowed.
Again as for EGL, any attributes not explicitly passed in the list will take
on a defined default value that does something reasonable.

Experience with EGL, GLX, and WGL has shown attribute lists to be a
sufficiently flexible and general mechanism to serve the needs of management
calls such as context creation.
It is not completely general (encoding floating-point and non-scalar
attribute values is not straightforward), and other approaches were
suggested such as opaque attribute lists with getter/setter methods, or
arrays of varadic structures.
--

  . What's the behavior of an associated OpenGL or OpenCL context when using
    resources defined by the other associated context, and that context is
    destroyed?
+
--
RESOLVED: OpenCL objects place a reference on the data store underlying the
corresponding GL object when they're created.
The GL name corresponding to that data store may be deleted, but the data
store itself remains so long as any CL object has a reference to it.
However, destroying all GL contexts in the share group corresponding to a CL
context results in implementation-dependent behavior when using a
corresponding CL object, up to and including program termination.
--

  . How about sharing with D3D?
+
--
Sharing between D3D and OpenCL should use the same attribute list mechanism,
though obviously with different parameters, and be exposed as a similar
parallel OpenCL extension.
There may be an interaction between that extension and this one since it's
not yet clear if it will be possible to create a CL context simultaneously
sharing GL and D3D objects.
--

  . Under what conditions will context creation fail due to sharing?
+
--
RESOLVED: Several cross-platform failure conditions are described (GL
context or CGL share group doesn't exist, GL context doesn't support types
of GL objects, GL context implementation doesn't allow sharing), but
additional failures may result due to implementation-dependent reasons and
should be added to this extension as such failures are discovered.
Sharing between OpenCL and OpenGL requires integration at the driver
internals level.
--

  . What command queues can *clEnqueueAcquire/ReleaseGLObjects* be placed
    on?
+
--
RESOLVED: All command queues.
This restriction is enforced at context creation time.
If any device passed to context creation cannot support shared CL/GL
objects, context creation will fail with a CL_INVALID_OPERATION error.
--

  . How can applications determine which command queue to place an
    Acquire/Release on?
+
--
RESOLVED: The *clGetGLContextInfoKHR* returns either the CL device currently
corresponding to a specified GL context (typically the display it's running
on), or a list of all the CL devices the specified context might run on
(potentially useful in multiheaded / "`virtual screen`" environments).
This command is not simply placed in <<cl_khr_gl_sharing__memobjs,Creating
OpenCL Memory Objects from OpenGL Objects>> because it relies on the same
property-list method of specifying a GL context introduced by this
extension.

If no devices are returned, it means that the GL context exists on an older
GPU not capable of running OpenCL, but still capable of sharing objects
between GL running on that GPU and CL running elsewhere.
--

  . What is the meaning of the CL_DEVICES_FOR_GL_CONTEXT_KHR query?
+
--
RESOLVED: The list of all CL devices that may ever be associated with a
specific GL context.
On platforms such as MacOS X, the "`virtual screen`" concept allows multiple
GPUs to back a single virtual display.
Similar functionality might be implemented on other windowing systems, such
as a transparent heterogenous multiheaded X server.
Therefore the exact meaning of this query is interpreted relative to the
binding layer API in use.
--
