// Copyright 2021-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[cl_khr_semaphore]]
== Semaphores (Provisional)

OpenCL provides {cl_event_TYPE} as a primary mechanism of synchronization between host and device as well as across devices.
While events can be waited on or can be passed as dependencies across work-submissions, they suffer from following limitations:

* They are immutable.

* They are not reusable.

This extension introduces a new type of synchronization object to represent semaphores that can be reused, waited on, and signaled multiple times by OpenCL work-submissions.

In particular, this extension defines:

* A new type called {cl_semaphore_khr_TYPE} to represent the semaphore objects.

* A new type called {cl_semaphore_properties_khr_TYPE} to specify metadata associated with semaphores.

* Routines to create, retain, and release semaphores.

* Routines to wait on and signal semaphore objects.

* Routine to query the properties of semaphore objects.

=== General Information

==== Name Strings

`cl_khr_semaphore`

==== Version History

[cols="1,1,3",options="header",]
|====
| *Date*     | *Version* | *Description*
| 2021-09-10 | 0.9.0     | Initial version (provisional).
|====

NOTE: This is a preview of an OpenCL provisional extension specification that has been Ratified under the Khronos Intellectual Property Framework. It is being made publicly available prior to being uploaded to the Khronos registry to enable review and feedback from the community. If you have feedback please create an issue on https://github.com/KhronosGroup/OpenCL-Docs/

==== Dependencies

This extension is written against the OpenCL Specification Version 3.0.8.

This extension requires OpenCL 1.2.

==== Contributors

// spell-checker: disable
Ajit Hakke-Patil,  NVIDIA +
Amit Rao, NVIDIA +
Balaji Calidas, QUALCOMM +
Ben Ashbaugh, INTEL +
Carsten Rohde, NVIDIA +
Christoph Kubisch, NVIDIA +
Debalina Bhattacharjee, NVIDIA +
James Jones,  NVIDIA +
Jason Ekstrand, INTEL +
Jeremy Kemp, IMAGINATION +
Joshua Kelly, QUALCOMM +
Karthik Raghavan Ravi, NVIDIA +
Kedar Patil, NVIDIA +
Kevin Petit, ARM +
Nikhil Joshi, NVIDIA +
Sharan Ashwathnarayan, NVIDIA +
Vivek Kini,  NVIDIA +
// spell-checker: enable

=== New Types

[source]
----
typedef struct _cl_semaphore_khr* cl_semaphore_khr;

typedef cl_properties cl_semaphore_properties_khr;
typedef cl_uint cl_semaphore_info_khr;
typedef cl_uint cl_semaphore_type_khr;
typedef cl_ulong cl_semaphore_payload_khr;
----

=== New API Functions

[source]
----
cl_semaphore_khr clCreateSemaphoreWithPropertiesKHR(
    cl_context context,
    const cl_semaphore_properties_khr *sema_props,
    cl_int *errcode_ret);

cl_int clEnqueueWaitSemaphoresKHR(
    cl_command_queue command_queue,
    cl_uint num_sema_objects,
    const cl_semaphore_khr *sema_objects,
    const cl_semaphore_payload_khr *sema_payload_list,
    cl_uint num_events_in_wait_list,
    const cl_event *event_wait_list,
    cl_event *event);

cl_int clEnqueueSignalSemaphoresKHR(
    cl_command_queue command_queue,
    cl_uint num_sema_objects,
    const cl_semaphore_khr *sema_objects,
    const cl_semaphore_payload_khr *sema_payload_list,
    cl_uint num_events_in_wait_list,
    const cl_event *event_wait_list,
    cl_event *event);

cl_int clGetSemaphoreInfoKHR(
    cl_semaphore_khr sema_object,
    cl_semaphore_info_khr param_name,
    size_t param_value_size,
    void *param_value,
    size_t *param_value_size_ret);

cl_int clReleaseSemaphoreKHR(cl_semaphore_khr sema_object);

cl_int clRetainSemaphoreKHR(cl_semaphore_khr sema_object);
----

=== New API Enums

Accepted value for the _param_name_ parameter to {clGetPlatformInfo} to query the semaphore types supported by an OpenCL platform:

[source]
----
CL_PLATFORM_SEMAPHORE_TYPES_KHR                             0x2036
----

Accepted value for the _param_name_ parameter to {clGetDeviceInfo} to query the semaphore types supported by an OpenCL device:

[source]
----
CL_DEVICE_SEMAPHORE_TYPES_KHR                               0x204C
----

Semaphore types:

[source]
----
CL_SEMAPHORE_TYPE_BINARY_KHR                                1
----

New attributes that can be passed as part of {cl_semaphore_info_khr_TYPE}:

[source]
----
CL_SEMAPHORE_CONTEXT_KHR                                    0x2039
CL_SEMAPHORE_REFERENCE_COUNT_KHR                            0x203A
CL_SEMAPHORE_PROPERTIES_KHR                                 0x203B
CL_SEMAPHORE_PAYLOAD_KHR                                    0x203C
----

// TODO: We don't need an enum assigned for CL_DEVICE_HANDLE_LIST_END_KHR and should just use 0.
// TODO: Do we need to define CL_DEVICE_HANDLE_LIST here or should it be in the external semaphore spec instead?

New attributes that can be passed as part of {cl_semaphore_info_khr_TYPE} or {cl_semaphore_properties_khr_TYPE}:

[source]
----
CL_SEMAPHORE_TYPE_KHR                                       0x203D
CL_DEVICE_HANDLE_LIST_KHR                                   0x2051
CL_DEVICE_HANDLE_LIST_END_KHR                               0
----

New return values from {clGetEventInfo} when _param_name_ is {CL_EVENT_COMMAND_TYPE}:

[source]
----
CL_COMMAND_SEMAPHORE_WAIT_KHR                               0x2042
CL_COMMAND_SEMAPHORE_SIGNAL_KHR                             0x2043
----

// TODO: This error code is already allocated.  Use -1141 instead?

The following error codes can be returned by APIs introduced as part of this specification or the specifications that depend on this:
[source]
----
CL_INVALID_SEMAPHORE_KHR                                    -1142
----

=== Modifications to existing APIs added by this spec

Following new enums are added to the list of supported _param_names_ by {clGetPlatformInfo}:

.List of supported param_names by clGetPlatformInfo
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Platform Info | Return Type | Description
| {CL_PLATFORM_SEMAPHORE_TYPES_KHR}
  | {cl_semaphore_type_khr_TYPE}[]
      | Returns the list of the semaphore types supported all devices in _platform_.
|====

{clGetPlatformInfo} when called with _param_name_ {CL_PLATFORM_SEMAPHORE_TYPES_KHR} must return common list of semaphore types supported by all devices in the platform.

Following new enums are added to the list of supported _param_names_ by {clGetDeviceInfo}:

.List of supported param_names by clGetDeviceInfo
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Device Info | Return Type | Description
| {CL_DEVICE_SEMAPHORE_TYPES_KHR}
  | {cl_semaphore_type_khr_TYPE}[]
      | Returns the list of the semaphore types supported by _device_.
|====

{clGetDeviceInfo} when called with param_name {CL_DEVICE_SEMAPHORE_TYPES_KHR} must return a non-empty list of semaphore types for at least one of the devices in the platform.
The results of this query should meet minimum requirements for {cl_semaphore_type_khr_TYPE} as described by <<Description of new types added by this spec>>.

=== Description of new types added by this spec

Following new types are added:

* {cl_semaphore_type_khr_TYPE} to represent the different types of semaphores.
    ** It is mandatory to support {CL_SEMAPHORE_TYPE_BINARY_KHR}.

* {cl_semaphore_properties_khr_TYPE} to represent properties associated with semaphores.
    ** {CL_SEMAPHORE_TYPE_KHR} must be supported.

* {cl_semaphore_info_khr_TYPE} to represent queries to get additional information about semaphores.
    ** All enums described in New API Enums for {cl_semaphore_info_khr_TYPE} must be supported.

* {cl_semaphore_payload_khr_TYPE} to represent payload values of semaphores.

* {cl_semaphore_khr_TYPE} to represent semaphore objects.

Note that above types can be extended in future based on the need for additional types of semaphore and properties required by them.
The specifics of the same can be added as a newer version of this specification or by a separate specification that depends on this for basic semaphore support.

=== Description of new APIs added by this spec

The following new APIs are added as part of this spec. The details of each are described below:

==== Creating semaphores

A *semaphore object* may be created using the function

include::{generated}/api/protos/clCreateSemaphoreWithPropertiesKHR.txt[]

_context_ identifies a valid OpenCL context that the created {cl_semaphore_khr_TYPE} will belong to.

// TODO: Do we want the same "all devices in the context" behavior if CL_DEVICE_HANDLE_LIST_KHR is not specified?

_sema_props_ specifies additional semaphore properties in the form list of <property_name, property_value> pairs terminated with 0.
{CL_SEMAPHORE_TYPE_KHR} must be part of the list of properties specified by _sema_props_.

Following new properties are added to the list of possible supported properties by cl_semaphore_properties_khr that can be passed to {clCreateSemaphoreWithPropertiesKHR}:

.List of supported semaphore creation properties by clCreateSemaphoreWithPropertiesKHR
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Semaphore Property | Property Value | Description
| {CL_SEMAPHORE_TYPE_KHR}
  | {cl_semaphore_type_khr_TYPE}
      | Specifies the type of semaphore to create.
| {CL_DEVICE_HANDLE_LIST_KHR}
  | {cl_device_id_TYPE}[]
      | Specifies the list of OpenCL devices (terminated with {CL_DEVICE_HANDLE_LIST_END_KHR}) to associate with the semaphore.
|====

If {CL_DEVICE_HANDLE_LIST_KHR} is not specified as part of _sema_props_, the semaphore object created by {clCreateSemaphoreWithPropertiesKHR} is by default accessible to all devices in the _context_.

_errcode_ret_ returns an appropriate error code. If _errcode_ret_ is `NULL`, no error code is returned.

{clCreateSemaphoreWithPropertiesKHR} returns a valid semaphore object in an un-signaled state and and _errcode_ret_ is set to {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns a `NULL` value with one of the following error values returned in _errcode_ret_:

* {CL_INVALID_CONTEXT} if _context_ is not a valid context.
* {CL_INVALID_PROPERTY} if a property name in _sema_props_ is not a supported property name, if the value specified for a supported property name is not valid, or if the same property name is specified more than once.
* {CL_INVALID_DEVICE} if {CL_DEVICE_HANDLE_LIST_KHR} is specified as part of _sema_props_, but it does not identify a valid device or if a device identified by {CL_DEVICE_HANDLE_LIST_KHR} is not one of the devices within _context_.
* {CL_INVALID_VALUE}
** if _sema_props_ is `NULL`, or
** if _sema_props_ do not specify <property, value> pairs for minimum set of properties (i.e. {CL_SEMAPHORE_TYPE_KHR}) required for successful creation of a {cl_semaphore_khr_TYPE}, or
** if one or more properties and/or their values specified by _sema_props_ are not valid.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

==== Waiting on and signaling semaphores

To enqueue a command to wait on a set of semaphores, call the function

include::{generated}/api/protos/clEnqueueWaitSemaphoresKHR.txt[]

_command_queue_ specifies a valid command-queue.

_num_sema_objects_ specifies the number of semaphore objects to wait on.

_sema_objects_ points to the list of semaphore objects to wait on.
The length of the list must be at least _num_sema_objects_.

_sema_payload_list_ points to the list of values of type {cl_semaphore_payload_khr_TYPE} containing valid semaphore payload values to wait on.
This can be set to `NULL` or will be ignored when all semaphores in the list of _sema_objects_ are of type {CL_SEMAPHORE_TYPE_BINARY_KHR}.

_num_events_in_wait_list_ specifies the number of events in _event_wait_list_.

_event_wait_list_ specifies list of events that need to complete before {clEnqueueWaitSemaphoresKHR} can be executed.
If _event_wait_list_ is `NULL`, then {clEnqueueWaitSemaphoresKHR} does not wait on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by _event_wait_list_ must be valid and _num_events_in_wait_list_ must be greater than 0.
The events specified in _event_wait_list_ act as synchronization points.
The context associated with events in _event_wait_list_ and that associated with _command_queue_ must be the same.

_event_ returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete.
_event_ can be `NULL` in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.

The semaphore wait command waits for a list of events to complete and a list of semaphore objects to become signaled.
The semaphore wait command returns an _event_ which can be waited on to ensure that all events in the _event_wait_list_ have completed and all semaphores in _sema_objects_ have been signaled.
The successful completion of the event generated by {clEnqueueWaitSemaphoresKHR} called on one or more semaphore objects of type {CL_SEMAPHORE_TYPE_BINARY_KHR} leads to un-signaling the corresponding semaphore objects and the state of these semaphore objects will be reset. Any subsequent {clEnqueueWaitSemaphoresKHR} operation on these semaphores without a pending {clEnqueueSignalSemaphoresKHR} may lead to implementation-defined behavior.

{clEnqueueWaitSemaphoresKHR} returns {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_COMMAND_QUEUE}
** if _command_queue_ is not a valid command-queue, or
** if the device associated with _command_queue_ is not same as one of the devices specified by {CL_DEVICE_HANDLE_LIST_KHR} at the time of creating one or more of _sema_objects_, or
** if one or more of _sema_objects_ belong to a context that does not contain a device associated with_command_queue_, or
** if one or more of _sema_objects_ can not be shared with the device associated with _command_queue_.
* {CL_INVALID_VALUE} if _num_sema_objects_ is 0.
* {CL_INVALID_SEMAPHORE_KHR} if any of the semaphore objects specified by _sema_objects_ is not valid.
* {CL_INVALID_CONTEXT} if the context associated with _command_queue_ and any of the semaphore objects in _sema_objects_ are not the same or if the context associated with _command_queue_ and that associated with events in _event_wait_list_ are not the same.
* {CL_INVALID_VALUE} if any of the semaphore objects specified by _sema_objects_ requires a semaphore payload and _sema_payload_list_ is `NULL`.
* {CL_INVALID_EVENT_WAIT_LIST}
     ** if _event_wait_list_ is `NULL` and _num_events_in_wait_list_ is not 0, or
     ** if _event_wait_list_ is not `NULL` and _num_events_in_wait_list_ is 0, or
     ** if event objects in _event_wait_list_ are not valid events.
* {CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST} if the execution status of any of the events in _event_wait_list_ is a negative integer value.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

To enqueue a command to signal a set of semaphores, call the function

include::{generated}/api/protos/clEnqueueSignalSemaphoresKHR.txt[]

_command_queue_ specifies a valid command-queue.

_num_sema_objects_ specifies the number of semaphore objects to signal.

_sema_objects_ points to the list of semaphore objects to signal.
The length of the list must be at least _num_sema_objects_.

_sema_payload_list_ points to the list of values of type {cl_semaphore_payload_khr_TYPE} containing semaphore payload values to signal.
This can be set to `NULL` or will be ignored when all semaphores in the list of _sema_objects_ are of type {CL_SEMAPHORE_TYPE_BINARY_KHR}.

_num_events_in_wait_list_ specifies the number of events in event_wait_list.

_event_wait_list_ points to the list of events that need to complete before {clEnqueueSignalSemaphoresKHR} can be executed.
If _event_wait_list_ is `NULL`, then {clEnqueueSignalSemaphoresKHR} does not wait on any event to complete.
If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
If _event_wait_list_ is not `NULL`, the list of events pointed to by _event_wait_list_ must be valid and
_num_events_in_wait_list_ must be greater than 0.
The events specified in _event_wait_list_ act as synchronization points.
The context associated with events in _event_wait_list_ and that associated with _command_queue_ must be the same.

_event_ returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete.
_event_ can be `NULL` in which case it will not be possible for the application to query the status of this command
or queue a wait for this command to complete.

The semaphore signal command waits for a list of events to complete and then signals a list of semaphore objects.
The semaphore signal command returns an _event_ which can be waited on to ensure that all events in the _event_wait_list_ have completed and all semaphores in _sema_objects_ have been signaled.
The successful completion of the event generated by {clEnqueueSignalSemaphoresKHR} called on one or more semaphore objects of type {CL_SEMAPHORE_TYPE_BINARY_KHR} changes the state of the corresponding semaphore objects to signaled. Any subsequent {clEnqueueSignalSemaphoresKHR} operation on these semaphores without a pending {clEnqueueWaitSemaphoresKHR} may lead to implementation-defined behavior.

{clEnqueueSignalSemaphoresKHR} returns {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_COMMAND_QUEUE}
** if _command_queue_ is not a valid command-queue, or
** if device associated with _command_queue_ is not same as one of devices specified by {CL_DEVICE_HANDLE_LIST_KHR} at the time of creating one or more of _sema_objects_, or
** if one or more of _sema_objects_ belong to a context that does not contain a device associated _command_queue_, or
** if one or more of _sema_objects_ can not be shared with device associated with _command_queue_.
* {CL_INVALID_VALUE} if _num_sema_objects_ is 0
* {CL_INVALID_SEMAPHORE_KHR} if any of the semaphore objects specified by _sema_objects_ is not valid.
* {CL_INVALID_CONTEXT} if the context associated with _command_queue_ and any of the semaphore objects in _sema_objects_ are not the same or if the context associated with _command_queue_ and that associated with events in _event_wait_list_ are not the same.
* {CL_INVALID_VALUE} if any of the semaphore objects specified by _sema_objects_ requires a semaphore payload and _sema_payload_list_ is `NULL`.
* {CL_INVALID_EVENT_WAIT_LIST}
    ** if _event_wait_list_ is `NULL` and _num_events_in_wait_list_ is not 0, or
    ** if _event_wait_list_ is not `NULL` and _num_events_in_wait_list_ is 0, or
    ** if event objects in _event_wait_list_ are not valid events.
* {CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST} if the execution status of any of the events in _event_wait_list_ is a negative integer value.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

==== Semaphore Queries

To query information about a semaphore object, call the function

include::{generated}/api/protos/clGetSemaphoreInfoKHR.txt[]

_sema_object_ specifies the semaphore object being queried.

_param_name_ is a constant that specifies the semaphore information to query, and must be one of the values shown in <<cl_khr_semaphore_info-table>>.

_param_value_ is a pointer to memory where the result of the query is returned as described in <<cl_khr_semaphore_info-table>>. If _param_value_ is `NULL`, it is ignored.

_param_value_size_ specifies the size in bytes of memory pointed to _param_value_. This size must be greater than or equal to the size of the return type described in table <<cl_khr_semaphore_info-table>>.

_param_value_size_ret_ returns the actual size in bytes of data
being queried by _param_value_. If _param_value_size_ret_ is `NULL`, it is ignored.

[[cl_khr_semaphore_info-table]]
.List of supported param_names by clGetSemaphoreInfoKHR
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| Semaphore Info | Return Type | Description
| {CL_SEMAPHORE_CONTEXT_KHR}
  | {cl_context_TYPE}
      | Returns the context specified when the semaphore is created.

| {CL_SEMAPHORE_REFERENCE_COUNT_KHR} footnote:[{fn-reference-count-usage}]
  | {cl_uint_TYPE}
      | Returns the semaphore reference count.

| {CL_SEMAPHORE_PROPERTIES_KHR}
  | {cl_semaphore_properties_khr_TYPE}[]
      | Return the properties argument specified in
        {clCreateSemaphoreWithPropertiesKHR}.

        The implementation must return the values specified in the properties
        argument in the same order and without including additional properties.

| {CL_SEMAPHORE_TYPE_KHR}
  | {cl_semaphore_type_khr_TYPE}
      | Returns the semaphore type.

| {CL_SEMAPHORE_PAYLOAD_KHR}
  | {cl_semaphore_payload_khr_TYPE}
      | Returns the semaphore payload value. For semaphores of type
        {CL_SEMAPHORE_TYPE_BINARY_KHR}, the payload value returned will be `0`
        if the semaphore is in an un-signaled state and `1` if it is in a
        signaled state.

| {CL_DEVICE_HANDLE_LIST_KHR}
  | {cl_device_id_TYPE}[]
      | Returns the list of OpenCL devices the semaphore is associated with.
|====

{clGetSemaphoreInfoKHR} returns {CL_SUCCESS} if the information is queried successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_SEMAPHORE_KHR}
** if _sema_object_ is not a valid semaphore
* {CL_INVALID_VALUE}
** if _param_name_ is not one of the attribute defined in table <<cl_khr_semaphore_info-table>> or
** if _param_value_size_ is less than the size of Return Type of the corresponding _param_name_ attribute as defined in table <<cl_khr_semaphore_info-table>>.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

==== Retaining and Releasing Semaphores

To release a semaphore object, call the function

include::{generated}/api/protos/clReleaseSemaphoreKHR.txt[]

_sema_object_ specifies the semaphore object to be released.

The _sema_object_ reference count is decremented.

{clReleaseSemaphoreKHR} returns {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_SEMAPHORE_KHR} if _sema_object_ is not a valid semaphore object.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

After the reference count becomes zero and commands queued for execution on a
command-queue(s) that use _sema_object_ have finished, the semaphore object is
deleted.
Using this function to release a reference that was not obtained by creating the
object via {clCreateSemaphoreWithPropertiesKHR} or by calling
{clRetainSemaphoreKHR} causes undefined behavior.

To retain a semaphore object, call the function

include::{generated}/api/protos/clRetainSemaphoreKHR.txt[]

_sema_object_ specifies the semaphore object to be retained.

increments the reference count of _sema_object_.

{clRetainSemaphoreKHR} returns {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns one of the following errors:

* {CL_INVALID_SEMAPHORE_KHR} if _sema_object_ is not a valid semaphore object.
* {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.
* {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.

[[cl_khr_semaphore-Sample-Code]]
=== Sample Code

. Example for semaphore creation in a single device context
+
--
[source]
----
// Get cl_devices of the platform.
clGetDeviceIDs(..., &devices, &deviceCount);

// Create cl_context with just first device
context = clCreateContext(..., 1, devices, ...);

// Create clSema of type cl_semaphore_khr usable on single device in the context

cl_semaphore_properties_khr sema_props[] =
        {(cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_KHR,
         (cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_BINARY_KHR,
          0};

int errcode_ret = 0;

cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);
----
--

. Example for semaphore creation for a single device in a multi-device context
+
--
[source]
----
// Get cl_devices of the platform.
clGetDeviceIDs(..., &devices, &deviceCount);

// Create cl_context with first two devices
clCreateContext(..., 2, devices, ...);

// Create clSema of type cl_semaphore_khr usable only on devices[0]

cl_semaphore_properties_khr sema_props[] =
        {(cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_KHR,
         (cl_semaphore_properties_khr)CL_SEMAPHORE_TYPE_BINARY_KHR,
         (cl_semaphore_properties_khr)CL_DEVICE_HANDLE_LIST_KHR,
         (cl_semaphore_properties_khr)devices[0], CL_DEVICE_HANDLE_LIST_END_KHR,
          0};

int errcode_ret = 0;

cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);
----
--
. Example for synchronization using Wait and Signal
+
--
[source]
----
// clSema is created using clCreateSemaphoreWithPropertiesKHR
// using one of the examples for semaphore creation.

cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);

// Start the main loop

while (true) {
    // (not shown) Signal the semaphore from other work

    // Wait for the semaphore in OpenCL
    // by calling clEnqueueWaitSemaphoresKHR on 'clSema'
    clEnqueueWaitSemaphoresKHR(/*command_queue*/              command_queue,
                               /*num_sema_objects*/           1,
                               /*sema_objects*/               &clSema,
                               /*sema_payload_list*/          NULL,
                               /*num_events_in_wait_list*/    0,
                               /*event_wait_list*/            NULL,
                               /*event*/                      NULL);

    // Launch kernel that accesses extMem
    clEnqueueNDRangeKernel(command_queue, ...);

    // Signal the semaphore in OpenCL
    clEnqueueSignalSemaphoresKHR(/*command_queue*/              command_queue,
                                 /*num_sema_objects*/           1,
                                 /*sema_objects*/               &clSema,
                                 /*sema_payload_list*/          NULL,
                                 /*num_events_in_wait_list*/    0,
                                 /*event_wait_list*/            NULL,
                                 /*event*/                      NULL);

    // (not shown) Launch other work that waits on 'clSema'
}
----
--
. Example for {clGetSemaphoreInfoKHR}
+
--
[source]
----
// clSema is created using clCreateSemaphoreWithPropertiesKHR
// using one of the examples for semaphore creation.

cl_semaphore_khr clSema = clCreateSemaphoreWithPropertiesKHR(context,
                                                             sema_props,
                                                             &errcode_ret);

// Start the main rendering loop

while (true) {
    // (not shown) Signal the semaphore from other work

    // Wait for the semaphore in OpenCL, by calling clEnqueueWaitSemaphoresKHR on 'clSema'
    clEnqueueWaitSemaphoresKHR(/*command_queue*/              command_queue,
                               /*num_sema_objects*/           1,
                               /*sema_objects*/               &clSema,
                               /*sema_payload_list*/          NULL,
                               /*num_events_in_wait_list*/    0,
                               /*event_wait_list*/            NULL,
                               /*event*/                      NULL);

    // Launch kernel in OpenCL
    clEnqueueNDRangeKernel(command_queue, ...);

    // Signal the semaphore in OpenCL
    clEnqueueSignalSemaphoresKHR(/*command_queue*/              command_queue,
                                 /*num_sema_objects*/           1,
                                 /*sema_objects*/               &clSema,
                                 /*sema_payload_list*/          NULL,
                                 /*num_events_in_wait_list*/    0,
                                 /*event_wait_list*/            NULL,
                                 /*event*/                      NULL);

    // Query type of clSema
    clGetSemaphoreInfoKHR(/*sema_object*/           clSema,
                          /*param_name*/            CL_SEMAPHORE_TYPE_KHR,
                          /*param_value_size*/      sizeof(cl_semaphore_type_khr),
                          /*param_value*/           &clSemaType,
                          /*param_value_ret_size*/  &clSemaTypeSize);

    if (clSemaType == CL_SEMAPHORE_TYPE_BINARY_KHR) {
        // Do something
    }
    else {
        // Do something else
    }
    // (not shown) Launch other work that waits on 'clSema'
}
----
--
