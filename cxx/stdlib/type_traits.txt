// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[type-traits-library]]
=== Type Traits Library

OpenCL {cpp} supports type traits defined in {cpp14} specification with following changes:

  * the <<unary-type-traits, _Unary Type Traits_>> section describes additions and changes to _UnaryTypeTraits_.
  * the <<binary-type-traits, _Binary type traits_>> section describes additions and changes to _BinaryTypeTraits_.
  * the <<transformation-traits, _Transformation traits_>> section describes additions and changes to _TransformationTraits_.

This section specifies only OpenCL specific type traits and modifications.
All {cpp} type traits are described in _chapter 20.10 [meta]_ of {cpp14} standard.

[[header-opencl_type_traits-synopsis]]
==== Header <opencl_type_traits> Synopsis

[source]
----
namespace cl
{
// helper class:
template <class T, T v> struct integral_constant;
typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

// primary type categories:
template <class T> struct is_void;
template <class T> struct is_null_pointer;
template <class T> struct is_integral;
template <class T> struct is_floating_point;
template <class T> struct is_array;
template <class T> struct is_pointer;
template <class T> struct is_lvalue_reference;
template <class T> struct is_rvalue_reference;
template <class T> struct is_member_object_pointer;
template <class T> struct is_member_function_pointer;
template <class T> struct is_enum;
template <class T> struct is_union;
template <class T> struct is_class;
template <class T> struct is_function;

// composite type categories:
template <class T> struct is_reference;
template <class T> struct is_arithmetic;
template <class T> struct is_fundamental;
template <class T> struct is_object;
template <class T> struct is_scalar;
template <class T> struct is_compound;
template <class T> struct is_member_pointer;

// type properties:
template <class T> struct is_const;
template <class T> struct is_volatile;
template <class T> struct is_private;
template <class T> struct is_local;
template <class T> struct is_global;
template <class T> struct is_constant;
template <class T> struct is_generic;
template <class T> struct is_vector;
template <class T> struct is_trivial;
template <class T> struct is_trivially_copyable;
template <class T> struct is_standard_layout;
template <class T> struct is_pod;
template <class T> struct is_literal_type;
template <class T> struct is_empty;
template <class T> struct is_polymorphic;
template <class T> struct is_abstract;
template <class T> struct is_final;
template <class T> struct is_signed;
template <class T> struct is_unsigned;
template <class T, class... Args> struct is_constructible;
template <class T> struct is_default_constructible;
template <class T> struct is_copy_constructible;
template <class T> struct is_move_constructible;
template <class T, class U> struct is_assignable;
template <class T> struct is_copy_assignable;
template <class T> struct is_move_assignable;
template <class T> struct is_destructible;
template <class T, class... Args> struct is_trivially_constructible;
template <class T> struct is_trivially_default_constructible;
template <class T> struct is_trivially_copy_constructible;
template <class T> struct is_trivially_move_constructible;
template <class T, class U> struct is_trivially_assignable;
template <class T> struct is_trivially_copy_assignable;
template <class T> struct is_trivially_move_assignable;
template <class T> struct is_trivially_destructible;
template <class T, class... Args> struct is_nothrow_constructible;
template <class T> struct is_nothrow_default_constructible;
template <class T> struct is_nothrow_copy_constructible;
template <class T> struct is_nothrow_move_constructible;
template <class T, class U> struct is_nothrow_assignable;
template <class T> struct is_nothrow_copy_assignable;
template <class T> struct is_nothrow_move_assignable;
template <class T> struct is_nothrow_destructible;
template <class T> struct has_virtual_destructor;

// type property queries:
template <class T> struct alignment_of;
template <class T> struct rank;
template <class T, unsigned I = 0> struct extent;
// type relations:
template <class T, class U> struct is_same;
template <class Base, class Derived> struct is_base_of;
template <class From, class To> struct is_convertible;

// const-volatile modifications:
template <class T> struct remove_const;
template <class T> struct remove_volatile;
template <class T> struct remove_cv;
template <class T> struct add_const;
template <class T> struct add_volatile;
template <class T> struct add_cv;
template <class T>
using remove_const_t = typename remove_const<T>::type;
template <class T>
using remove_volatile_t = typename remove_volatile<T>::type;
template <class T>
using remove_cv_t = typename remove_cv<T>::type;
template <class T>
using add_const_t = typename add_const<T>::type;
template <class T>
using add_volatile_t = typename add_volatile<T>::type;
template <class T>
using add_cv_t = typename add_cv<T>::type;

// as modifications
template <class T> struct remove_constant;
template <class T> struct remove_local;
template <class T> struct remove_global;
template <class T> struct remove_private;
template <class T> struct remove_generic;
template <class T> struct remove_as;
template <class T> struct remove_attrs;
template <class T> struct add_constant;
template <class T> struct add_local;
template <class T> struct add_global;
template <class T> struct add_private;
template <class T> struct add_generic;
template <class T>
using remove_constant_t = typename remove_constant<T>::type;
template <class T>
using remove_local_t = typename remove_local<T>::type;
template <class T>
using remove_global_t = typename remove_global<T>::type;
template <class T>
using remove_private_t = typename remove_private<T>::type;
template <class T>
using remove_generic_t = typename remove_generic<T>::type;
template <class T>
using remove_as_t = typename remove_as<T>::type;
template <class T>
using remove_attrs_t = typename remove_attrs<T>::type;
template <class T>
using add_constant_t = typename add_constant<T>::type;
template <class T>
using add_local_t = typename add_local<T>::type;
template <class T>
using add_global_t = typename add_global<T>::type;
template <class T>
using add_private_t = typename add_private<T>::type;
template <class T>
using add_generic_t = typename add_generic<T>::type;

// reference modifications:
template <class T> struct remove_reference;
template <class T> struct add_lvalue_reference;
template <class T> struct add_rvalue_reference;
template <class T>
using remove_reference_t = typename remove_reference<T>::type;
template <class T>
using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;
template <class T>
using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

// sign modifications:
template <class T> struct make_signed;
template <class T> struct make_unsigned;
template <class T>
using make_signed_t = typename make_signed<T>::type;
template <class T>
using make_unsigned_t = typename make_unsigned<T>::type;

// array modifications:
template <class T> struct remove_extent;
template <class T> struct remove_all_extents;
template <class T>
using remove_extent_t = typename remove_extent<T>::type;
template <class T>
using remove_all_extents_t = typename remove_all_extents<T>::type;

// pointer modifications:
template <class T> struct remove_pointer;
template <class T> struct add_pointer;
template <class T>
using remove_pointer_t = typename remove_pointer<T>::type;
template <class T>
using add_pointer_t = typename add_pointer<T>::type;

// built-in vector queries
template <class T> struct is_vector_type;
template <class T> struct vector_size;

// built-in vector modifications
template <class T> struct vector_element;
template <class T, uint DIM> struct make_vector;
template <class T>
using vector_element_t = typename vector_element<T>::type;
template <class T, uint DIM>
using make_vector_t = typename make_vector<T,DIM>::type;

// other transformations:
template <cl::size_t Len,
cl::size_t Align = default-alignment>
struct aligned_storage;
template <cl::size_t Len, class... Types> struct aligned_union;
template <class T> struct decay;
template <bool, class T = void> struct enable_if;
template <bool, class T, class F> struct conditional;
template <class... T> struct common_type;
template <class T> struct underlying_type;
template <class> class result_of; // not defined
template <class F, class... ArgTypes> class result_of<F(ArgTypes...)>;
template <cl::size_t Len,
cl::size_t Align = default-alignment >
using aligned_storage_t = typename aligned_storage<Len,Align>::type;
template <cl::size_t Len, class... Types>
using aligned_union_t = typename aligned_union<Len,Types...>::type;
template <class T>
using decay_t = typename decay<T>::type;
template <bool b, class T = void>
using enable_if_t = typename enable_if<b,T>::type;
template <bool b, class T, class F>
using conditional_t = typename conditional<b,T,F>::type;
template <class... T>
using common_type_t = typename common_type<T...>::type;
template <class T>
using underlying_type_t = typename underlying_type<T>::type;
template <class T>
using result_of_t = typename result_of<T>::type;
template <class...>
using void_t = void;

}
----

[[unary-type-traits]]
==== Unary Type Traits

[[additional-type-property-predicates]]
===== Additional type property predicates

.Additional type property predicates
[width="100%",cols="50%,50%",options="header"]
|====
| *Template*
| *Condition*

| `template <class T> struct is_private;`
| Implementation defined.

| `template <class T> struct is_local;`
| Implementation defined.

| `template <class T> struct is_global;`
| Implementation defined.

| `template <class T> struct is_constant;`
| Implementation defined.

| `template <class T> struct is_generic;`
| Implementation defined.

| `template <class T> struct is_vector;`
| `T` is built-in vector type.
|====

[[additional-type-property-queries]]
===== Additional type property queries

.Additional type property queries
[width="100%",cols="50%,50%",options="header"]
|====
| *Template*
| *Value*

| `template <class T> struct vector_size;`
| If `T` names a built-in vector type, an integer value representing number of ``T``'s components; otherwise `1`.
|====

[[binary-type-traits]]
==== Binary type traits

[[changed-relationships-traits]]
===== Changed relationships traits

.Changed relationship traits
[width="100%",cols="50%,50%",options="header"]
|====
| *Template*
| *Condition*

| `template <class T, class U> struct is_same;`
| `T` and `U` name the same type with the same _cv qualifications_.
|====

[[transformation-traits]]
==== Transformation traits

[[address-space-and-vector-modifications]]
===== Address space and vector modifications

.Address space and vector traits
[width="100%",cols="50%,50%",options="header"]
|====
| *Template*
| *Comments*

| `template <class T> Xstruct remove_private;`
| Implementation defined.

| `template <class T> Xstruct remove_local;`
| Implementation defined.

| `template <class T> Xstruct remove_global;`
| Implementation defined.

| `template <class T> Xstruct remove_constant;`
| Implementation defined.

| `template <class T> Xstruct remove_generic;`
| Implementation defined.

| `template <class T> Xstruct remove_as;`
| Implementation defined.

| `template <class T> Xstruct remove_attrs;`
| Implementation defined.

| `template <class T> Xstruct add_private;`
| Implementation defined.

| `template <class T> Xstruct add_local;`
| Implementation defined.

| `template <class T> Xstruct add_global;`
| Implementation defined.

| `template <class T> Xstruct add_constant;`
| Implementation defined.

| `template <class T> Xstruct add_generic;`
| Implementation defined.

| `template <class T> Xstruct vector_element;`
| If `T` is a built-in vector type, member typedef `T` shall name type of ``T``'s component; otherwise it shall name `T`.

| `template <class T, size_t Dim> struct make_vector;`
| If type `U` exists and names a built-in vector type with `Dim` components of type `T`, member typedef type shall name `U`; otherwise it shall name `T`.
|====
