// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[relational-functions]]
=== Relational Functions

The relational and equality operators (`<`, `\<=`, `>`, `>=`, `!=`, `==`) can be used with scalar and vector built-in types and produce a scalar or vector boolean result respectively as described in the <<expressions, _Expressions_>> section.

Here `gentype` matches: `char__n__`, `uchar__n__`, `short__n__`, `ushort__n__`, `int__n__`, `uint__n__`, `long__n__`, `ulong__n__`, `half__n__` [[ftnref4]] <<ftn4,[4]>>, `float__n__` and `double__n__` [[ftnref18]] <<ftn18,[18]>>.

The relational functions `isequal`, `isgreater`, `isgreaterequal`, `isless`, `islessequal`, and `islessgreater` always return `false` if either argument is not a number (NaN).
`isnotequal` returns `true` if one or both arguments are not a number (NaN).

[[header-opencl_relational-synopsis]]
==== Header <opencl_relational> Synopsis

[source]
----
namespace cl
{
#ifdef cl_khr_fp16
booln isequal(halfn x, halfn y);
booln isnotequal(halfn x, halfn y);
booln isgreater(halfn x, halfn y);
booln isgreaterequal(halfn x, halfn y);
booln isless(halfn x, halfn y);
booln islessequal(halfn x, halfn y);
booln islessgreater(halfn x, halfn y);
booln isordered(halfn x, halfn y);
booln isunordered(halfn x, halfn y);
booln isfinite(halfn t);
booln isinf(halfn t);
booln isnan(halfn t);
booln isnormal(halfn t);
booln signbit(halfn t);

#endif

#ifdef cl_khr_fp64
booln isequal(doublen x, doublen y);
booln isnotequal(doublen x, doublen y);
booln isgreater(doublen x, doublen y);
booln isgreaterequal(doublen x, doublen y);
booln isless(doublen x, doublen y);
booln islessequal(doublen x, doublen y);
booln islessgreater(doublen x, doublen y);
booln isordered(doublen x, doublen y);
booln isunordered(doublen x, doublen y);
booln isfinite(doublen t);
booln isinf(doublen t);
booln isnan(doublen t);
booln isnormal(doublen t);
booln signbit(doublen t);

#endif //cl_khr_fp64

booln isequal(floatn x, floatn y);
booln isnotequal(floatn x, floatn y);
booln isgreater(floatn x, floatn y);
booln isgreaterequal(floatn x, floatn y);
booln isless(floatn x, floatn y);
booln islessequal(floatn x, floatn y);
booln islessgreater(floatn x, floatn y);
booln isordered(floatn x, floatn y);
booln isunordered(floatn x, floatn y);
booln isfinite(floatn t);
booln isinf(floatn t);
booln isnan(floatn t);
booln isnormal(floatn t);
booln signbit(floatn t);

bool any(booln t);
bool all(booln t);

gentype bitselect(gentype a, gentype b, gentype c);
gentype select(gentype a, gentype b, booln c);

}
----

[[comparison-operations]]
==== Comparison operations

[[isequal]]
===== isequal
[source]
----
booln isequal(gentype x, gentype y);
----

Returns the component-wise compare of `x == y`.

[[isnotequal]]
===== isnotequal
[source]
----
booln isnotequal(gentype x, gentype y);
----

Returns the component-wise compare of `x != y`.

[[isgreater]]
===== isgreater
[source]
----
booln isgreater(gentype x, gentype y);
----

Returns the component-wise compare of `x > y`.

[[isgreaterequal]]
===== isgreaterequal
[source]
----
booln isgreaterequal(gentype x, gentype y);
----

Returns the component-wise compare of `x >= y`.

[[isless]]
===== isless
[source]
----
booln isless(gentype x, gentype y);
----

Returns the component-wise compare of `x < y`.

[[islessequal]]
===== islessequal
[source]
----
booln islessequal(gentype x, gentype y);
----

Returns the component-wise compare of `x \<= y`.

[[islessgreater]]
===== islessgreater
[source]
----
booln islessgreater(gentype x, gentype y);
----

Returns the component-wise compare of `(x < y) || (x > y)`.

[[test-operations]]
==== Test operations

[[isfinite]]
===== isfinite
[source]
----
booln isfinite(gentype t);
----

Test for finite value.

[[isinf]]
===== isinf
[source]
----
booln isinf(gentype t);
----

Test for infinity value (positive or negative) .

[[isnan]]
===== isnan
[source]
----
booln isnan(gentype t);
----

Test for a NaN.

[[isnormal]]
===== isnormal
[source]
----
booln isnormal(gentype t);
----

Test for a normal value.

[[isordered]]
===== isordered
[source]
----
booln isordered(gentype x, gentype y);
----

Test if arguments are ordered.
`isordered()` takes arguments `x` and `y`, and returns the result of `isequal(x, x) && isequal(y, y)`.

[[isunordered]]
===== isunordered
[source]
----
booln isunordered(gentype x, gentype y);
----

Test if arguments are unordered.
`isunordered()` takes arguments `x` and `y`, returning `true` if `x` or `y` is NaN, and `false` otherwise.

[[signbit]]
===== signbit
[source]
----
booln signbit(gentype t);
----

Test for sign bit.
Returns a `true` if the sign bit in the float is set else returns `false`.

[[any]]
===== any
[source]
----
bool any(booln t);
----

Returns `true` if any component of `t` is `true`; otherwise returns `false`.

[[all]]
===== all
[source]
----
bool all(booln t);
----

Returns `true` if all components of `t` are `true`; otherwise returns `false`.

[[select-operations]]
==== Select operations

[[bitselect]]
===== bitselect
[source]
----
gentype bitselect(gentype a, gentype b, gentype c);
----

Each bit of the result is the corresponding bit of `a` if the corresponding bit of `c` is `0`.
Otherwise it is the corresponding bit of `b`.

[[select]]
===== select
[source]
----
gentype select(gentype a, gentype b, booln c);
----
For each component of a vector type,

`result[i] = c[i] ? b[i] : a[i]`.

For a scalar type,  `result = c ? b : a`.

`booln` must have the same number of elements as `gentype`.
