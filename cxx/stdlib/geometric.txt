// Copyright 2017-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[geometric-functions]]
=== Geometric Functions

This section describes the OpenCL {cpp} library geometric functions that take scalar or vector arguments.
Vector versions of geometric functions operate component-wise.
Descriptions are always per-component.
The geometric functions are implemented using the round to nearest even rounding mode.

`float__n__` is `float`, `float2`, `float3` or `float4`.

`half__n__` [[ftnref4]] <<ftn4,[4]>> is `half`, `half2`, `half3` or `half4`.

`double__n__` [[ftnref18]] <<ftn18,[18]>> is `double`, `double2`, `double3` or `double4`.

[[header-opencl_geometric-synopsis]]
==== Header <opencl_geometric> Synopsis
[source]
----
namespace cl
{
#ifdef cl_khr_fp16
half3 cross(half3 p0, half3 p1);
half4 cross(half4 p0, half4 p1);
half dot(half p0, half p1);
half dot(half2 p0, half2 p1);
half dot(half3 p0, half3 p1);
half dot(half4 p0, half4 p1);
half distance(half p0, half p1);
half distance(half2 p0, half2 p1);
half distance(half3 p0, half3 p1;
half distance(half4 p0, half4 p1);
half length(half t);
half length(half2 t);
half length(half3 t);
half length(half4 t);
half normalize(half t);
half2 normalize(half2 t);
half3 normalize(half3 t);
half4 normalize(half4 t);
#endif

#ifdef cl_khr_fp64
double3 cross(double3 p0, double3 p1);
double4 cross(double4 p0, double4 p1);
double dot(double p0, double p1);
double dot(double2 p0, double2 p1);
double dot(double3 p0, double3 p1);
double dot(double4 p0, double4 p1);
double distance(double p0, double p1);
double distance(double2 p0, double2 p1);
double distance(double3 p0, double3 p1);
double distance(double4 p0, double4 p1);
double length(double t);
double length(double2 t);
double length(double3 t);
double length(double4 t);
double normalize(double t);
double2 normalize(double2 t);
double3 normalize(double3 t);
double4 normalize(double4 t);
#endif

float3 cross(float3 p0, float3 p1);
float4 cross(float4 p0, float4 p1);
float dot(float p0, float p1);
float dot(float2 p0, float2 p1);
float dot(float3 p0, float3 p1);
float dot(float4 p0, float4 p1);
float distance(float p0, float p1);
float distance(float2 p0, float2 p1);
float distance(float3 p0, float3 p1);
float distance(float4 p0, float4 p1);
float length(float t);
float length(float2 t);
float length(float3 t);
float length(float4 t);
float normalize(float t);
float2 normalize(float2 t);
float3 normalize(float3 t);
float4 normalize(float4 t);

float fast_distance(float p0, float p1);
float fast_distance(float2 p0, float2 p1);
float fast_distance(float3 p0, float3 p1);
float fast_distance(float4 p0, float4 p1);
float fast_length(float t);
float fast_length(float2 t);
float fast_length(float3 t);
float fast_length(float4 t);
float fast_normalize(float t);
float2 fast_normalize(float2 t);
float3 fast_normalize(float3 t);
float4 fast_normalize(float4 t);

}
----

[[geometric-operations]]
==== Geometric operations

[[cross]]
===== cross
[source]
----
float4 cross(float4 p0, float4 p1);
float3 cross(float3 p0, float3 p1);
double4 cross(double4 p0, double4 p1);
double3 cross(double3 p0, double3 p1);
half4 cross(half4 p0, half4 p1);
half3 cross(half3 p0, half3 p1);
----

Returns the cross product of `p0.xyz` and `p1.xyz`.
The `w` component of `float4` result returned will be `0.0`.

[[dot]]
===== dot
[source]
----
float dot(floatn p0, floatn p1);
double dot(doublen p0, doublen p1);
half dot(halfn p0, halfn p1);
----

Compute dot product.

[[distance]]
===== distance
[source]
----
float distance(floatn p0, floatn p1);
double distance(doublen p0, doublen p1);
half distance(halfn p0, halfn p1);
----

Returns the distance between `p0` and `p1`.

This is calculated as `length(p0 - p1)`.

[[length]]
===== length
[source]
----
float length(floatn p);
double length(doublen p);
half length(halfn p);
----

Return the length of vector `p`, i.e.,
latexmath:[\sqrt{p.x^2 + p.y^2 + \ldots}]

[[normalize]]
===== normalize
[source]
----
floatn normalize(floatn p);
doublen normalize(doublen p);
halfn normalize(halfn p);
----

Returns a vector in the same direction as `p` but with a length of `1`.

[[fast_distance]]
===== fast_distance
[source]
----
float fast_distance(floatn p0, floatn p1);
----

Returns `fast_length(p0 - p1)`.

[[fast_length]]
===== fast_length
[source]
----
float fast_length(floatn p);
----

Returns the length of vector `p` computed as:
[source]
----
half_sqrt(p.x^2 + p.y^2 + ...)
----

[[fast_normalize]]
===== fast_normalize
[source]
----
floatn fast_normalize(floatn p);
----

Returns a vector in the same direction as `p` but with a length of 1.
`fast_normalize` is computed as:
[source]
----
p * half_rsqrt(p.x^2 + p.y^2 + ...)
----

The result shall be within 8192 ulps error from the infinitely precise result of

[source]
----
if (all(p == 0.0f))
 result = p;
else
 result = p / sqrt(p.x^2 + p.y^2 + ... );
----

with the following exceptions:

  * If the sum of squares is greater than `FLT_MAX` then the value of the floating-point values in the result vector are undefined.
  * If the sum of squares is less than `FLT_MIN` then the implementation may return back `p`.
  * If the device is in "`denorms are flushed to zero`" mode, individual operand elements with magnitude less than `sqrt(FLT_MIN)` may be flushed to zero before proceeding with the calculation.
