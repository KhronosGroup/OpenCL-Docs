// Copyright 2017-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[opencl_cxx_restrictions]]
=== Restrictions

The following {cpp14} features are not supported by OpenCL {cpp}:

  * the `dynamic_cast` operator (_ISO {cpp} Section 5.2.7_)
  * type identification (_ISO {cpp} Section 5.2.8_)
  * recursive function calls (_ISO {cpp} Section 5.2.2, item 9_) unless they are a compile-time constant expression
  * non-placement `new` and `delete` operators (_ISO {cpp} Sections 5.3.4 and 5.3.5_)
  * `register` and `thread_local` storage qualifiers (_ISO {cpp} Section 7.1.1_)
  * virtual function qualifier (_ISO {cpp} Section 7.1.2_)
  * function pointers (_ISO {cpp} Sections 8.3.5 and 8.5.3_) unless they are a compile-time  constant expression
  * virtual functions and abstract classes (_ISO {cpp} Sections 10.3 and 10.4_)
  * exception handling (_ISO {cpp} Section 15_)
  * the {cpp} standard library (_ISO {cpp} Sections 17 ... 30_)
  * no implicit lambda to function pointer conversion (_ISO {cpp} Section 5.1.2, item 6_)
  * variadic functions (_ISO C99 Section 7.15, Variable arguments <stdarg.h>_)
  * and, like {cpp}, OpenCL {cpp} does not support variable length arrays (_ISO C99, Section 6.7.5_)
  * whether irreducible control flow is legal is implementation defined.

To avoid potential confusion with the above, please note the following features _are_ supported in OpenCL {cpp}:

  * All variadic templates (_ISO {cpp} Section 14.5.3_) including variadic function templates are supported.
  * Virtual inheritance (_ISO {cpp} Section 10.1, item 4_) is supported.

NOTE: This page refers to _ISO C99_ instead of _ISO C11_ since the _ISO {cpp14}_ document refers to _ISO C99_ in _ISO {cpp} Section 1.2 and Annex C_.

