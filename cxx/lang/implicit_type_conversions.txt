// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[implicit-type-conversions]]
=== Implicit Type Conversions

Implicit conversions between scalar built-in types defined in <<device_builtin_scalar_data_types,Device built-in scalar data types>> table (except `void`) are supported.
When an implicit conversion is done, it is not just a re-interpretation of the expression's value, but a conversion of that value to an equivalent value in the new type.
For example, the integer value 5 will be converted to the floating-point value 5.0.

Implicit conversions from a scalar type to a vector type are allowed.
In this case, the scalar may be subject to the usual arithmetic conversion to the element type used by the vector.
The scalar type is then widened to the vector.
If conversion from a scalar type to the element type used by the vector result in truncation or precision loss, the program is ill-formed, with the exception that:

  * if scalar value is prvalue of literal type and the value is representable as the element type, the conversion should take place without error (warnings may be generated in this case).

Implicit conversions between built-in vector data types are disallowed.
Explicit conversions described in the <<conversions-library, _Conversions Library_>> section must be used instead.

Implicit conversions for pointer types follow the rules described in the {cpp14} specification.
