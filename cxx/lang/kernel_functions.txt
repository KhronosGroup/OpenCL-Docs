// Copyright 2017-2018 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[kernel-functions]]
=== Kernel Functions

[[function-qualifiers]]
==== Function Qualifiers

The `kernel` (or `__kernel`) qualifier declares a function to be a kernel that can be executed by an application on an OpenCL device(s).
The following rules apply to functions that are declared with this qualifier:

  * It can be executed on the device only.
  * It can be enqueued by the host or on the device.

The `kernel` and `__kernel` names are reserved for use as functions qualifiers and shall not be used otherwise.

[[restrictions]]
==== Restrictions

[[kernel-function-restrictions]]
===== Kernel Function Restrictions

  * Kernel functions are implicitly declared as `extern "C"`.
  * Kernel functions cannot be overloaded.
  * Kernel functions cannot be template functions.
  * Kernel functions cannot be called by other kernel functions.
  * Kernel functions cannot have parameters specified with default values.
  * Kernel functions must have the return type `void`.
  * Kernel functions cannot be called `main`.

[[kernel-parameter-restrictions]]
===== Kernel Parameter Restrictions

The OpenCL host compiler and the OpenCL {cpp} kernel language device compiler can have different requirements for i.e. type sizes, data packing and alignment, etc., therefore the kernel parameters must meet the following requirements:

  * Types passed by pointer or reference must be standard layout types.
  * Types passed by value must be POD types.
  * Types cannot be declared with the built-in `bool` scalar type, vector type or a class that contain `bool` scalar or vector type fields.
  * Types cannot be structures or classes with bit field members.
  * Marker types must be passed by value (see the <<marker-types, _Marker Types_>> section).
  * `global`, `constant`, and `local` storage classes can be passed only by reference or pointer. More details in the <<explicit-address-space-storage-classes,_Explicit address space storage classes_>> section.
  * Pointers and references must point to one of the following address spaces: global, local or constant.
