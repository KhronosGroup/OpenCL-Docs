// Copyright 2017-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[relative-error-as-ulps]]
=== Relative Error as ULPs

In this section we discuss the maximum relative error defined as ulp (units in the last place).
Addition, subtraction, multiplication, fused multiply-add and conversion between integer and a single precision floating-point format are IEEE 754 compliant and are therefore correctly rounded.
Conversion between floating-point formats and explicit conversions specified in the <<conversions-library, _Conversions Library_>> section must be correctly rounded.

The ULP is defined as follows:

====
If x is a real number that lies between two finite consecutive floating-point numbers a and b, without being equal to one of them, then ulp(x) = |b - a|, otherwise ulp(x) is the distance between the two non-equal finite floating-point numbers nearest x.
Moreover, ulp(NaN) is NaN.
====

_Attribution: This definition was taken with consent from Jean-Michel Muller
with slight clarification for behavior at zero._

====
Jean-Michel Muller. On the definition of ulp(x). RR-5504, INRIA. 2005, pp.16. <inria-00070503>
Currently hosted at
https://hal.inria.fr/inria-00070503/document[https://hal.inria.fr/inria-00070503/document].
====

<<ulp_values_for_single_precision_builtin_math_functions,ULP values for single precision built-in math functions>> [[ftnref31]] <<ftn31,[31]>> table describes the minimum accuracy of single precision floating-point arithmetic operations given as ULP values.
The reference value used to compute the ULP value of an arithmetic operation is the infinitely precise result.

[[ulp_values_for_single_precision_builtin_math_functions]]
.ULP values for single precision built-in math functions
[width="100%",cols="50%,50%",options="header"]
|====
| *Function*
| *Min Accuracy - ULP values [[ftnref32]] <<ftn32,[32]>>*

| _x_ + _y_
| Correctly rounded

| _x_ - _y_
| Correctly rounded

| _x_ * _y_
| Correctly rounded

| 1.0  / _x_
| \<= 2.5 ulp

| _x_ / _y_
| \<= 2.5 ulp

| acos
| \<= 4 ulp

| acospi
| \<= 5 ulp

| asin
| \<= 4 ulp

| asinpi
| \<= 5 ulp

| atan
| \<= 5 ulp

| atan2
| \<= 6 ulp

| atanpi
| \<= 5 ulp

| atan2pi
| \<= 6 ulp

| acosh
| \<= 4 ulp

| asinh
| \<= 4 ulp

| atanh
| \<= 5 ulp

| cbrt
| \<= 2 ulp

| ceil
| Correctly rounded

| copysign
| 0 ulp

| cos
| \<= 4 ulp

| cosh
| \<= 4 ulp

| cospi
| \<= 4 ulp

| erfc
| \<= 16 ulp

| erf
| \<= 16 ulp

| exp
| \<= 3 ulp

| exp2
| \<= 3 ulp

| exp10
| \<= 3 ulp

| expm1
| \<= 3 ulp

| fabs
| 0 ulp

| fdim
| Correctly rounded

| floor
| Correctly rounded

| fma
| Correctly rounded

| fmax
| 0 ulp

| fmin
| 0 ulp

| fmod
| 0 ulp

| fract
| Correctly rounded

| frexp
| 0 ulp

| hypot
| \<= 4 ulp

| ilogb
| 0 ulp

| ldexp
| Correctly rounded

| log
| \<= 3 ulp

| log2
| \<= 3 ulp

| log10
| \<= 3 ulp

| log1p
| \<= 2 ulp

| logb
| 0 ulp

| mad
| Implemented either as a correctly rounded fma or as a multiply followed by an add both of which are correctly rounded

| maxmag
| 0 ulp

| minmag
| 0 ulp

| modf
| 0 ulp

| nan
| 0 ulp

| nextafter
| 0 ulp

| pow(x, y)
| \<= 16 ulp

| pown(x, y)
| \<= 16 ulp

| powr(x, y)
| \<= 16 ulp

| remainder
| 0 ulp

| remquo
| 0 ulp

| rint
| Correctly rounded

| rootn
| \<= 16 ulp

| round
| Correctly rounded

| rsqrt
| \<= 2 ulp

| sin
| \<= 4 ulp

| sincos
| \<= 4 ulp for sine and cosine values

| sinh
| \<= 4 ulp

| sinpi
| \<= 4 ulp

| sqrt
| \<= 3 ulp

| tan
| \<= 5 ulp

| tanh
| \<= 5 ulp

| tanpi
| \<= 6 ulp

| tgamma
| \<= 16 ulp

| trunc
| Correctly rounded

| native_math::cos
| Implementation-defined

| native_math::divide
| Implementation-defined

| native_math::exp
| Implementation-defined

| native_math::exp2
| Implementation-defined

| native_math::exp10
| Implementation-defined

| native_math::log
| Implementation-defined

| native_math::log2
| Implementation-defined

| native_math::log10
| Implementation-defined

| native_math::powr
| Implementation-defined

| native_math::recip
| Implementation-defined

| native_math::rsqrt
| Implementation-defined

| native_math::sin
| Implementation-defined

| native_math::sqrt
| Implementation-defined

| native_math::tan
| Implementation-defined
|====

<<ulp_values_for_single_precision_builtin_math_functions_for_embedded_profile,ULP values for single precision builtin math functions for embedded profile>> table describes the minimum accuracy of single precision floating-point arithmetic operations given as ULP values for the embedded profile.
The reference value used to compute the ULP value of an arithmetic operation is the infinitely precise result.

[[ulp_values_for_single_precision_builtin_math_functions_for_embedded_profile]]
.ULP values for single precision built-in math functions for embedded profile
[width="100%",cols="50%,50%",options="header"]
|====
| *Function*
| *Min Accuracy - ULP values <<ftn32,[32]>>*

| _x_ + _y_
| Correctly rounded

| _x_ - _y_
| Correctly rounded

| _x_ * _y_
| Correctly rounded

| 1.0  / _x_
| \<= 3 ulp

| _x_ / _y_
| \<= 3 ulp

| acos
| \<= 4 ulp

| acospi
| \<= 5 ulp

| asin
| \<= 4 ulp

| asinpi
| \<= 5 ulp

| atan
| \<= 5 ulp

| atan2
| \<= 6 ulp

| atanpi
| \<= 5 ulp

| atan2pi
| \<= 6 ulp

| acosh
| \<= 4 ulp

| asinh
| \<= 4 ulp

| atanh
| \<= 5 ulp

| cbrt
| \<= 4 ulp

| ceil
| Correctly rounded

| copysign
| 0 ulp

| cos
| \<= 4 ulp

| cosh
| \<= 4 ulp

| cospi
| \<= 4 ulp

| erfc
| \<= 16 ulp

| erf
| \<= 16 ulp

| exp
| \<= 4 ulp

| exp2
| \<= 4 ulp

| exp10
| \<= 4 ulp

| expm1
| \<= 4 ulp

| fabs
| 0 ulp

| fdim
| Correctly rounded

| floor
| Correctly rounded

| fma
| Correctly rounded

| fmax
| 0 ulp

| fmin
| 0 ulp

| fmod
| 0 ulp

| fract
| Correctly rounded

| frexp
| 0 ulp

| hypot
| \<= 4 ulp

| ilogb
| 0 ulp

| ldexp
| Correctly rounded

| log
| \<= 4 ulp

| log2
| \<= 4 ulp

| log10
| \<= 4 ulp

| log1p
| \<= 4 ulp

| logb
| 0 ulp

| mad
| Any value allowed (infinite ulp)

| maxmag
| 0 ulp

| minmag
| 0 ulp

| modf
| 0 ulp

| nan
| 0 ulp

| nextafter
| 0 ulp

| pow(x, y)
| \<= 16 ulp

| pown(x, y)
| \<= 16 ulp

| powr(x, y)
| \<= 16 ulp

| remainder
| 0 ulp

| remquo
| 0 ulp

| rint
| Correctly rounded

| rootn
| \<= 16 ulp

| round
| Correctly rounded

| rsqrt
| \<= 4 ulp

| sin
| \<= 4 ulp

| sincos
| \<= 4 ulp for sine and cosine values

| sinh
| \<= 4 ulp

| sinpi
| \<= 4 ulp

| sqrt
| \<= 4 ulp

| tan
| \<= 5 ulp

| tanh
| \<= 5 ulp

| tanpi
| \<= 6 ulp

| tgamma
| \<= 16 ulp

| trunc
| Correctly rounded

| half_cos
| \<= 8192 ulp

| half_divide
| \<= 8192 ulp

| half_exp
| \<= 8192 ulp

| half_exp2
| \<= 8192 ulp

| half_exp10
| \<= 8192 ulp

| half_log
| \<= 8192 ulp

| half_log2
| \<= 8192 ulp

| half_log10
| \<= 8192 ulp

| half_powr
| \<= 8192 ulp

| half_recip
| \<= 8192 ulp

| half_rsqrt
| \<= 8192 ulp

| half_sin
| \<= 8192 ulp

| half_sqrt
| \<= 8192 ulp

| half_tan
| \<= 8192 ulp

| native_math::cos
| Implementation-defined

| native_math::divide
| Implementation-defined

| native_math::exp
| Implementation-defined

| native_math::exp2
| Implementation-defined

| native_math::exp10
| Implementation-defined

| native_math::log
| Implementation-defined

| native_math::log2
| Implementation-defined

| native_math::log10
| Implementation-defined

| native_math::powr
| Implementation-defined

| native_math::recip
| Implementation-defined

| native_math::rsqrt
| Implementation-defined

| native_math::sin
| Implementation-defined

| native_math::sqrt
| Implementation-defined

| native_math::tan
| Implementation-defined
|====

<<ulp_values_for_single_precision_builtin_math_functions_with_fast_relaxed_math,ULP values for single precision built-in math functions with unsafe math optimizations>> table describes the minimum accuracy of commonly used single precision floating-point arithmetic operations given as ULP values if the _-cl-unsafe-math-optimizations_ compiler option is specified when compiling or building an OpenCL program.
For derived implementations, the operations used in the derivation may themselves be relaxed according to <<ulp_values_for_single_precision_builtin_math_functions_with_fast_relaxed_math,ULP values for single precision built-in math functions with unsafe math optimizations>> table.
The minimum accuracy of math functions not defined in <<ulp_values_for_single_precision_builtin_math_functions_with_fast_relaxed_math,ULP values for single precision built-in math functions with unsafe math optimizations>> table when the _-cl-unsafe-math-optimizations_ compiler option is specified is as defined in <<ulp_values_for_single_precision_builtin_math_functions,ULP values for single precision built-in math functions>> table when operating in the full profile, and as defined in <<ulp_values_for_single_precision_builtin_math_functions_for_embedded_profile,ULP values for single precision built-in math functions for embedded profile>> table when operating in the embedded profile.
The reference value used to compute the ULP value of an arithmetic operation is the infinitely precise result.

[[ulp_values_for_single_precision_builtin_math_functions_with_fast_relaxed_math]]
.ULP values for single precision built-in math functions with unsafe math optimizations in the full and embedded profiles
[width="100%",cols="50%,50%",options="header"]
|====
| *Function*
| *Min Accuracy - ULP values <<ftn32,[32]>>*

| 1.0  / x
| \<= 2.5 ulp for x in the domain of 2^-126^ to 2^126^ for the full profile, and \<= 3 ulp for the embedded profile.

| x / y
| \<= 2.5 ulp for x in the domain of 2^-62^ to 2^62^ and _y_ in the domain of 2^-62^ to 2^62^ for the full profile, and \<= 3 ulp for the embedded profile.

| acos(x)
| \<= 4096 ulp

| acospi(x)
| Implemented as acos(x) * M_PI_F.
  For non-derived implementations, the error is \<= 8192 ulp.

| asin(x)
| \<= 4096 ulp

| asinpi(x)
| Implemented as asin(x) * M_PI_F.
  For non-derived implementations, the error is \<= 8192 ulp.

| atan(x)
| \<= 4096 ulp

| atan2(y, x)
| Implemented as atan(y/x) for x > 0, atan(y/x) + M_PI_F for x < 0 and y > 0 and atan(y/x) - M_PI_F for x < 0 and y < 0.

| atanpi(x)
| Implemented as atan(x) * M_1_PI_F.
  For non-derived implementations, the error is \<= 8192 ulp.

| atan2pi(y, x)
| Implemented as atan2(y, x) * M_1_PI_F.
  For non-derived implementations, the error is \<= 8192 ulp.

| acosh(x)
| Implemented as log( x + sqrt(x*x - 1) ).

| asinh(x)
| Implemented as log( x + sqrt(x*x + 1) ).

| atanh(x)
| Defined for x in the domain (-1, 1). For x in [-2^-10^, 2^-10^], implemented as x.
  For x outside of [-2^-10^, 2^-10^], implemented as 0.5f * log( (1.0f + x) / (1.0f - x) ).
  For non-derived implementations, the error is \<= 8192 ulp.

| cbrt(x)
| Implemented as rootn(x, 3).
  For non-derived implementations, the error is \<= 8192 ulp.

| cos(x)
| For x in the domain [-{pi}, {pi}], the maximum absolute error is \<= 2^-11^ and larger otherwise.

| cosh(x)
| Defined for x in the domain [-88, 88] and implemented as 0.5f * ( exp(x) + exp(-x) ).
  For non-derived implementations, the error is \<= 8192 ULP.

| cospi(x)
| For x in the domain [-1, 1], the maximum absolute error is \<= 2^-11^ and larger otherwise.

| exp(x)
| \<= 3 + floor( fabs(2 * x) ) ulp for the full profile, and \<= 4 ulp for the embedded profile.

| exp2(x)
| \<= 3 + floor( fabs(2 * x) ) ulp for the full profile, and \<= 4 ulp for the embedded profile.

| exp10(x)
| Derived implementations implement this as exp2( x * log2(10) ).
  For non-derived implementations, the error is \<= 8192 ulp.

| expm1(x)
| Derived implementations implement this as exp(x) - 1.
  For non-derived implementations, the error is \<= 8192 ulp.

| log(x)
| For x in the domain [0.5, 2] the maximum absolute error is \<= 2^-21^; otherwise the maximum error is \<=3 ulp for the full profile and \<= 4 ulp for the embedded profile

| log2(x)
| For x in the domain [0.5, 2] the maximum absolute error is \<= 2^-21^; otherwise the maximum error is \<=3 ulp for the full profile and \<= 4 ulp for the embedded profile

| log10(x)
| For x in the domain [0.5, 2] the maximum absolute error is \<= 2^-21^; otherwise the maximum error is \<=3 ulp for the full profile and \<= 4 ulp for the embedded profile

| log1p(x)
| Derived implementations implement this as log(x + 1).
  For non-derived implementations, the error is \<= 8192 ulp.

| pow(x, y)
| Undefined for x = 0 and y = 0.
  Undefined for x < 0 and non-integer y.
  Undefined for x < 0 and y outside the domain [-2^24^, 2^24^].
  For x > 0 or x < 0 and even y, derived implementations implement this as exp2( y * log2( fabs(x) ) ).
  For x < 0 and odd y, derived implementations implement this as -exp2( y * log2( fabs(x) ) [[ftnref33]] <<ftn33,[33]>>.
  For x == 0 and nonzero y, derived implementations return zero.
  For non-derived implementations, the error is \<= 8192 ULP.

| pown(x, y)
| Defined only for integer values of y.
  Undefined for x = 0 and y = 0.
  For x >= 0 or x < 0 and even y, derived implementations implement this as exp2( y * log2( fabs(x) ) ).
  For x < 0 and odd y, derived implementations implement this as -exp2( y * log2( fabs(x) ) ).
  For non-derived implementations, the error is \<= 8192 ulp.

| powr(x, y)
| Defined only for x >= 0.
  Undefined for x = 0 and y = 0.
  Derived implementations implement this as exp2( y * log2(x) ).
  For non-derived implementations, the error is \<= 8192 ulp.

| rootn(x, y)
| Defined for x > 0 when y is non-zero, derived implementations implement this case as exp2( log2(x) / y ). Defined for x < 0 when y is odd, derived implementations implement this case as -exp2( log2(-x) / y ).
  Defined for x = +/-0 when y > 0, derived implementations will return +0 in this case.
  For non-derived implementations, the error is \<= 8192 ULP.

| sin(x)
| For x in the domain [-{pi}, {pi}], the maximum absolute error is \<= 2^-11^ and larger otherwise.


| sincos(x)
| ulp values as defined for sin(x) and cos(x).

| sinh(x)
| Defined for x in the domain [-88, 88].
  For x in [-2^-10^, 2^-10^], derived implementations implement as x.
  For x outside of [-2^-10^, 2^-10^], derived implement as 0.5f * ( exp(x) - exp(-x) ).
  For non-derived implementations, the error is \<= 8192 ULP.

| sinpi(x)
| For x in the domain [-1, 1], the maximum absolute error is \<= 2^-11^ and larger otherwise.

| tan(x)
| Derived implementations implement this as sin(x) * ( 1.0f / cos(x) ).
  For non-derived implementations, the error is \<= 8192 ulp.

| tanh
| Defined for x in the domain [-88, 88].
  For x in [-2^-10^, 2^-10^], derived implementations implement as x.
  For x outside of [-2^-10^, 2^-10^], derived implementations implement as ( exp(x) - exp(-x) ) / ( exp(x) + exp(-x) ).
  For non-derived implementations, the error is \<= 8192 ULP.

| tanpi(x)
| Derived implementations implement this as tan(x * M_PI_F).
  For non-derived implementations, the error is \<= 8192 ulp for x in the domain [-1, 1].

| x * y + z
| Implemented either as a correctly rounded fma or as a multiply and an add both of which are correctly rounded.
|====

<<ulp_values_for_double_precision_builtin_math_functions,ULP values for double precision built-in math functions>> table describes the minimum accuracy of double precision floating-point arithmetic operations given as ULP values.
The reference value used to compute the ULP value of an arithmetic operation is the infinitely precise result.

[[ulp_values_for_double_precision_builtin_math_functions]]
.ULP values for double precision built-in math functions
[width="100%",cols="50%,50%",options="header"]
|====
| *Function*
| *Min Accuracy - ULP values <<ftn32,[32]>>*

| x + y
| Correctly rounded

| x - y
| Correctly rounded

| x * y
| Correctly rounded

| 1.0  / x
| Correctly rounded

| x / y
| Correctly rounded

| acos
| \<= 4 ulp

| acospi
| \<= 5 ulp

| asin
| \<= 4 ulp

| asinpi
| \<= 5 ulp

| atan
| \<= 5 ulp

| atan2
| \<= 6 ulp

| atanpi
| \<= 5 ulp

| atan2pi
| \<= 6 ulp

| acosh
| \<= 4 ulp

| asinh
| \<= 4 ulp

| atanh
| \<= 5 ulp

| cbrt
| \<= 2 ulp

| ceil
| Correctly rounded

| copysign
| 0 ulp

| cos
| \<= 4 ulp

| cosh
| \<= 4 ulp

| cospi
| \<= 4 ulp

| erfc
| \<= 16 ulp

| erf
| \<= 16 ulp

| exp
| \<= 3 ulp

| exp2
| \<= 3 ulp

| exp10
| \<= 3 ulp

| expm1
| \<= 3 ulp

| fabs
| 0 ulp

| fdim
| Correctly rounded

| floor
| Correctly rounded

| fma
| Correctly rounded

| fmax
| 0 ulp

| fmin
| 0 ulp

| fmod
| 0 ulp

| fract
| Correctly rounded

| frexp
| 0 ulp

| hypot
| \<= 4 ulp

| ilogb
| 0 ulp

| ldexp
| Correctly rounded

| log
| \<= 3 ulp

| log2
| \<= 3 ulp

| log10
| \<= 3 ulp

| log1p
| \<= 2 ulp

| logb
| 0 ulp

| mad
| Implemented either as a correctly rounded fma or as a multiply followed by an add both of which are correctly rounded

| maxmag
| 0 ulp

| minmag
| 0 ulp

| modf
| 0 ulp

| nan
| 0 ulp

| nextafter
| 0 ulp

| pow(x, y)
| \<= 16 ulp

| pown(x, y)
| \<= 16 ulp

| powr(x, y)
| \<= 16 ulp

| remainder
| 0 ulp

| remquo
| 0 ulp

| rint
| Correctly rounded

| rootn
| \<= 16 ulp

| round
| Correctly rounded

| rsqrt
| \<= 2 ulp

| sin
| \<= 4 ulp

| sincos
| \<= 4 ulp for sine and cosine values

| sinh
| \<= 4 ulp

| sinpi
| \<= 4 ulp

| sqrt
| Correctly rounded

| tan
| \<= 5 ulp

| tanh
| \<= 5 ulp

| tanpi
| \<= 6 ulp

| tgamma
| \<= 16 ulp

| trunc
| Correctly rounded
|====

<<ulp_values_for_half_precision_builtin_math_functions,ULP values for half precision built-in math functions>> table describes the minimum accuracy of half precision floating-point arithmetic operations given as ULP values.
The reference value used to compute the ULP value of an arithmetic operation is the infinitely precise result.

[[ulp_values_for_half_precision_builtin_math_functions]]
.ULP values for half precision built-in math functions
[width="100%",cols="50%,50%",options="header"]
|====
| *Function*
| *Min Accuracy - ULP values <<ftn32,[32]>>*

| x + y
| Correctly rounded

| x - y
| Correctly rounded

| x * y
| Correctly rounded

| 1.0 / x
| Correctly rounded

| x / y
| Correctly rounded

| acos
| \<= 2 ulp

| acospi
| \<= 2 ulp

| asin
| \<= 2 ulp

| asinpi
| \<= 2 ulp

| atan
| \<= 2 ulp

| atan2
| \<= 2 ulp

| atanpi
| \<= 2 ulp

| atan2pi
| \<= 2 ulp

| acosh
| \<= 2 ulp

| asinh
| \<= 2 ulp

| atanh
| \<= 2 ulp

| cbrt
| \<= 2 ulp

| ceil
| Correctly rounded

| copysign
| 0 ulp

| cos
| \<= 2 ulp

| cosh
| \<= 2 ulp

| cospi
| \<= 2 ulp

| erfc
| \<= 4 ulp

| erf
| \<= 4 ulp

| exp
| \<= 2 ulp

| exp2
| \<= 2 ulp

| exp10
| \<= 2 ulp

| expm1
| \<= 2 ulp

| fabs
| 0 ulp

| fdim
| Correctly rounded

| floor
| Correctly rounded

| fma
| Correctly rounded

| fmax
| 0 ulp

| fmin
| 0 ulp

| fmod
| 0 ulp

| fract
| Correctly rounded

| frexp
| 0 ulp

| hypot
| \<= 2 ulp

| ilogb
| 0 ulp

| ldexp
| Correctly rounded

| log
| \<= 2 ulp

| log2
| \<= 2 ulp

| log10
| \<= 2 ulp

| log1p
| \<= 2 ulp

| logb
| 0 ulp

| mad
| Implemented either as a correctly rounded fma or as a multiply followed by an add both of which are correctly rounded

| maxmag
| 0 ulp

| minmag
| 0 ulp

| modf
| 0 ulp

| nan
| 0 ulp

| nextafter
| 0 ulp

| pow(x, y)
| \<= 4 ulp

| pown(x, y)
| \<= 4 ulp

| powr(x, y)
| \<= 4 ulp

| remainder
| 0 ulp

| remquo
| 0 ulp

| rint
| Correctly rounded

| rootn
| \<= 4 ulp

| round
| Correctly rounded

| rsqrt
| \<= 1 ulp

| sin
| \<= 2 ulp

| sincos
| \<= 2 ulp for sine and cosine values

| sinh
| \<= 2 ulp

| sinpi
| \<= 2 ulp

| sqrt
| Correctly rounded

| tan
| \<= 2 ulp

| tanh
| \<= 2 ulp

| tanpi
| \<= 2 ulp

| tgamma
| \<= 4 ulp

| trunc
| Correctly rounded
|====
