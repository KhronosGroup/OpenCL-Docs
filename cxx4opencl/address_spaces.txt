// Copyright 2019-2022 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[address_space]]
=== Address spaces

{cpp} for OpenCL inherits address space behavior from `OpenCL C 3.0 s6.7`.

This section only documents behavior related to {cpp} features. For example,
conversion rules are extended from the qualification conversion in {cpp}17
`[conv.qual]` but the compatibility is determined using notation of sets and
overlapping of address spaces from `section 5.1.3` of <<embedded-c-spec,
The Embedded C Specification>>. For OpenCL kernel languages there are two
main semantics depending on whether generic address space (`OpenCL C 3.0 s6.7.5`)
is supported on not. The generic address space is always supported for

 * {cpp} for OpenCL 1.0;
 * {cpp} for OpenCL 2021 with the presence of `+__opencl_c_generic_address_space+`
   feature as explained in `OpenCL C 3.0 s6.2.1`.

If generic address space is not supported, qualification conversions with pointer
type where address spaces differ are not allowed. If generic address space is
supported, implicit conversions are allowed from a named address space (except for
`+__constant+`) to generic address space. The reverse conversion is only allowed
explicitly. The `+__constant+` address space does not overlap with any other,
therefore, no valid conversion between `+__constant+` and any other address space
exists. This is aligned with rules from `OpenCL C 3.0 s6.7.9` and this logic
regulates semantics described in this section.

[[address_space_casts]]
==== Casts

C-style casts follow rules of `OpenCL C 3.0 s6.7.9`. Conversions of
references and pointers to the generic address space can be done by any {cpp} cast
operator (as an implicit conversion); converting from generic to named address
space can only be done using the dedicated `addrspace_cast` operator. The
`addrspace_cast` operator can only convert between address spaces for pointers and
references and no other conversions are allowed to occur. Note that conversions
between `+__constant+` and any other other address space are disallowed.

[source,cpp]
------------
// Example assumes generic address space support.
int * genptr; // points to generic address space.

// generic -> named address space conversions.
__private float * ptrfloat = reinterpret_cast<__private float*>(genptr); // illegal.
__private float * ptrfloat = addrspace_cast<__private float*>(genptr); // illegal.
__private int * ptr = addrspace_cast<__private int*>(genptr); // legal.

// named -> generic address space conversion.
float * genptrfloat = reinterpret_cast<float*>(ptr); // legal.

// disjoint address space conversion.
__constant int * constptr = addrspace_cast<__constant int*>(genptr); // illegal.
------------

If generic address space is not supported, any conversion of references/pointers
pointing to different address spaces is illegal.

[source,cpp]
------------
// Example without generic address space support.
int * privptr; // points to private address space.

// The same address space conversions.
__private float * ptrfloat = reinterpret_cast<__private float*>(privptr); // legal.
__private float * ptrfloat = addrspace_cast<__private float*>(privptr); // illegal.
__private int * ptr = addrspace_cast<__private int*>(privptr); // legal, no op.
float * privptrfloat = reinterpret_cast<float*>(ptr); // legal.

// disjoint address space conversion.
__constant int * constptr = addrspace_cast<__constant int*>(privptr); // illegal.
------------

[[references]]
==== References

Reference types can be qualified with an address space.

[source,cpp]
------------
__private int & ref = ...; // references int in __private address space.
------------

By default references refer to generic address space objects if generic
address space is supported or private address space otherwise, except
for dependent types that are not template specializations (see
<<addrspace-deduction, _Address space inference_>>).

[source,cpp]
------------
int & ref = ...; // references int in generic address space if it is
                 // supported otherwise in __private address space.
------------

Address space compatibility checks are performed when references are
bound to values. The logic follows the rules from address space pointer
conversion (`OpenCL C 3.0 s6.7.9`).

[source,cpp]
------------
void f(float &ref, __global float &globref) {
  const int& tmp = ref; // legal - reference to generic/__private address space object
                        // can bind to a temporary object created in __private
                        // address space.

  __global const int& globtmp = globref; // error: reference to global address space
                                         // object cannot bind to a temporary object
                                         // created in __private  address space.
}
------------

[[addrspace-deduction]]
====  Address space inference

This section details what happens if address spaces for types are not
provided in the source code explicitly. Most of the logic for address space
inference (i.e. default address space) follows rules from `OpenCL C 3.0 s6.7.8`.

References inherit rules from pointers and therefore refer to generic
address space objects by default (see <<references, _References_>>) if
generic address space is supported, otherwise they refer to private
address space objects.

Class static data members are deduced to `+__global+` address space. Note,
that if the {cpp} for OpenCL 2021 implementation does not support program
scope variables (i.e. `+__opencl_c_program_scope_global_variables+` feature
from `OpenCL C 3.0 s6.1` is unsupported) the address space qualifier must be specified
explicitly and it must be the `+__constant+` address space.

All non-static member functions take an implicit object parameter `this`
that is a pointer type. By default the `this` pointer parameter is in the
generic address space if it is supported and in the private address space
otherwise. All concrete objects passed as an argument to the
implicit `this` parameter will be converted to this default (generic or private)
address space first if such conversion is valid. Therefore, when member functions
are called with objects created in disjoint address spaces from the default one,
the compilation must fail. To prevent the failure the address space on implicit
object parameter `this` must be specified using address space qualifiers
on member functions (see <<addrspace-member-function-qualifiers,
_Member function qualifier_>>). For example, use of member functions with
objects in `+__constant+` address space will always require a `+__constant+`
member function qualifier as `+__constant+` address space is disjoint with any
other.

Member function qualifiers can also be used in case address space conversions
are undesirable for example for performance reasons. For example, a method can
be implemented to exploit memory access coalescing for segments with memory bank.

Address spaces are not deduced for:

  * non-pointer/non-reference template parameters except for template
    specializations or non-type based template parameters.
  * non-pointer/non-reference class members except for static data members
    that are deduced to the `+__global+` address space for {cpp} for OpenCL 1.0
    or {cpp} for OpenCL 2021 with the
    `+__opencl_c_program_scope_global_variables+` feature.
  * non-pointer/non-reference type alias declarations.
  * decltype expressions.

[source,cpp]
------------
template <typename T>
void foo() {
  T m; // address space of 'm' will be known at template instantiation time.
  T * ptr; // 'ptr' points to generic address space object when it is
           // supported otherwise to __private address space.
  T & ref = ...; // 'ref' references an object in generic address space when
                 // it is supported otherwise in __private address space.
};

template <int N>
struct S {
  int i; // 'i' has no address space.
  static int ii; // 'ii' is in global address space if program scope variables
                 // are supported; otherwise this statement is not legal.
  int * ptr; // 'ptr' points to int in generic address space if it is supported;
             // otherwise to __private address space.
  int & ref = ...; // 'ref' references int in generic address space if it is
                   // supported; otherwise in __private address space.
};

template <int N>
void bar()
{
  S<N> s; // 's' is in __private address space.
}
------------

[source,cpp]
------------
struct c1 {};
using alias_c1 = c1; // 'alias_c1' is 'c1'.
using alias_c1_ptr = c1 *; // 'alias_c1_ptr' is a generic address space pointer to
                           // 'c1' when generic address space is supported; otherwise
                           // it points to 'c1' located in __private address space.
------------

[source,cpp]
------------
__kernel void foo()
{
  __local int i;
  decltype(i)* ii; // type of 'ii' is '__local int *__private'.
}
------------

For the placeholder type specifier `auto` an address space of the outer type is
deduced as if it would be any other regular type. However if `auto` is used in a
reference or pointer type, the address space of a pointee is taken from the type
of the initialization expression. The logic follows rules for `const` and
`volatile` qualifiers.

[source,cpp]
------------
// This example assumes that generic address space is supported.
__kernel void foo()
{
  __local int i;
  constexpr int c = 1;
  
  __constant auto cai = c; // type of 'cai' is '__constant int' (no deduction).
  
  auto aii = cai; // type of 'aii' is '__private int' (regular deduction).

  auto *ptr = &i; // type of 'ptr' is '__local int * __private'
                  // (addr space of a pointer is deduced regularly,
                  // addr space of its pointee is taken from 'i').

  auto *&refptr = ptr; // type of 'refptr' is '__local int * generic & __private'
                       // (addr space of a reference and type of referencing object
                       // is deduced regularly,
                       // addr space of a pointee is taken from the pointee of 'ptr').
}
------------

[[addrspace-member-function-qualifiers]]
==== Member function qualifier

{cpp} for OpenCL allows specifying an address space qualifier on member
functions to signal that they are to be used with objects constructed
in a specific address space. This works just the same as qualifying
member functions with `const` or any other qualifiers. The overloading
resolution will select the candidate with the most specific address
space if multiple candidates are provided. If there is no conversion
to an address space among candidates, compilation will fail with a
diagnostic.

[source,cpp]
------------
struct C {
  C() __local {};
  C() __private {};
  constexpr C() __constant {};

  void foo() __local;
  void foo(); // This is implicitly qualified by generic address space
              // if it is supported otherwise by '__private'.
};

__kernel void bar() {
  __local C c1;      // will resolve to the first constructor overload.
  __private C c2;    // will resolve to the second constructor overload.
  __constant C c3{}; // will resolve to the third constructor overload.
  c1.foo(); // will resolve to the first 'foo'.
  c2.foo(); // will resolve to the second 'foo'.
  c3.foo(); // error due to mismatching address spaces - can't convert to
            // '__local' or generic/'__private' address spaces.
}
------------

All member functions can be qualified by an address space qualifier including
constructors and destructors.


==== Lambda function

The address space qualifier can be optionally added for lambda
expressions after the attributes. Similar to method qualifiers,
they will alter the default address space of lambda call operator
that has generic address space by default if it is supported otherwise 
private address space. 

[source,cpp]
------------
__kernel void foo() {
  auto priv1 = []() __private {};
  priv1();
  auto priv2 = []() __global {};
  priv2(); // error: lambda object and its expression have mismatching address space.
  __constant auto const3 = []() __constant{};
  const3();

  [&] () __global {} (); // error: lambda temporary is in __private address space.

  [&] () mutable __private {} ();
  [&] () __private mutable {} (); // error: mutable specifier should precede address
                                  // space.
}
------------

==== Implicit special members

The prototype for implicit special members (default, copy or move constructor,
copy or move assignment, destructor) has the default address space for an implicit
object pointer and reference parameters (see also
<<addrspace-member-function-qualifiers, _Member function qualifier_>>). This default
address space is generic if it is supported or private otherwise.

[source,cpp]
------------
class C {
  // Has the following implicitly defined member functions.

  // C(); /* implicit 'this' parameter is a pointer to */
          /* object in generic address space if supported, or */
          /* in private address space otherwise. */

  // C(const C & par); /* 'this'/'par' is a pointer/reference to */
                       /*  object in generic address space */
                       /*  if supported, or */
                       /* in private address space otherwise. */

  // C(C && par); /* 'this'/'par' is a pointer/r-val reference to */
                  /* object in generic address space if supported, or */
                  /* in private address space otherwise. */

  // C & operator=(const C & par); /* 'this'/'par'/return value is */
                                   /* a pointer/reference/reference to */
                                   /* object in generic address space */
                                   /* if supported, or */ 
                                   /* in private address space otherwise. */

  // C & operator=(C && par)'; /* 'this'/'par'/return value is */
                               /* a pointer/r-val reference/reference to */
                               /* object in generic address space, */
                               /* if supported, or */ 
                               /* in private address space otherwise. */
};
------------

==== Builtin operators

All builtin operators are available with the specific address spaces, thus
no address space conversions (i.e. to generic address space) are performed.

==== Templates

There is no deduction of address spaces in non-pointer/non-reference
template parameters and dependent types (see <<addrspace-deduction,
_Address space inference_>>). The address space of a template parameter is deduced
during type deduction if it is not explicitly provided in the
instantiation.

[source,cpp]
------------
1  template<typename T>
2  void foo(T* i){
3    T var;
4  }
5 
6  __global int g;
7  void bar(){
8    foo(&g); // error: template instantiation failed as function scope variable 'var'
9             // appears to be declared in __global address space (see line 3).
10 }
------------

It is not legal to specify multiple different address spaces between
template definition and instantiation. If multiple different address
spaces are specified in a template definition and instantiation,
compilation of such a program will fail with a diagnostic. This
restriction immediately follows from `OpenCL C 3.0 s6.7` that
disallows multiple address space qualifiers on a type.

[source,cpp]
------------
template <typename T>
void foo() {
  __private T var;
}

void bar() {
  foo<__global int>(); // error: conflicting address space qualifiers are provided
                       // for 'var', '__global' and '__private'.
}
------------

Once a template has been instantiated, regular restrictions for
address spaces will apply as described in `OpenCL C 3.0 s6.7`.

[source,cpp]
------------
template<typename T>
void foo(){
  T var;
}

void bar(){
  foo<__global int>(); // error: function scope variable 'var' cannot be declared
                       // in '__global' address space.
}
------------

==== Temporary materialization

All temporaries are materialized in `+__private+` address space. If a reference
with another address space is bound to them, a conversion will be generated
in case it is valid, otherwise compilation will fail with a diagnostic.

[source,cpp]
------------
int bar(const unsigned int &i); // references generic address space object
                                // if generic address space is supported
                                // otherwise private address space object.

void foo() {
  bar(1); // temporary is created in __private address space but (if generic
          // address space is supported) converted to generic address space
          // of parameter reference.
}

void f(__global float &ref) {
  __global const int& newref = ref; // error: address space mismatch between
                                    // temporary object created to hold value
                                    // converted float->int and local variable
                                    // (can't convert from __private to __global).
}
------------

==== Construction, initialization and destruction

Construction, initialization and destruction of objects in `+__private+`
and `+__global+` address space follow the general principles of {cpp}. For
program scope objects or static objects in the function scope with non-trivial
constructors and destructors, the implementation defines an ABI format for
runtime initialization and destruction of global objects before/after all
kernels are enqueued.

Objects in `+__local+` address space can not have initializers in
declarations and therefore a constructor can not be called. All objects
created in the local address space have undefined state at the point of
their declaration. Developers are free to define a special member function
that can initialize local address space objects after their declaration. Any
default values provided for the initialization of members in a class
declaration are ignored when creating the local address space objects. Since
the initialization is performed after the variable declaration, special handling
is required for classes with data members that are references because their values
can not be overwritten trivially. Destructors of local address space objects
are not invoked automatically. They can be called manually.

[source,cpp]
------------
class C {
  int m;
// If generic address space is not supported or for performance optimization
// purposes the following members might be required.
public:
  __local C & operator=(const C & par) __local;
  ~C() __local;
};
__kernel void foo() {
  __local C locobj{}; // error: local address space objects can't be initialized
  __local C locobj; // uninitialised object.
  locobj = {}; // calling copy assignment operator is allowed.
  locobj.~C(); // local address space object destructors are not invoked
               // automatically.
}
------------

User defined constructors in `+__constant+` address space must be `constexpr`.
Such objects can be initialized using literals and initialization lists if they
do not require any user defined conversions.

Objects in `+__constant+` address space can be initialized using:

 * Literal expressions;
 * Uniform initialization syntax `{}`;
 * Using implicit constructors.
 * Using `constexpr` constructors.

[source,cpp]
------------
struct C1 {
  int m;
};

struct C2 {
  int m;
  constexpr C2(int init) __constant : m(init) {};
};

__constant C1 c1obj1 = {1};
__constant C1 c1obj2 = C1();
__constant C2 c2obj1(1);
------------

Non-trivial destructors for objects in non-default address spaces (i.e. all
other than generic address space when it is supported or `+__private+`
otherwise) are not required to be supported by implementations.
The macro `+__opencl_cpp_destructor_with_address_spaces+`,
which is defined if and only if such destructors are supported by an
implementation, can be used to check whether this functionality can be used
in kernel sources. Additionally destructors with global objects might not be
supported even if address spaces are supported with destructors in general.
Such functionality is indicated by the presence of the
`+__opencl_cpp_global_destructor+` macro. If the macro
`+__opencl_cpp_global_destructor+` is defined then
`+__opencl_cpp_destructor_with_address_spaces+` must also be defined.

Note that the destruction of objects in named address spaces `+__global+`,
`+__local+`, or `+__private+` can be performed using destructors with
default address space (i.e. generic) by utilising address space conversions.

[source,cpp]
------------
1   // Example assumes generic address space support.
2   class C {
3   public:
4   #ifdef __opencl_cpp_destructor_with_address_spaces
5     ~C() __local;
6   #else
7     ~C();
8   #endif
9   };
10
11  kernel void foo() {
12    __local C locobj;
13    locobj.~C();    // uses destructor in local address space (on line 5)
14                    // if such destructors are supported,
15                    // otherwise uses generic address space destructor (on line 7)
16                    // converting to generic address prior to call into destructor.
17  }
------------

However, when generic address space feature is unsupported, absence of
destructor support with address spaces results in a compilation failure
when such destructors overloaded with non-default address spaces are
encountered in the kernel code. 

[source,cpp]
------------
// Example assumes generic address space is not supported.
class C {
public:
  ~C();
};

kernel void foo() {
  __local C locobj;
  locobj.~C();    // error due to illegal conversion of 'this' from __local
                  // to __private address space pointer.
}
------------

==== Nested pointers

{cpp} for OpenCL does not allow implicit address space conversions in nested
pointers even with compatible address spaces. The following rules apply
when converting between address spaces in nested pointers:

 * Implicit conversions of address spaces in nested pointers are disallowed.
 * Any address space conversion in nested pointers with safe casts (e.g.
   `const_cast`, `static_cast`, `addrspace_cast`) is disallowed.
 * Any address space conversion in nested pointers can be done using low level
   C-style or `reinterpret_cast`. No compatibility check is performed for
   address spaces in nested pointers.

[source,cpp]
------------
local int * * locdefptr;
constant int * * cnstdefptr;
int * * defdefptr;
defdefptr = const_cast<int * *>(locdefptr); // illegal.
defdefptr = static_cast<int * *>(cnstdefptr); // illegal.
defdefptr = addrspace_cast<int * *>(cnstdefptr); // illegal.
defdefptr = reinterpret_cast<int * *>(locdefptr); // legal.
defdefptr = reinterpret_cast<int * *>(cnstdefptr); // legal.
------------

[[remove-addrspace]]
==== Address space removal type trait

`+template<class T> struct __remove_address_space;+`

{cpp} for OpenCL 2021 supports the type trait `+__remove_address_space+`
that provides the member `typedef type` which is the same as `T`, except
that its topmost address space qualifier is removed. Its effect is analogous
to `+remove_const+` and other similar type traits in {cpp}17 `[meta.trans]`.
The trait only removes an address space qualifier from a given type, therefore,
all other type qualifiers such as `+const+` or `+volatile+` remain unchanged.

[source,cpp]
------------
template<typename T>
void foo(T *par) {
  T var1; // error: function scope variable cannot be declared in global
          // address space.
  __private T var2; // error: conflicting address space qualifiers are provided
                    // between types '__private T' and '__global int'.
  __private __remove_address_space<T>::type var3; // type of var3 is __private int.
}

void bar() {
  __global int* ptr;
  foo(ptr);
}
------------
