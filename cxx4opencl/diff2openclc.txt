// Copyright 2019-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[diff2openclc]]
=== Difference to OpenCL C

{cpp} for OpenCL provides backwards compatibility with OpenCL C
for the majority of features. However, there are a number of
exceptions that are described in this section. Some of them come
from the nature of {cpp} but others are due to improvements in OpenCL
features. Most of such improvements do not invalidate old code,
but simply provide extra functionality.

==== C++ related differences

{cpp} for OpenCL is a different language to OpenCL C and it is derived
from {cpp} inheriting {cpp}'s fundamental design principles. Hence
{cpp} for OpenCL deviates from OpenCL C in the same areas where
{cpp} deviates from C. This results in a more helpful language for
developers and facilitates improvements in compilation tools without
substantially increasing their complexity.

===== Implicit conversions

{cpp} is much stricter about conversions between types,
especially those that are performed implicitly by the compiler.
For example it is not possible to convert a `const` object
to non-`const` implicitly. For details please refer to {cpp}17 `[conv]`.

[source,c]
----------
void foo(){
  const int *ptrconst;
  int *ptr = ptrconst; // invalid initialization discards const qualifier
}
----------

The same applies to narrowing conversions in
initialization lists ({cpp}17 `[dcl.init.list]`). 

[source,c]
----------
struct mytype {
 int i;
};
void foo(uint par){
  mytype var = {
    .i = par // narrowing from uint to int is disallowed
  };
}
----------

Some compilers allow silencing this error using a flag
(e.g. in Clang `-Wno-error=c++11-narrowing` can be used).

Among other common conversions that will not be compiled in C++
mode there are pointer to integer or integer to pointer
type conversions.

[source,c]
----------
void foo(){
  int *ptr;
  int i = ptr; // incompatible pointer to integer conversion
}
----------

[[null_literal]]
===== Null pointer constant

In C and OpenCL C the null pointer constant is defined using other
language features as it is not represented explicitly i.e.
commonly it is defined as

[source,c]
----------
#define NULL ((void*)0)
----------

In {cpp}17 there is an explicit builtin pointer literal `nullptr` that should
be used instead ({cpp}17 `[lex.nullptr]`).

`NULL` macro definition in {cpp} for OpenCL follows {cpp}17
`[support.types.nullptr]` where it is an implementation defined macro and it
is not guaranteed to be the same as in OpenCL C. Reusing the definition of
`NULL` from OpenCL C does not guarantee that any code with NULL is legal in
{cpp} for OpenCL even if it is legal in OpenCL C.

[source,c]
----------
#define NULL ((void*)0)
void foo(){
 int *ptr = NULL; // invalid initialization of int* with void*
}
----------

To improve code portability and compatibility, implementations are
encouraged to define `NULL` as an alias to pointer literal `nullptr`.

===== Use of restrict

{cpp}17 does not support `restrict` and therefore {cpp} for OpenCL
can not support it either. Some compilers might provide extensions
with some functionality of `restrict` in {cpp}, e.g. `__restrict`
in Clang.

This feature only affects optimizations and the source
code can be modified by removing it. As a workaround to avoid manual
modifications, macro substitutions can be used to either remove the
keyword during the preprocessing by defining `restrict` as an empty
macro or mapping it to another similar compiler features, e.g.
`__restrict` in Clang. This can be done in headers or using `-D`
compilation flag.

===== Limitations of goto statements

{cpp} is more restrictive with respect to entering the scope of
variables than C. It is not possible to jump forward over a variable
declaration statement apart from some exceptions detailed in {cpp}17
`[stmt.dcl]`.

[source,c]
----------
if (cond)
  goto label;
int n = foo();
label:  // invalid: jumping forward over declaration of n
   // ...
----------

==== OpenCL specific difference

This section describes where {cpp} for OpenCL differs from OpenCL C
in OpenCL specific behavior.

===== Variadic macros

{cpp} for OpenCL eliminates the restriction on variadic macros from
`OpenCL C v2.0 s6.9.e`.
Variadic macros can be used normally as per {cpp}17 `[cpp.replace]`.

===== Predefined macros

The macro `+__OPENCL_C_VERSION__+` described in `OpenCL C v2.0 s6.10`,
is not defined.

The following new predefined macros are added in {cpp} for OpenCL:

 * `+__OPENCL_CPP_VERSION__+` set to value `100`.
 * `+__CL_CPP_VERSION_1_0__+` also set to `100` and can be used for
   convenience instead of a literal.

===== Atomic operations

{cpp} for OpenCL relaxes restriction from `OpenCL C v2.0 s6.13.11` to
atomic types allowing them to be used by builtin operators, and not
only by builtin functions.

Operators on atomic types behave as described in {cpp}17
sections `[atomics.types.int]` `[atomics.types.pointer]`
`[atomics.types.float]`.

[source,c]
----------
atomic_int acnt;
acnt++; // equivalent to atomic_fetch_add(&acnt, 1);
----------

===== Use of Clang Blocks

Clang Blocks that are defined by the Objective-C language are not supported
and their use can be replaced by lambdas ({cpp}17 `[expr.prim.lambda]`).

The above implies that builtin functions using blocks, such as `enqueue_kernel`,
are not supported in {cpp} for OpenCL.
