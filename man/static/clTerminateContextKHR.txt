// Copyright (c) 2014-2020 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= clTerminateContextKHR(3)

== Name

clTerminateContextKHR - Terminates all pending work associated with the context and renders all data owned by the context invalid.

[source,c]
----
cl_int clTerminateContextKHR(cl_context context)
----

== Parameters

== Notes

It is the responsibility of the application to release all objects
associated with the context being terminated.

When a context is terminated:

  * The execution status of enqueued commands will be `CL_TERMINATED_KHR`.
    Event objects can be queried using
    flink:clGetEventInfo. Event callbacks can be
    registered and registered event callbacks will be called with
    `event_command_exec_status` set to `CL_TERMINATED_KHR`.
    flink:clWaitForEvents will return as immediately
    for commands associated with event objects specified in `event_list`.
    The status of user events can be set. Event objects can be retained and
    released. flink:clGetEventProfilingInfo
    returns `CL_PROFILING_INFO_NOT_AVAILABLE`.
  * The context is considered to be terminated. A callback function
    registered when the context was created will be called. Only queries,
    retain and release operations can be performed on the context. All other
    APIs that use a context as an argument will return
    `CL_CONTEXT_TERMINATED_KHR`.
  * The contents of the memory regions of the memory objects is undefined.
    Queries, registering a destructor callback, retain and release
    operations can be performed on the memory objects.
  * Once a context has been terminated, all OpenCL API calls that create
    objects or enqueue commands will return `CL_CONTEXT_TERMINATED_KHR`.
    APIs that release OpenCL objects will continue to operate as though
    `clTerminateContextKHR` was not called.
  * The behavior of callbacks will remain unchanged, and will report
    appropriate error, if executing after termination of context. This
    behavior is similar to enqueued commands, after the command queue has
    become invalid.

An implementation that supports this extension must be able to terminate
commands currently executing on devices or queued across all command-queues
associated with the context that is being terminated. The implementation
cannot implement this extension by waiting for currently executing (or
queued) commands to finish execution on devices associated with this context
(i.e. doing a flink:clFinish.

In Table 4.5 (see flink:clCreateContext), `CL_CONTEXT_TERMINATE_KHR`
can be specified in the context properties only if all devices associated
with the context support the ability to support context termination (i.e.
`CL_DEVICE_TERMINATE_CAPABILITY_CONTEXT_KHR` is set for
`CL_DEVICE_TERMINATE_CAPABILITY_KHR`). Otherwise, context creation fails
with error code of `CL_INVALID_PROPERTY`.

== Errors

`clTerminateContextKHR` returns `CL_SUCCESS` if the function is executed
successfully. Otherwise, it returns one of the following errors:

  * `CL_INVALID_CONTEXT` if _context_ is not a valid OpenCL context.
  * `CL_CONTEXT_TERMINATED_KHR` if _context_ has already been terminated.
  * `CL_INVALID_OPERATION` if _context_ was not created with
    `CL_CONTEXT_TERMNATE_KHR` set to `CL_TRUE`.
  * `CL_OUT_OF_RESOURCES` if there is a failure to allocate resources
    required by the OpenCL implementation on the device.
  * `CL_OUT_OF_HOST_MEMORY` if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

// == See Also

== Document Notes

For more information, see the OpenCL Extension Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_Ext.html#cl_khr_terminate_context

include::footer.txt[]
