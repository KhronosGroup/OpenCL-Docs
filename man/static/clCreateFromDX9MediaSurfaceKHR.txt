// Copyright (c) 2014-2020 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= clCreateFromDX9MediaSurfaceKHR(3)

== Name

clCreateFromDX9MediaSurfaceKHR - Creates an OpenCL image object from a media surface.

== C Specification

[source,c]
----
cl_mem clCreateFromDX9MediaSurfaceKHR(cl_context context,
                                      cl_mem_flags flags,
                                      cl_dx9_media_adapter_type_khr adapter_type,
                                      void *surface_info,
                                      cl_uint plane,
                                      cl_int *errcode_ret)
----

== Parameters

  * _context_ - A valid OpenCL context created from a media adapter.
  * _flags_ - A bit-field that is used to specify usage information. Refer
    to the table of allowed values for _flags_ for flink:clCreateBuffer.
    Only `CL_MEM_READ_ONLY`, `CL_MEM_WRITE_ONLY`, and `CL_MEM_READ_WRITE`
    values specified in the table of allowed values for _flags_ for
    flink:clCreateBuffer can be used.
  * _adapter_type_
+
--
A value from enumeration of supported adapters described in the table of
`cl_dx9_media_adapter_type_khr` values for
flink:clGetDeviceIDsFromDX9MediaAdapterKHR.
The type of _surface_info_ is determined by the adapter type.
The implementation does not need to support all adapter types.
This approach provides flexibility to support additional adapter types in
the future.
Supported adapter types are `CL_ADAPTER_D3D9_KHR`, `CL_ADAPTER_D3D9EX_KHR`,
and `CL_ADAPTER_DXVA_KHR`.

If _adapter_type_ is `CL_ADAPTER_D3D9_KHR`, `CL_ADAPTER_D3D9EX_KHR`, or
`CL_ADAPTER_DXVA_KHR`, the _surface_info_ points to the following structure:

`typedef struct _cl_dx9_surface_info_khr { IDirect3DSurface9 *resource; HANDLE shared_handle; } cl_dx9_surface_info_khr;`

For D3D9 surfaces, we need both the handle to the resource and the resource
itself to have a sufficient amount of information to eliminate a copy of the
surface for sharing in cases where this is possible. Elimination of the copy
is driver dependent. `shared_handle` may be NULL and this may result in
sub-optimal performance.
--
  * _surface_info_ - A pointer to one of the structures defined in the
    _adapter_type_ description above passed in as a `void` *.
  * _plane_ - The plane of resource to share for planar surface formats. For
    planar formats, we use the plane parameter to obtain a handle to thie
    specific plane (Y, U or V for example). For nonplanar formats used by
    media, _plane_ must be 0.
  * _errcode_ret_ - An appropriate error code. If _errcode_ret_ is NULL, no
    error code is returned.

== Notes

The width and height of the returned OpenCL 2D image object are determined by the width and height of the plane of resource.
The channel type and order of the returned image object is determined by the format and plane of resource and are described in tables 9.10.3 and 9.10.4.

This call will increment the internal media surface count on _resource_.
The internal media surface reference count on _resource_ will be decremented when the OpenCL reference count on the returned OpenCL memory object drops to zero.

include::sharingDX9Inc.txt[]

== Errors

Returns a valid non-zero 2D image object and _errcode_ret_ is set to `CL_SUCCESS` if the 2D image object is created successfully.
Otherwise, it returns a NULL value with one of the following error values returned in _errcode_ret_:

  * `CL_INVALID_CONTEXT` if _context_ is not a valid context.
  * `CL_INVALID_VALUE` if values specified in _flags_ are not valid or if _plane_ is not a valid plane of _resource_ specified in _surface_info_.
  * `CL_INVALID_DX9_MEDIA_SURFACE_KHR` if _resource_ specified in _surface_info_ is not a valid resource or is not associated with _adapter_type_ (e.g., _adapter_type_ is set to `CL_ADAPTER_D3D9_KHR` and _resource_ is not a Direct3D 9 surface created in `D3DPOOL_DEFAULT`).
  * `CL_INVALID_DX9_MEDIA_SURFACE_KHR` if `shared_handle` specified in _surface_info_ is not NULL or a valid handle value.
  * `CL_INVALID_DX9_MEDIA_SURFACE_KHR` if _adapter_type_ is set to a media adapter and the _surface_info_ does not reference a media surface of the required type, or if _adapter_type_ is set to a media adapter type and _surface_info_ does not contain a valid reference to a media surface on that adapter, by
  flink:clGetMemObjectInfo when _param_name_ is a surface or handle when the image was not created from an appropriate media surface, and from
  flink:clGetImageInfo when _param_name_ is `CL_IMAGE_DX9_MEDIA_PLANE_KHR` and image was not created from an appropriate media surface.
  * `CL_INVALID_IMAGE_FORMAT_DESCRIPTOR` if the texture format of _resource_ is not listed in tables 9.10.3 and 9.10.4.
  * `CL_INVALID_OPERATION` if there are no devices in _context_ that support _adapter_type_.
  * `CL_OUT_OF_RESOURCES` if there is a failure to allocate resources required by the OpenCL implementation on the device.
  * `CL_OUT_OF_HOST_MEMORY` if there is a failure to allocate resources required by the OpenCL implementation on the host.

== See Also

reflink:cl_khr_dx9_media_sharing,
flink:clCreateBuffer,

== Document Notes

For more information, see the OpenCL Extension Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_Ext.html#clCreateFromDX9MediaSurfaceKHR

include::footer.txt[]
