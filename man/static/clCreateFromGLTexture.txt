// Copyright (c) 2014-2020 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= clCreateFromGLTexture(3)

== Name

clCreateFromGLTexture - Creates an OpenCL image object, image array object, or image buffer object from an OpenGL texture object, texture array object, texture buffer object, or a single face of an OpenGL cubemap texture object.

== C Specification

[source,c]
----
cl_mem clCreateFromGLTexture(cl_context context,
                             cl_mem_flags flags,
                             GLenum texture_target,
                             GLint miplevel,
                             GLuint texture,
                             cl_int * errcode_ret)
----

== Parameters

  * _context_ - A valid OpenCL context created from an OpenGL context.
  * _flags_ - A bit-field that is used to specify usage information. Refer
    to the table for flink:clCreateBuffer for a description of _flags_. Only
    the values `CL_MEM_READ_ONLY`, `CL_MEM_WRITE_ONLY` and
    `CL_MEM_READ_WRITE` can be used.
  * _texture_target_ -
+
--
This value must be one of `GL_TEXTURE_1D`, `GL_TEXTURE_1D_ARRAY`,
`GL_TEXTURE_BUFFER`, `GL_TEXTURE_2D`, `GL_TEXTURE_2D_ARRAY`,
`GL_TEXTURE_3D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`,
`GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`,
`GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`,
`GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`, or `GL_TEXTURE_RECTANGLE`.
(`GL_TEXTURE_RECTANGLE` requires OpenGL 3.1. Alternatively,
`GL_TEXTURE_RECTANGLE_ARB` may be specified if the OpenGL extension
`GL_ARB_texture_rectangle` is supported.) _texture_target_ is used only to
define the image type of _texture_. No reference to a bound GL texture
object is made or implied by this parameter.

If the reflink:cl_khr_gl_msaa_sharing extension is enabled, _texture_target_
may be `GL_TEXTURE_2D_MULTISAMPLE` or `GL_TEXTURE_2D_MULTISAMPLE_ARRAY`.

If _texture_target_ is `GL_TEXTURE_2D_MULTISAMPLE`, `clCreateFromGLTexture`
creates an OpenCL 2D multi-sample image object from an OpenGL 2D
multi-sample texture

If _texture_target_ is `GL_TEXTURE_2D_MULTISAMPLE_ARRAY`,
`clCreateFromGLTexture` creates an OpenCL 2D multi-sample array image object
from an OpenGL 2D multi-sample texture.
--
  * _miplevel_ - The mipmap level to be used. If _texture_target_ is
    `GL_TEXTURE_BUFFER`, miplevel must be 0. Implementations may return
    `CL_INVALID_OPERATION` for miplevel values > 0
  * _texture_ - The name of a GL 1D, 2D, 3D, 1D array, 2D array, cubemap,
    rectangle or buffer texture object. The texture object must be a
    complete texture as per OpenGL rules on texture completeness. The
    _texture_ format and dimensions defined by OpenGL for the specified
    _miplevel_ of the texture will be used to create the OpenCL image memory
    object. Only GL texture objects with an internal format that maps to
    appropriate image channel order and data type specified in tables 5.5
    and 5.6 (see reflink:cl_image_format) may be used to create the OpenCL
    image memory object.
  * _errcode_ret_ - Returns an appropriate error code as described below. If
    _errcode_ret_ is NULL, no error code is returned.

== Notes

If the state of a GL texture object is modified through the GL API (e.g.
`glTexImage2D`, `glTexImage3D` or the values of the texture parameters `GL_TEXTURE_BASE_LEVEL` or `GL_TEXTURE_MAX_LEVEL` are modified) while there exists a corresponding CL image object, subsequent use of the CL image object will result in undefined behavior.

The flink:clRetainMemObject and
flink:clReleaseMemObject functions can be used to retain and release the image objects.

include::gl_sharingInc.txt[]

include::gl_formatsInc.txt[]

include::gl_lifetimeInc.txt[]

include::gl_syncInc.txt[]

== Errors

Returns a valid non-zero OpenCL image object and _errcode_ret_ is set to `CL_SUCCESS` if the image object is created successfully.
Otherwise, it returns a NULL value with one of the following error values returned in _errcode_ret_:

  * `CL_INVALID_CONTEXT` if _context_ is not a valid context or was not created from a GL context.
  * `CL_INVALID_VALUE` if values specified in _flags_ are not valid or if value specified in _texture_target_ is not one of the values specified in the description of _texture_target_.
  * `CL_INVALID_MIP_LEVEL` if _miplevel_ is less than the value of _level~base~_ (for OpenGL implementations) or zero (for OpenGL ES implementations); or greater than the value of _q_ (for both OpenGL and OpenGL ES).
    _level~base~_ and _q_ are defined for the texture in section 3.8.10 (Texture Completeness) of the OpenGL 2.1 specification and section 3.7.10 of the OpenGL ES 2.0.
  * `CL_INVALID_MIP_LEVEL` if _miplevel_ is greater than zero and the OpenGL implementation does not support creating from non-zero mipmap levels.
  * `CL_INVALID_GL_OBJECT` if _texture_ is not a GL texture object whose type matches _texture_target_, if the specified _miplevel_ of _texture_ is not defined, or if the width or height of the specified _miplevel_ is zero or if the GL texture object is incomplete.
  * `CL_INVALID_IMAGE_FORMAT_DESCRIPTOR` if the OpenGL texture internal format does not map to a supported OpenCL image format.
  * `CL_INVALID_OPERATION` if _texture_ is a GL texture object created with a border width value greater than zero.
  * `CL_OUT_OF_RESOURCES` if there is a failure to allocate resources required by the OpenCL implementation on the device.
  * `CL_OUT_OF_HOST_MEMORY` if there is a failure to allocate resources required by the OpenCL implementation on the host.

== See Also

reflink:cl_khr_gl_sharing,
flink:clCreateBuffer,
flink:clCreateFromGLBuffer

== Document Notes

For more information, see the OpenCL Extension Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_Ext.html#clCreateFromGLTexture

include::footer.txt[]
