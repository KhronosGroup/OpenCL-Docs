// Copyright (c) 2014-2020 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= cl_khr_fp16(3)

== Name

cl_khr_fp16 - Optional half floating-point support.

== C Specification

[source,c]
----
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
----

== Description

This extension adds support for half scalar and vector types as built-in types that can be used for arithmetic operations, conversions, etc.
An application that wants to use `half` and `halfn` types will need to include the directive shown above.

The list of built-in scalar and vector data types are extended to include the types in the table below.

The built-in vector data types for `halfn` are also declared as appropriate types in the OpenCL API (and header files) that can be used by an application.
The following table describes the built-in vector data types for `halfn` as defined in the OpenCL C programming language and the corresponding data type available to the application:

[cols="1a,1a,1a", options="header"]
|====
| Type in OpenCL Language |  Description                                       |  API type for application
| half2                   |  2-component half-precision floating-point vector  |  `cl_half2`
| half3                   |  3-component half-precision floating-point vector  |  `cl_half3`
| half4                   |  4-component half-precision floating-point vector  |  `cl_half4`
| half8                   |  8-component half-precision floating-point vector  |  `cl_half8`
| half16                  |  16-component half-precision floating-point vector |  `cl_half16`
|====

The relational, equality, logical and logical unary reflink:operators can be used with `half` scalar and `halfn` vector types and shall produce a scalar `int` and vector `shortn` result respectively.

The OpenCL compiler accepts an `h` and `H` suffix on floating point literals, indicating the literal is typed as a `half`.

The macro names given in the following list must use the values specified.
These constant expressions are suitable for use in `#if` preprocessing directives.

The following table also describes the corresponding macro names available to the application.

[cols="1a,1a,1a", options="header"]
|====
| Macro in OpenCL Language   | value         | Macro for application
| `#define HALF_DIG`         | `3`           | `HALF_DIG`
| `#define HALF_MANT_DIG`    | `11`          | `HALF_MANT_DIG`
| `#define HALF_MAX_10_EXP`  | `+4`          | `HALF_MAX_10_EXP`
| `#define HALF_MAX_EXP`     | `+16`         | `HALF_MAX_EXP`
| `#define HALF_MIN_10_EXP`  | `-4`          | `HALF_MIN_10_EXP`
| `#define HALF_MIN_EXP`     | `-13`         | `HALF_MIN_EXP`
| `#define HALF_RADIX`       | `2`           | `HALF_RADIX`
| `#define HALF_MAX`         | `0x1.ffcp15h` | `HALF_MAX`
| `#define HALF_MIN`         | `0x1.0p-14h`  | `HALF_MIN`
| `#define HALF_EPSILON`     | `0x1.0p-10h`  | `HALF_EPSILON`
|====

The following constants are also available.
They are of type `half` and are accurate within the precision of the `half` type.

[cols="1a,1a", options="header"]
|====
| Constant       | Description
| `M_E_H`        | Value of e
| `M_LOG2E_H`    | Value of log~2~ e
| `M_LOG10E_H`   | Value of log~10~ e
| `M_LN2_H`      | Value of ln 2
| `M_LN10_H`     | Value of ln 10
| `M_PI_H`       | Value of {pi}
| `M_PI_2_H`     | Value of {pi} / 2
| `M_PI_4_H`     | Value of {pi} / 4
| `M_1_PI_H`     | Value of 1 / {pi}
| `M_2_PI_H`     | Value of 2 / {pi}
| `M_2_SQRTPI_H` | Value of 2 / {sqrt}{pi}
| `M_SQRT2_H`    | Value of {sqrt}2
| `M_SQRT1_2_H`  | Value of 1 / {sqrt}2
|====

Ann application may query the configuration information using the op-code `CL_DEVICE_HALF_FP_CONFIG` with flink:clGetDeviceInfo for an OpenCL device that supports half precision floating-point.

.Conversions

The implicit conversion rules specified in section 6.2.1 now include the `half` scalar and `halfn` vector data types.

The explicit casts described in section 6.2.2 are extended to take a `half` scalar data type and a `halfn` vector data type.

The explicit conversion functions described in section 6.2.3 are extended to take a `half` scalar data type and a `halfn` vector data type.

The *as_typen*() function for re-interpreting types as described in section
6.2.4.2 is extended to allow conversion-free casts between `shortn`,
`ushortn` and `halfn` scalar and vector data types.

== See Also

reflink:EXTENSION,
flink:clGetDeviceInfo,
reflink:mathFunctions.txt,
reflink:commonFunctions.txt,
reflink:geometricFunctions.txt,
reflink:relationalFunctions.txt,
reflink:vectorDataLoadandStoreFunctions.txt,
reflink:asyncCopyFunctions.txt,
reflink:imageFunctions.txt

== Document Notes

For more information, see the OpenCL Extension Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_Ext.html#cl_khr_fp16

include::footer.txt[]
