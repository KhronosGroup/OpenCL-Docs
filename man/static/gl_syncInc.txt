.Synchronizing OpenCL and OpenGL Access

In order to ensure data integrity, the application is responsible for
synchronizing access to shared CL/GL objects by their respective APIs.
Failure to provide such synchronization may result in race conditions and
other undefined behavior including non-portability between implementations.

Prior to calling flink:clEnqueueAcquireGLObjects, the application must
ensure that any pending GL operations which access the objects specified in
_mem_objects_ have completed. This may be accomplished portably by issuing
and waiting for completion of a `glFinish` command on all GL contexts with
pending references to these objects. Implementations may offer more
efficient synchronization methods; for example on some platforms calling
`glFlush` may be sufficient, or synchronization may be implicit within a
thread, or there may be vendor-specific extensions that enable placing a
fence in the GL command stream and waiting for completion of that fence in
the CL command-queue. Note that no synchronization methods other than
`glFinish` are portable between OpenGL implementations at this time.

When the extension reflink:cl_khr_egl_event is supported: Prior to calling
flink:clEnqueueAcquireGLObjects, the application must ensure that any
pending EGL or EGL client API operations which access the objects specified
in _mem_objects_ have completed. If the reflink:cl_khr_egl_event extension
is supported and the EGL context in question supports fence sync objects,
_explicit synchronisation_ can be achieved as set out in section 5.7.1. If
the reflink:cl_khr_egl_event extension is not supported, completion of EGL
client API commands may be determined by issuing and waiting for completion
of commands such as `glFinish` or `vgFinish` on all client API contexts with
pending references to these objects. Some implementations may offer other
efficient synchronization methods. If such methods exist they will be
described in platform-specific documentation. Note that no synchronization
methods other than `glFinish` and `vgFinish` are portable between all EGL
client API implementations and all OpenCL implementations. While this is the
only way to ensure completion that is portable to all platforms, these are
expensive operation and their use should be avoided if the
reflink:cl_khr_egl_event extension is supported on a platform.

Similarly, after calling flink:clEnqueueReleaseGLObjects, the application is
responsible for ensuring that any pending OpenCL operations which access the
objects specified in _mem_objects_ have completed prior to executing
subsequent GL commands which reference these objects. This may be
accomplished portably by calling flink:clWaitForEvents with the event object
returned by flink:clEnqueueReleaseGLObjects, or by calling flink:clFinish.
As above, some implementations may offer more efficient methods.

The application is responsible for maintaining the proper order of
operations if the CL and GL contexts are in separate threads.

If a GL context is bound to a thread other than the one in which
flink:clEnqueueReleaseGLObjects is called, changes to any of the objects in
_mem_objects_ may not be visible to that context without additional steps
being taken by the application. For an OpenGL 3.1 (or later) context, the
requirements are described in Appendix D ("Shared Objects and Multiple
Contexts") of the OpenGL 3.1 Specification. For prior versions of OpenGL,
the requirements are implementation-dependent.

Attempting to access the data store of an OpenGL object after it has been
acquired by OpenCL and before it has been released will result in undefined
behavior. Similarly, attempting to access a shared CL/GL object from OpenCL
before it has been acquired by the OpenCL command-queue, or after it has
been released, will result in undefined behavior.

If the reflink:cl_khr_gl_event extension is supported,
then the OpenCL implementation will ensure that any such pending OpenGL
operations are complete for an OpenGL context bound to the same thread as
the OpenCL context. This is referred to as implicit synchronization.
