// Copyright (c) 2014-2020 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= clCreateFromD3D10Texture3DKHR(3)

== Name

clCreateFromD3D10Texture3DKHR - Creates an OpenCL 3D image object from a subresource of a Direct3D 10 3D texture.

== C Specification

[source,c]
----
cl_mem clCreateFromD3D10Texture3DKHR(cl_context context,
                                     cl_mem_flags flags,
                                     ID3D10Texture3D *resource,
                                     UINT subresource,
                                     cl_int *errcode_ret)
----

== Parameters

  * _context_ - A valid OpenCL context created from a Direct3D 10 device.
  * _flags_ - A bit-field that is used to specify usage information. May be
    `CL_MEM_READ_ONLY`, `CL_MEM_WRITE_ONLY`, or `CL_MEM_READ_WRITE`. (See
    the table for flink:clCreateBuffer for more information.)
  * _resource_ - A pointer to the Direct3D 10 3D texture to share.
  * _subresource_ - The subresource of _resource_ to share.
  * _errcode_ret_ - An appropriate error code. If _errcode_ret_ is NULL, no
    error code is returned.

== Notes

The width, height and depth of the returned OpenCL 3D image object are determined by the width, height and depth of subresource _subresource_ of _resource_.
The channel type and order of the returned OpenCL 3D image object is determined by the format of _resource_ as shown below in the table of Direct3D 10 and corresponding OpenCL image formats.

This call will increment the internal Direct3D reference count on _resource_.
The internal Direct3D reference count on _resource_ will be decremented when the OpenCL reference count on the returned OpenCL memory object drops to zero.

Following is a list of Direct3D 10 and corresponding OpenCL image formats.

[cols="1a,1a", options="header"]
|====
| DXGI format                      | CL image format (channel order, channel data type)
| `DXGI_FORMAT_R32G32B32A32_FLOAT` | CL_RGBA, CL_FLOAT
| `DXGI_FORMAT_R32G32B32A32_UINT`  | CL_RGBA, CL_UNSIGNED_INT32
| `DXGI_FORMAT_R32G32B32A32_SINT`  | CL_RGBA, CL_SIGNED_INT32
|                                  |
| `DXGI_FORMAT_R16G16B16A16_FLOAT` | CL_RGBA, CL_HALF_FLOAT
| `DXGI_FORMAT_R16G16B16A16_UNORM` | CL_RGBA, CL_UNORM_INT16
| `DXGI_FORMAT_R16G16B16A16_UINT`  | CL_RGBA, CL_UNSIGNED_INT16
| `DXGI_FORMAT_R16G16B16A16_SNORM` | CL_RGBA, CL_SNORM_INT16
| `DXGI_FORMAT_R16G16B16A16_SINT`  | CL_RGBA, CL_SIGNED_INT16
|                                  |
| `DXGI_FORMAT_R8G8B8A8_UNORM`     | CL_BGRA, CL_UNORM_INT8
| `DXGI_FORMAT_R8G8B8A8_UNORM`     | CL_RGBA, CL_UNORM_INT8
| `DXGI_FORMAT_R8G8B8A8_UINT`      | CL_RGBA, CL_UNSIGNED_INT8
| `DXGI_FORMAT_R8G8B8A8_SNORM`     | CL_RGBA, CL_SNORM_INT8
| `DXGI_FORMAT_R8G8B8A8_SINT`      | CL_RGBA, CL_SIGNED_INT8
|                                  |
| `DXGI_FORMAT_R32G32_FLOAT`       | CL_RG, CL_FLOAT
| `DXGI_FORMAT_R32G32_UINT`        | CL_RG, CL_UNSIGNED_INT32
| `DXGI_FORMAT_R32G32_SINT`        | CL_RG, CL_SIGNED_INT32
|                                  |
| `DXGI_FORMAT_R16G16_FLOAT`       | CL_RG, CL_HALF_FLOAT
| `DXGI_FORMAT_R16G16_UNORM`       | CL_RG, CL_UNORM_INT16
| `DXGI_FORMAT_R16G16_UINT`        | CL_RG, CL_UNSIGNED_INT16
| `DXGI_FORMAT_R16G16_SNORM`       | CL_RG, CL_SNORM_INT16
| `DXGI_FORMAT_R16G16_SINT`        | CL_RG, CL_SIGNED_INT16
|                                  |
| `DXGI_FORMAT_R8G8_UNORM`         | CL_RG, CL_UNORM_INT8
| `DXGI_FORMAT_R8G8_UINT`          | CL_RG, CL_UNSIGNED_INT8
| `DXGI_FORMAT_R8G8_SNORM`         | CL_RG, CL_SNORM_INT8
| `DXGI_FORMAT_R8G8_SINT`          | CL_RG, CL_SIGNED_INT8
|                                  |
| `DXGI_FORMAT_R32_FLOAT`          | CL_R, CL_FLOAT
| `DXGI_FORMAT_R32_UINT`           | CL_R, CL_UNSIGNED_INT32
| `DXGI_FORMAT_R32_SINT`           | CL_R, CL_SIGNED_INT32
|                                  |
| `DXGI_FORMAT_R16_FLOAT`          | CL_R, CL_HALF_FLOAT
| `DXGI_FORMAT_R16_UNORM`          | CL_R, CL_UNORM_INT16
| `DXGI_FORMAT_R16_UINT`           | CL_R, CL_UNSIGNED_INT16
| `DXGI_FORMAT_R16_SNORM`          | CL_R, CL_SNORM_INT16
| `DXGI_FORMAT_R16_SINT`           | CL_R, CL_SIGNED_INT16
|                                  |
| `DXGI_FORMAT_R8_UNORM`           | CL_R, CL_UNORM_INT8
| `DXGI_FORMAT_R8_UINT`            | CL_R, CL_UNSIGNED_INT8
| `DXGI_FORMAT_R8_SNORM`           | CL_R, CL_SNORM_INT8
| `DXGI_FORMAT_R8_SINT`            | CL_R, CL_SIGNED_INT8
|====

include::sharingD3D10Inc.txt[]

== Errors

Returns a valid non-zero OpenCL buffer object and _errcode_ret_ is set to `CL_SUCCESS` if the buffer object is created successfully.
Otherwise, it returns a NULL value with one of the following error values returned in _errcode_ret_:

  * `CL_INVALID_CONTEXT` if _context_ is not a valid context.
  * `CL_INVALID_VALUE` if values specified in _flags_ are not valid or if _subresource_ is not a valid subresource index for _resource_.
  * `CL_INVALID_D3D10_RESOURCE_KHR` if _resource_ is not a Direct3D 10 texture resource, if _resource_ was created with the `D3D10_USAGE` flag `D3D10_USAGE_IMMUTABLE`, if a _resource_ is a multisampled texture, if a `cl_mem` from subresource _subresource_ of _resource_ has already been created using `clCreateFromD3D10Texture3DKHR`, or if _context_ was not created against the same Direct3D 10 device from which _resource_ was created.
  * `CL_INVALID_IMAGE_FORMAT_DESCRIPTOR` if the Direct3D 10 texture format of _resource_ is not a value listed in the above table of Direct3D 10 and corresponding OpenCL image formats, or if the Direct3D 10 texture format of _resource_ does not map to a supported OpenCL image format.
  * `CL_OUT_OF_HOST_MEMORY` if there is a failure to allocate resources required by the OpenCL implementation on the host.

== See Also

reflink:cl_khr_d3d10_sharing

== Document Notes

For more information, see the OpenCL Extension Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_Ext.html#clCreateFromD3D10Texture3DKHR

include::footer.txt[]
