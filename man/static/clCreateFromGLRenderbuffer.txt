// Copyright (c) 2014-2020 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= clCreateFromGLRenderbuffer(3)

== Name

clCreateFromGLRenderbuffer - Creates an OpenCL 2D image object from an OpenGL renderbuffer object.

== C Specification

[source,c]
----
cl_mem clCreateFromGLRenderbuffer(cl_context context,
                                  cl_mem_flags flags,
                                  GLuint renderbuffer,
                                  cl_int * errcode_ret)
----

== Parameters

  * _context_ - A valid OpenCL context created from an OpenGL context.
  * _flags_ - A bit-field that is used to specify usage information. Refer
    to the table at flink:clCreateBuffer for a description of _flags_. Only
    `CL_MEM_READ_ONLY`, `CL_MEM_WRITE_ONLY`, and `CL_MEM_READ_WRITE` values
    specified in the table at flink:clCreateBuffer can be used.
  * _renderbuffer_ - The name of a GL renderbuffer object. The renderbuffer
    storage must be specified before the image object can be created. The
    _renderbuffer_ format and dimensions defined by OpenGL will be used to
    create the 2D image object. Only GL renderbuffers with internal formats
    that map to appropriate image channel order and data type specified in
    tables 5.5 and 5.6 (see reflink:cl_image_format) can be used to create
    the 2D image object.
  * _errcode_ret_ - Returns an appropriate error code as described below. If
    _errcode_ret_ is NULL, no error code is returned.

== Description

If the state of a GL renderbuffer object is modified through the GL API (i.e.
changes to the dimensions or format used to represent pixels of the GL renderbuffer using appropriate GL API calls such as `glRenderbufferStorage`) while there exists a corresponding CL image object, subsequent use of the CL image object will result in undefined behavior.

The flink:clRetainMemObject and
flink:clReleaseMemObject functions can be used to retain and release the image objects.

include::gl_sharingInc.txt[]

include::gl_formatsInc.txt[]

include::gl_lifetimeInc.txt[]

include::gl_syncInc.txt[]

== Errors

Returns a valid non-zero OpenCL image object and _errcode_ret_ is set to `CL_SUCCESS` if the image object is created successfully.
Otherwise, it returns a NULL value with one of the following error values returned in _errcode_ret_:

  * `CL_INVALID_CONTEXT` if _context_ is not a valid context or was not created from a GL context.
  * `CL_INVALID_VALUE` if values specified in _flags_ are not valid.
  * `CL_INVALID_GL_OBJECT` if _renderbuffer_ is not a GL renderbuffer object or if the width or height of _renderbuffer_ is zero.
  * `CL_INVALID_IMAGE_FORMAT_DESCRIPTOR` if the OpenGL renderbuffer internal format does not map to a supported OpenCL image format.
  * `CL_INVALID_OPERATION` if _renderbuffer_ is a multi-sample GL renderbuffer object.
  * `CL_OUT_OF_RESOURCES` if there is a failure to allocate resources required by the OpenCL implementation on the device.
  * `CL_OUT_OF_HOST_MEMORY` if there is a failure to allocate resources required by the OpenCL implementation on the host.

== See Also

reflink:cl_khr_gl_sharing,
flink:clCreateBuffer,
reflink:cl_image_format,
flink:clRetainMemObject,
flink:clReleaseMemObject

== Document Notes

For more information, see the OpenCL Extension Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_Ext.html#clCreateFromGLRenderbuffer

include::footer.txt[]
