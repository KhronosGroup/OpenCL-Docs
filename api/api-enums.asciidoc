// Copyright 2017-2019 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

// CL_SUCCESS
:CL_SUCCESS_label: pass:q[`CL_&#8203;SUCCESS`]
:CL_SUCCESS: <<CL_SUCCESS,{CL_SUCCESS_label}>>
:CL_SUCCESS_anchor: [[CL_SUCCESS]]{CL_SUCCESS}

// CL_DEVICE_NOT_FOUND
:CL_DEVICE_NOT_FOUND_label: pass:q[`CL_&#8203;DEVICE_&#8203;NOT_&#8203;FOUND`]
:CL_DEVICE_NOT_FOUND: <<CL_DEVICE_NOT_FOUND,{CL_DEVICE_NOT_FOUND_label}>>
:CL_DEVICE_NOT_FOUND_anchor: [[CL_DEVICE_NOT_FOUND]]{CL_DEVICE_NOT_FOUND}

// CL_DEVICE_NOT_AVAILABLE
:CL_DEVICE_NOT_AVAILABLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;NOT_&#8203;AVAILABLE`]
:CL_DEVICE_NOT_AVAILABLE: <<CL_DEVICE_NOT_AVAILABLE,{CL_DEVICE_NOT_AVAILABLE_label}>>
:CL_DEVICE_NOT_AVAILABLE_anchor: [[CL_DEVICE_NOT_AVAILABLE]]{CL_DEVICE_NOT_AVAILABLE}

// CL_COMPILER_NOT_AVAILABLE
:CL_COMPILER_NOT_AVAILABLE_label: pass:q[`CL_&#8203;COMPILER_&#8203;NOT_&#8203;AVAILABLE`]
:CL_COMPILER_NOT_AVAILABLE: <<CL_COMPILER_NOT_AVAILABLE,{CL_COMPILER_NOT_AVAILABLE_label}>>
:CL_COMPILER_NOT_AVAILABLE_anchor: [[CL_COMPILER_NOT_AVAILABLE]]{CL_COMPILER_NOT_AVAILABLE}

// CL_MEM_OBJECT_ALLOCATION_FAILURE
:CL_MEM_OBJECT_ALLOCATION_FAILURE_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;ALLOCATION_&#8203;FAILURE`]
:CL_MEM_OBJECT_ALLOCATION_FAILURE: <<CL_MEM_OBJECT_ALLOCATION_FAILURE,{CL_MEM_OBJECT_ALLOCATION_FAILURE_label}>>
:CL_MEM_OBJECT_ALLOCATION_FAILURE_anchor: [[CL_MEM_OBJECT_ALLOCATION_FAILURE]]{CL_MEM_OBJECT_ALLOCATION_FAILURE}

// CL_OUT_OF_RESOURCES
:CL_OUT_OF_RESOURCES_label: pass:q[`CL_&#8203;OUT_&#8203;OF_&#8203;RESOURCES`]
:CL_OUT_OF_RESOURCES: <<CL_OUT_OF_RESOURCES,{CL_OUT_OF_RESOURCES_label}>>
:CL_OUT_OF_RESOURCES_anchor: [[CL_OUT_OF_RESOURCES]]{CL_OUT_OF_RESOURCES}

// CL_OUT_OF_HOST_MEMORY
:CL_OUT_OF_HOST_MEMORY_label: pass:q[`CL_&#8203;OUT_&#8203;OF_&#8203;HOST_&#8203;MEMORY`]
:CL_OUT_OF_HOST_MEMORY: <<CL_OUT_OF_HOST_MEMORY,{CL_OUT_OF_HOST_MEMORY_label}>>
:CL_OUT_OF_HOST_MEMORY_anchor: [[CL_OUT_OF_HOST_MEMORY]]{CL_OUT_OF_HOST_MEMORY}

// CL_PROFILING_INFO_NOT_AVAILABLE
:CL_PROFILING_INFO_NOT_AVAILABLE_label: pass:q[`CL_&#8203;PROFILING_&#8203;INFO_&#8203;NOT_&#8203;AVAILABLE`]
:CL_PROFILING_INFO_NOT_AVAILABLE: <<CL_PROFILING_INFO_NOT_AVAILABLE,{CL_PROFILING_INFO_NOT_AVAILABLE_label}>>
:CL_PROFILING_INFO_NOT_AVAILABLE_anchor: [[CL_PROFILING_INFO_NOT_AVAILABLE]]{CL_PROFILING_INFO_NOT_AVAILABLE}

// CL_MEM_COPY_OVERLAP
:CL_MEM_COPY_OVERLAP_label: pass:q[`CL_&#8203;MEM_&#8203;COPY_&#8203;OVERLAP`]
:CL_MEM_COPY_OVERLAP: <<CL_MEM_COPY_OVERLAP,{CL_MEM_COPY_OVERLAP_label}>>
:CL_MEM_COPY_OVERLAP_anchor: [[CL_MEM_COPY_OVERLAP]]{CL_MEM_COPY_OVERLAP}

// CL_IMAGE_FORMAT_MISMATCH
:CL_IMAGE_FORMAT_MISMATCH_label: pass:q[`CL_&#8203;IMAGE_&#8203;FORMAT_&#8203;MISMATCH`]
:CL_IMAGE_FORMAT_MISMATCH: <<CL_IMAGE_FORMAT_MISMATCH,{CL_IMAGE_FORMAT_MISMATCH_label}>>
:CL_IMAGE_FORMAT_MISMATCH_anchor: [[CL_IMAGE_FORMAT_MISMATCH]]{CL_IMAGE_FORMAT_MISMATCH}

// CL_IMAGE_FORMAT_NOT_SUPPORTED
:CL_IMAGE_FORMAT_NOT_SUPPORTED_label: pass:q[`CL_&#8203;IMAGE_&#8203;FORMAT_&#8203;NOT_&#8203;SUPPORTED`]
:CL_IMAGE_FORMAT_NOT_SUPPORTED: <<CL_IMAGE_FORMAT_NOT_SUPPORTED,{CL_IMAGE_FORMAT_NOT_SUPPORTED_label}>>
:CL_IMAGE_FORMAT_NOT_SUPPORTED_anchor: [[CL_IMAGE_FORMAT_NOT_SUPPORTED]]{CL_IMAGE_FORMAT_NOT_SUPPORTED}

// CL_BUILD_PROGRAM_FAILURE
:CL_BUILD_PROGRAM_FAILURE_label: pass:q[`CL_&#8203;BUILD_&#8203;PROGRAM_&#8203;FAILURE`]
:CL_BUILD_PROGRAM_FAILURE: <<CL_BUILD_PROGRAM_FAILURE,{CL_BUILD_PROGRAM_FAILURE_label}>>
:CL_BUILD_PROGRAM_FAILURE_anchor: [[CL_BUILD_PROGRAM_FAILURE]]{CL_BUILD_PROGRAM_FAILURE}

// CL_MAP_FAILURE
:CL_MAP_FAILURE_label: pass:q[`CL_&#8203;MAP_&#8203;FAILURE`]
:CL_MAP_FAILURE: <<CL_MAP_FAILURE,{CL_MAP_FAILURE_label}>>
:CL_MAP_FAILURE_anchor: [[CL_MAP_FAILURE]]{CL_MAP_FAILURE}

// CL_MISALIGNED_SUB_BUFFER_OFFSET
:CL_MISALIGNED_SUB_BUFFER_OFFSET_label: pass:q[`CL_&#8203;MISALIGNED_&#8203;SUB_&#8203;BUFFER_&#8203;OFFSET`]
:CL_MISALIGNED_SUB_BUFFER_OFFSET: <<CL_MISALIGNED_SUB_BUFFER_OFFSET,{CL_MISALIGNED_SUB_BUFFER_OFFSET_label}>>
:CL_MISALIGNED_SUB_BUFFER_OFFSET_anchor: [[CL_MISALIGNED_SUB_BUFFER_OFFSET]]{CL_MISALIGNED_SUB_BUFFER_OFFSET}

// CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST
:CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST_label: pass:q[`CL_&#8203;EXEC_&#8203;STATUS_&#8203;ERROR_&#8203;FOR_&#8203;EVENTS_&#8203;IN_&#8203;WAIT_&#8203;LIST`]
:CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST: <<CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST,{CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST_label}>>
:CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST_anchor: [[CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST]]{CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST}

// CL_COMPILE_PROGRAM_FAILURE
:CL_COMPILE_PROGRAM_FAILURE_label: pass:q[`CL_&#8203;COMPILE_&#8203;PROGRAM_&#8203;FAILURE`]
:CL_COMPILE_PROGRAM_FAILURE: <<CL_COMPILE_PROGRAM_FAILURE,{CL_COMPILE_PROGRAM_FAILURE_label}>>
:CL_COMPILE_PROGRAM_FAILURE_anchor: [[CL_COMPILE_PROGRAM_FAILURE]]{CL_COMPILE_PROGRAM_FAILURE}

// CL_LINKER_NOT_AVAILABLE
:CL_LINKER_NOT_AVAILABLE_label: pass:q[`CL_&#8203;LINKER_&#8203;NOT_&#8203;AVAILABLE`]
:CL_LINKER_NOT_AVAILABLE: <<CL_LINKER_NOT_AVAILABLE,{CL_LINKER_NOT_AVAILABLE_label}>>
:CL_LINKER_NOT_AVAILABLE_anchor: [[CL_LINKER_NOT_AVAILABLE]]{CL_LINKER_NOT_AVAILABLE}

// CL_LINK_PROGRAM_FAILURE
:CL_LINK_PROGRAM_FAILURE_label: pass:q[`CL_&#8203;LINK_&#8203;PROGRAM_&#8203;FAILURE`]
:CL_LINK_PROGRAM_FAILURE: <<CL_LINK_PROGRAM_FAILURE,{CL_LINK_PROGRAM_FAILURE_label}>>
:CL_LINK_PROGRAM_FAILURE_anchor: [[CL_LINK_PROGRAM_FAILURE]]{CL_LINK_PROGRAM_FAILURE}

// CL_DEVICE_PARTITION_FAILED
:CL_DEVICE_PARTITION_FAILED_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;FAILED`]
:CL_DEVICE_PARTITION_FAILED: <<CL_DEVICE_PARTITION_FAILED,{CL_DEVICE_PARTITION_FAILED_label}>>
:CL_DEVICE_PARTITION_FAILED_anchor: [[CL_DEVICE_PARTITION_FAILED]]{CL_DEVICE_PARTITION_FAILED}

// CL_KERNEL_ARG_INFO_NOT_AVAILABLE
:CL_KERNEL_ARG_INFO_NOT_AVAILABLE_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;INFO_&#8203;NOT_&#8203;AVAILABLE`]
:CL_KERNEL_ARG_INFO_NOT_AVAILABLE: <<CL_KERNEL_ARG_INFO_NOT_AVAILABLE,{CL_KERNEL_ARG_INFO_NOT_AVAILABLE_label}>>
:CL_KERNEL_ARG_INFO_NOT_AVAILABLE_anchor: [[CL_KERNEL_ARG_INFO_NOT_AVAILABLE]]{CL_KERNEL_ARG_INFO_NOT_AVAILABLE}

// CL_INVALID_VALUE
:CL_INVALID_VALUE_label: pass:q[`CL_&#8203;INVALID_&#8203;VALUE`]
:CL_INVALID_VALUE: <<CL_INVALID_VALUE,{CL_INVALID_VALUE_label}>>
:CL_INVALID_VALUE_anchor: [[CL_INVALID_VALUE]]{CL_INVALID_VALUE}

// CL_INVALID_DEVICE_TYPE
:CL_INVALID_DEVICE_TYPE_label: pass:q[`CL_&#8203;INVALID_&#8203;DEVICE_&#8203;TYPE`]
:CL_INVALID_DEVICE_TYPE: <<CL_INVALID_DEVICE_TYPE,{CL_INVALID_DEVICE_TYPE_label}>>
:CL_INVALID_DEVICE_TYPE_anchor: [[CL_INVALID_DEVICE_TYPE]]{CL_INVALID_DEVICE_TYPE}

// CL_INVALID_PLATFORM
:CL_INVALID_PLATFORM_label: pass:q[`CL_&#8203;INVALID_&#8203;PLATFORM`]
:CL_INVALID_PLATFORM: <<CL_INVALID_PLATFORM,{CL_INVALID_PLATFORM_label}>>
:CL_INVALID_PLATFORM_anchor: [[CL_INVALID_PLATFORM]]{CL_INVALID_PLATFORM}

// CL_INVALID_DEVICE
:CL_INVALID_DEVICE_label: pass:q[`CL_&#8203;INVALID_&#8203;DEVICE`]
:CL_INVALID_DEVICE: <<CL_INVALID_DEVICE,{CL_INVALID_DEVICE_label}>>
:CL_INVALID_DEVICE_anchor: [[CL_INVALID_DEVICE]]{CL_INVALID_DEVICE}

// CL_INVALID_CONTEXT
:CL_INVALID_CONTEXT_label: pass:q[`CL_&#8203;INVALID_&#8203;CONTEXT`]
:CL_INVALID_CONTEXT: <<CL_INVALID_CONTEXT,{CL_INVALID_CONTEXT_label}>>
:CL_INVALID_CONTEXT_anchor: [[CL_INVALID_CONTEXT]]{CL_INVALID_CONTEXT}

// CL_INVALID_QUEUE_PROPERTIES
:CL_INVALID_QUEUE_PROPERTIES_label: pass:q[`CL_&#8203;INVALID_&#8203;QUEUE_&#8203;PROPERTIES`]
:CL_INVALID_QUEUE_PROPERTIES: <<CL_INVALID_QUEUE_PROPERTIES,{CL_INVALID_QUEUE_PROPERTIES_label}>>
:CL_INVALID_QUEUE_PROPERTIES_anchor: [[CL_INVALID_QUEUE_PROPERTIES]]{CL_INVALID_QUEUE_PROPERTIES}

// CL_INVALID_COMMAND_QUEUE
:CL_INVALID_COMMAND_QUEUE_label: pass:q[`CL_&#8203;INVALID_&#8203;COMMAND_&#8203;QUEUE`]
:CL_INVALID_COMMAND_QUEUE: <<CL_INVALID_COMMAND_QUEUE,{CL_INVALID_COMMAND_QUEUE_label}>>
:CL_INVALID_COMMAND_QUEUE_anchor: [[CL_INVALID_COMMAND_QUEUE]]{CL_INVALID_COMMAND_QUEUE}

// CL_INVALID_HOST_PTR
:CL_INVALID_HOST_PTR_label: pass:q[`CL_&#8203;INVALID_&#8203;HOST_&#8203;PTR`]
:CL_INVALID_HOST_PTR: <<CL_INVALID_HOST_PTR,{CL_INVALID_HOST_PTR_label}>>
:CL_INVALID_HOST_PTR_anchor: [[CL_INVALID_HOST_PTR]]{CL_INVALID_HOST_PTR}

// CL_INVALID_MEM_OBJECT
:CL_INVALID_MEM_OBJECT_label: pass:q[`CL_&#8203;INVALID_&#8203;MEM_&#8203;OBJECT`]
:CL_INVALID_MEM_OBJECT: <<CL_INVALID_MEM_OBJECT,{CL_INVALID_MEM_OBJECT_label}>>
:CL_INVALID_MEM_OBJECT_anchor: [[CL_INVALID_MEM_OBJECT]]{CL_INVALID_MEM_OBJECT}

// CL_INVALID_IMAGE_FORMAT_DESCRIPTOR
:CL_INVALID_IMAGE_FORMAT_DESCRIPTOR_label: pass:q[`CL_&#8203;INVALID_&#8203;IMAGE_&#8203;FORMAT_&#8203;DESCRIPTOR`]
:CL_INVALID_IMAGE_FORMAT_DESCRIPTOR: <<CL_INVALID_IMAGE_FORMAT_DESCRIPTOR,{CL_INVALID_IMAGE_FORMAT_DESCRIPTOR_label}>>
:CL_INVALID_IMAGE_FORMAT_DESCRIPTOR_anchor: [[CL_INVALID_IMAGE_FORMAT_DESCRIPTOR]]{CL_INVALID_IMAGE_FORMAT_DESCRIPTOR}

// CL_INVALID_IMAGE_SIZE
:CL_INVALID_IMAGE_SIZE_label: pass:q[`CL_&#8203;INVALID_&#8203;IMAGE_&#8203;SIZE`]
:CL_INVALID_IMAGE_SIZE: <<CL_INVALID_IMAGE_SIZE,{CL_INVALID_IMAGE_SIZE_label}>>
:CL_INVALID_IMAGE_SIZE_anchor: [[CL_INVALID_IMAGE_SIZE]]{CL_INVALID_IMAGE_SIZE}

// CL_INVALID_SAMPLER
:CL_INVALID_SAMPLER_label: pass:q[`CL_&#8203;INVALID_&#8203;SAMPLER`]
:CL_INVALID_SAMPLER: <<CL_INVALID_SAMPLER,{CL_INVALID_SAMPLER_label}>>
:CL_INVALID_SAMPLER_anchor: [[CL_INVALID_SAMPLER]]{CL_INVALID_SAMPLER}

// CL_INVALID_BINARY
:CL_INVALID_BINARY_label: pass:q[`CL_&#8203;INVALID_&#8203;BINARY`]
:CL_INVALID_BINARY: <<CL_INVALID_BINARY,{CL_INVALID_BINARY_label}>>
:CL_INVALID_BINARY_anchor: [[CL_INVALID_BINARY]]{CL_INVALID_BINARY}

// CL_INVALID_BUILD_OPTIONS
:CL_INVALID_BUILD_OPTIONS_label: pass:q[`CL_&#8203;INVALID_&#8203;BUILD_&#8203;OPTIONS`]
:CL_INVALID_BUILD_OPTIONS: <<CL_INVALID_BUILD_OPTIONS,{CL_INVALID_BUILD_OPTIONS_label}>>
:CL_INVALID_BUILD_OPTIONS_anchor: [[CL_INVALID_BUILD_OPTIONS]]{CL_INVALID_BUILD_OPTIONS}

// CL_INVALID_PROGRAM
:CL_INVALID_PROGRAM_label: pass:q[`CL_&#8203;INVALID_&#8203;PROGRAM`]
:CL_INVALID_PROGRAM: <<CL_INVALID_PROGRAM,{CL_INVALID_PROGRAM_label}>>
:CL_INVALID_PROGRAM_anchor: [[CL_INVALID_PROGRAM]]{CL_INVALID_PROGRAM}

// CL_INVALID_PROGRAM_EXECUTABLE
:CL_INVALID_PROGRAM_EXECUTABLE_label: pass:q[`CL_&#8203;INVALID_&#8203;PROGRAM_&#8203;EXECUTABLE`]
:CL_INVALID_PROGRAM_EXECUTABLE: <<CL_INVALID_PROGRAM_EXECUTABLE,{CL_INVALID_PROGRAM_EXECUTABLE_label}>>
:CL_INVALID_PROGRAM_EXECUTABLE_anchor: [[CL_INVALID_PROGRAM_EXECUTABLE]]{CL_INVALID_PROGRAM_EXECUTABLE}

// CL_INVALID_KERNEL_NAME
:CL_INVALID_KERNEL_NAME_label: pass:q[`CL_&#8203;INVALID_&#8203;KERNEL_&#8203;NAME`]
:CL_INVALID_KERNEL_NAME: <<CL_INVALID_KERNEL_NAME,{CL_INVALID_KERNEL_NAME_label}>>
:CL_INVALID_KERNEL_NAME_anchor: [[CL_INVALID_KERNEL_NAME]]{CL_INVALID_KERNEL_NAME}

// CL_INVALID_KERNEL_DEFINITION
:CL_INVALID_KERNEL_DEFINITION_label: pass:q[`CL_&#8203;INVALID_&#8203;KERNEL_&#8203;DEFINITION`]
:CL_INVALID_KERNEL_DEFINITION: <<CL_INVALID_KERNEL_DEFINITION,{CL_INVALID_KERNEL_DEFINITION_label}>>
:CL_INVALID_KERNEL_DEFINITION_anchor: [[CL_INVALID_KERNEL_DEFINITION]]{CL_INVALID_KERNEL_DEFINITION}

// CL_INVALID_KERNEL
:CL_INVALID_KERNEL_label: pass:q[`CL_&#8203;INVALID_&#8203;KERNEL`]
:CL_INVALID_KERNEL: <<CL_INVALID_KERNEL,{CL_INVALID_KERNEL_label}>>
:CL_INVALID_KERNEL_anchor: [[CL_INVALID_KERNEL]]{CL_INVALID_KERNEL}

// CL_INVALID_ARG_INDEX
:CL_INVALID_ARG_INDEX_label: pass:q[`CL_&#8203;INVALID_&#8203;ARG_&#8203;INDEX`]
:CL_INVALID_ARG_INDEX: <<CL_INVALID_ARG_INDEX,{CL_INVALID_ARG_INDEX_label}>>
:CL_INVALID_ARG_INDEX_anchor: [[CL_INVALID_ARG_INDEX]]{CL_INVALID_ARG_INDEX}

// CL_INVALID_ARG_VALUE
:CL_INVALID_ARG_VALUE_label: pass:q[`CL_&#8203;INVALID_&#8203;ARG_&#8203;VALUE`]
:CL_INVALID_ARG_VALUE: <<CL_INVALID_ARG_VALUE,{CL_INVALID_ARG_VALUE_label}>>
:CL_INVALID_ARG_VALUE_anchor: [[CL_INVALID_ARG_VALUE]]{CL_INVALID_ARG_VALUE}

// CL_INVALID_ARG_SIZE
:CL_INVALID_ARG_SIZE_label: pass:q[`CL_&#8203;INVALID_&#8203;ARG_&#8203;SIZE`]
:CL_INVALID_ARG_SIZE: <<CL_INVALID_ARG_SIZE,{CL_INVALID_ARG_SIZE_label}>>
:CL_INVALID_ARG_SIZE_anchor: [[CL_INVALID_ARG_SIZE]]{CL_INVALID_ARG_SIZE}

// CL_INVALID_KERNEL_ARGS
:CL_INVALID_KERNEL_ARGS_label: pass:q[`CL_&#8203;INVALID_&#8203;KERNEL_&#8203;ARGS`]
:CL_INVALID_KERNEL_ARGS: <<CL_INVALID_KERNEL_ARGS,{CL_INVALID_KERNEL_ARGS_label}>>
:CL_INVALID_KERNEL_ARGS_anchor: [[CL_INVALID_KERNEL_ARGS]]{CL_INVALID_KERNEL_ARGS}

// CL_INVALID_WORK_DIMENSION
:CL_INVALID_WORK_DIMENSION_label: pass:q[`CL_&#8203;INVALID_&#8203;WORK_&#8203;DIMENSION`]
:CL_INVALID_WORK_DIMENSION: <<CL_INVALID_WORK_DIMENSION,{CL_INVALID_WORK_DIMENSION_label}>>
:CL_INVALID_WORK_DIMENSION_anchor: [[CL_INVALID_WORK_DIMENSION]]{CL_INVALID_WORK_DIMENSION}

// CL_INVALID_WORK_GROUP_SIZE
:CL_INVALID_WORK_GROUP_SIZE_label: pass:q[`CL_&#8203;INVALID_&#8203;WORK_&#8203;GROUP_&#8203;SIZE`]
:CL_INVALID_WORK_GROUP_SIZE: <<CL_INVALID_WORK_GROUP_SIZE,{CL_INVALID_WORK_GROUP_SIZE_label}>>
:CL_INVALID_WORK_GROUP_SIZE_anchor: [[CL_INVALID_WORK_GROUP_SIZE]]{CL_INVALID_WORK_GROUP_SIZE}

// CL_INVALID_WORK_ITEM_SIZE
:CL_INVALID_WORK_ITEM_SIZE_label: pass:q[`CL_&#8203;INVALID_&#8203;WORK_&#8203;ITEM_&#8203;SIZE`]
:CL_INVALID_WORK_ITEM_SIZE: <<CL_INVALID_WORK_ITEM_SIZE,{CL_INVALID_WORK_ITEM_SIZE_label}>>
:CL_INVALID_WORK_ITEM_SIZE_anchor: [[CL_INVALID_WORK_ITEM_SIZE]]{CL_INVALID_WORK_ITEM_SIZE}

// CL_INVALID_GLOBAL_OFFSET
:CL_INVALID_GLOBAL_OFFSET_label: pass:q[`CL_&#8203;INVALID_&#8203;GLOBAL_&#8203;OFFSET`]
:CL_INVALID_GLOBAL_OFFSET: <<CL_INVALID_GLOBAL_OFFSET,{CL_INVALID_GLOBAL_OFFSET_label}>>
:CL_INVALID_GLOBAL_OFFSET_anchor: [[CL_INVALID_GLOBAL_OFFSET]]{CL_INVALID_GLOBAL_OFFSET}

// CL_INVALID_EVENT_WAIT_LIST
:CL_INVALID_EVENT_WAIT_LIST_label: pass:q[`CL_&#8203;INVALID_&#8203;EVENT_&#8203;WAIT_&#8203;LIST`]
:CL_INVALID_EVENT_WAIT_LIST: <<CL_INVALID_EVENT_WAIT_LIST,{CL_INVALID_EVENT_WAIT_LIST_label}>>
:CL_INVALID_EVENT_WAIT_LIST_anchor: [[CL_INVALID_EVENT_WAIT_LIST]]{CL_INVALID_EVENT_WAIT_LIST}

// CL_INVALID_EVENT
:CL_INVALID_EVENT_label: pass:q[`CL_&#8203;INVALID_&#8203;EVENT`]
:CL_INVALID_EVENT: <<CL_INVALID_EVENT,{CL_INVALID_EVENT_label}>>
:CL_INVALID_EVENT_anchor: [[CL_INVALID_EVENT]]{CL_INVALID_EVENT}

// CL_INVALID_OPERATION
:CL_INVALID_OPERATION_label: pass:q[`CL_&#8203;INVALID_&#8203;OPERATION`]
:CL_INVALID_OPERATION: <<CL_INVALID_OPERATION,{CL_INVALID_OPERATION_label}>>
:CL_INVALID_OPERATION_anchor: [[CL_INVALID_OPERATION]]{CL_INVALID_OPERATION}

// CL_INVALID_GL_OBJECT
:CL_INVALID_GL_OBJECT_label: pass:q[`CL_&#8203;INVALID_&#8203;GL_&#8203;OBJECT`]
:CL_INVALID_GL_OBJECT: <<CL_INVALID_GL_OBJECT,{CL_INVALID_GL_OBJECT_label}>>
:CL_INVALID_GL_OBJECT_anchor: [[CL_INVALID_GL_OBJECT]]{CL_INVALID_GL_OBJECT}

// CL_INVALID_BUFFER_SIZE
:CL_INVALID_BUFFER_SIZE_label: pass:q[`CL_&#8203;INVALID_&#8203;BUFFER_&#8203;SIZE`]
:CL_INVALID_BUFFER_SIZE: <<CL_INVALID_BUFFER_SIZE,{CL_INVALID_BUFFER_SIZE_label}>>
:CL_INVALID_BUFFER_SIZE_anchor: [[CL_INVALID_BUFFER_SIZE]]{CL_INVALID_BUFFER_SIZE}

// CL_INVALID_MIP_LEVEL
:CL_INVALID_MIP_LEVEL_label: pass:q[`CL_&#8203;INVALID_&#8203;MIP_&#8203;LEVEL`]
:CL_INVALID_MIP_LEVEL: <<CL_INVALID_MIP_LEVEL,{CL_INVALID_MIP_LEVEL_label}>>
:CL_INVALID_MIP_LEVEL_anchor: [[CL_INVALID_MIP_LEVEL]]{CL_INVALID_MIP_LEVEL}

// CL_INVALID_GLOBAL_WORK_SIZE
:CL_INVALID_GLOBAL_WORK_SIZE_label: pass:q[`CL_&#8203;INVALID_&#8203;GLOBAL_&#8203;WORK_&#8203;SIZE`]
:CL_INVALID_GLOBAL_WORK_SIZE: <<CL_INVALID_GLOBAL_WORK_SIZE,{CL_INVALID_GLOBAL_WORK_SIZE_label}>>
:CL_INVALID_GLOBAL_WORK_SIZE_anchor: [[CL_INVALID_GLOBAL_WORK_SIZE]]{CL_INVALID_GLOBAL_WORK_SIZE}

// CL_INVALID_PROPERTY
:CL_INVALID_PROPERTY_label: pass:q[`CL_&#8203;INVALID_&#8203;PROPERTY`]
:CL_INVALID_PROPERTY: <<CL_INVALID_PROPERTY,{CL_INVALID_PROPERTY_label}>>
:CL_INVALID_PROPERTY_anchor: [[CL_INVALID_PROPERTY]]{CL_INVALID_PROPERTY}

// CL_INVALID_IMAGE_DESCRIPTOR
:CL_INVALID_IMAGE_DESCRIPTOR_label: pass:q[`CL_&#8203;INVALID_&#8203;IMAGE_&#8203;DESCRIPTOR`]
:CL_INVALID_IMAGE_DESCRIPTOR: <<CL_INVALID_IMAGE_DESCRIPTOR,{CL_INVALID_IMAGE_DESCRIPTOR_label}>>
:CL_INVALID_IMAGE_DESCRIPTOR_anchor: [[CL_INVALID_IMAGE_DESCRIPTOR]]{CL_INVALID_IMAGE_DESCRIPTOR}

// CL_INVALID_COMPILER_OPTIONS
:CL_INVALID_COMPILER_OPTIONS_label: pass:q[`CL_&#8203;INVALID_&#8203;COMPILER_&#8203;OPTIONS`]
:CL_INVALID_COMPILER_OPTIONS: <<CL_INVALID_COMPILER_OPTIONS,{CL_INVALID_COMPILER_OPTIONS_label}>>
:CL_INVALID_COMPILER_OPTIONS_anchor: [[CL_INVALID_COMPILER_OPTIONS]]{CL_INVALID_COMPILER_OPTIONS}

// CL_INVALID_LINKER_OPTIONS
:CL_INVALID_LINKER_OPTIONS_label: pass:q[`CL_&#8203;INVALID_&#8203;LINKER_&#8203;OPTIONS`]
:CL_INVALID_LINKER_OPTIONS: <<CL_INVALID_LINKER_OPTIONS,{CL_INVALID_LINKER_OPTIONS_label}>>
:CL_INVALID_LINKER_OPTIONS_anchor: [[CL_INVALID_LINKER_OPTIONS]]{CL_INVALID_LINKER_OPTIONS}

// CL_INVALID_DEVICE_PARTITION_COUNT
:CL_INVALID_DEVICE_PARTITION_COUNT_label: pass:q[`CL_&#8203;INVALID_&#8203;DEVICE_&#8203;PARTITION_&#8203;COUNT`]
:CL_INVALID_DEVICE_PARTITION_COUNT: <<CL_INVALID_DEVICE_PARTITION_COUNT,{CL_INVALID_DEVICE_PARTITION_COUNT_label}>>
:CL_INVALID_DEVICE_PARTITION_COUNT_anchor: [[CL_INVALID_DEVICE_PARTITION_COUNT]]{CL_INVALID_DEVICE_PARTITION_COUNT}

// CL_INVALID_PIPE_SIZE
:CL_INVALID_PIPE_SIZE_label: pass:q[`CL_&#8203;INVALID_&#8203;PIPE_&#8203;SIZE`]
:CL_INVALID_PIPE_SIZE: <<CL_INVALID_PIPE_SIZE,{CL_INVALID_PIPE_SIZE_label}>>
:CL_INVALID_PIPE_SIZE_anchor: [[CL_INVALID_PIPE_SIZE]]{CL_INVALID_PIPE_SIZE}

// CL_INVALID_DEVICE_QUEUE
:CL_INVALID_DEVICE_QUEUE_label: pass:q[`CL_&#8203;INVALID_&#8203;DEVICE_&#8203;QUEUE`]
:CL_INVALID_DEVICE_QUEUE: <<CL_INVALID_DEVICE_QUEUE,{CL_INVALID_DEVICE_QUEUE_label}>>
:CL_INVALID_DEVICE_QUEUE_anchor: [[CL_INVALID_DEVICE_QUEUE]]{CL_INVALID_DEVICE_QUEUE}

// CL_INVALID_SPEC_ID
:CL_INVALID_SPEC_ID_label: pass:q[`CL_&#8203;INVALID_&#8203;SPEC_&#8203;ID`]
:CL_INVALID_SPEC_ID: <<CL_INVALID_SPEC_ID,{CL_INVALID_SPEC_ID_label}>>
:CL_INVALID_SPEC_ID_anchor: [[CL_INVALID_SPEC_ID]]{CL_INVALID_SPEC_ID}

// CL_MAX_SIZE_RESTRICTION_EXCEEDED
:CL_MAX_SIZE_RESTRICTION_EXCEEDED_label: pass:q[`CL_&#8203;MAX_&#8203;SIZE_&#8203;RESTRICTION_&#8203;EXCEEDED`]
:CL_MAX_SIZE_RESTRICTION_EXCEEDED: <<CL_MAX_SIZE_RESTRICTION_EXCEEDED,{CL_MAX_SIZE_RESTRICTION_EXCEEDED_label}>>
:CL_MAX_SIZE_RESTRICTION_EXCEEDED_anchor: [[CL_MAX_SIZE_RESTRICTION_EXCEEDED]]{CL_MAX_SIZE_RESTRICTION_EXCEEDED}

// CL_FALSE
:CL_FALSE_label: pass:q[`CL_&#8203;FALSE`]
:CL_FALSE: <<CL_FALSE,{CL_FALSE_label}>>
:CL_FALSE_anchor: [[CL_FALSE]]{CL_FALSE}

// CL_TRUE
:CL_TRUE_label: pass:q[`CL_&#8203;TRUE`]
:CL_TRUE: <<CL_TRUE,{CL_TRUE_label}>>
:CL_TRUE_anchor: [[CL_TRUE]]{CL_TRUE}

// CL_BLOCKING
:CL_BLOCKING_label: pass:q[`CL_&#8203;BLOCKING`]
:CL_BLOCKING: <<CL_BLOCKING,{CL_BLOCKING_label}>>
:CL_BLOCKING_anchor: [[CL_BLOCKING]]{CL_BLOCKING}

// CL_NON_BLOCKING
:CL_NON_BLOCKING_label: pass:q[`CL_&#8203;NON_&#8203;BLOCKING`]
:CL_NON_BLOCKING: <<CL_NON_BLOCKING,{CL_NON_BLOCKING_label}>>
:CL_NON_BLOCKING_anchor: [[CL_NON_BLOCKING]]{CL_NON_BLOCKING}

// CL_PLATFORM_PROFILE
:CL_PLATFORM_PROFILE_label: pass:q[`CL_&#8203;PLATFORM_&#8203;PROFILE`]
:CL_PLATFORM_PROFILE: <<CL_PLATFORM_PROFILE,{CL_PLATFORM_PROFILE_label}>>
:CL_PLATFORM_PROFILE_anchor: [[CL_PLATFORM_PROFILE]]{CL_PLATFORM_PROFILE}

// CL_PLATFORM_VERSION
:CL_PLATFORM_VERSION_label: pass:q[`CL_&#8203;PLATFORM_&#8203;VERSION`]
:CL_PLATFORM_VERSION: <<CL_PLATFORM_VERSION,{CL_PLATFORM_VERSION_label}>>
:CL_PLATFORM_VERSION_anchor: [[CL_PLATFORM_VERSION]]{CL_PLATFORM_VERSION}

// CL_PLATFORM_NAME
:CL_PLATFORM_NAME_label: pass:q[`CL_&#8203;PLATFORM_&#8203;NAME`]
:CL_PLATFORM_NAME: <<CL_PLATFORM_NAME,{CL_PLATFORM_NAME_label}>>
:CL_PLATFORM_NAME_anchor: [[CL_PLATFORM_NAME]]{CL_PLATFORM_NAME}

// CL_PLATFORM_VENDOR
:CL_PLATFORM_VENDOR_label: pass:q[`CL_&#8203;PLATFORM_&#8203;VENDOR`]
:CL_PLATFORM_VENDOR: <<CL_PLATFORM_VENDOR,{CL_PLATFORM_VENDOR_label}>>
:CL_PLATFORM_VENDOR_anchor: [[CL_PLATFORM_VENDOR]]{CL_PLATFORM_VENDOR}

// CL_PLATFORM_EXTENSIONS
:CL_PLATFORM_EXTENSIONS_label: pass:q[`CL_&#8203;PLATFORM_&#8203;EXTENSIONS`]
:CL_PLATFORM_EXTENSIONS: <<CL_PLATFORM_EXTENSIONS,{CL_PLATFORM_EXTENSIONS_label}>>
:CL_PLATFORM_EXTENSIONS_anchor: [[CL_PLATFORM_EXTENSIONS]]{CL_PLATFORM_EXTENSIONS}

// CL_PLATFORM_HOST_TIMER_RESOLUTION
:CL_PLATFORM_HOST_TIMER_RESOLUTION_label: pass:q[`CL_&#8203;PLATFORM_&#8203;HOST_&#8203;TIMER_&#8203;RESOLUTION`]
:CL_PLATFORM_HOST_TIMER_RESOLUTION: <<CL_PLATFORM_HOST_TIMER_RESOLUTION,{CL_PLATFORM_HOST_TIMER_RESOLUTION_label}>>
:CL_PLATFORM_HOST_TIMER_RESOLUTION_anchor: [[CL_PLATFORM_HOST_TIMER_RESOLUTION]]{CL_PLATFORM_HOST_TIMER_RESOLUTION}

// CL_DEVICE_TYPE_DEFAULT
:CL_DEVICE_TYPE_DEFAULT_label: pass:q[`CL_&#8203;DEVICE_&#8203;TYPE_&#8203;DEFAULT`]
:CL_DEVICE_TYPE_DEFAULT: <<CL_DEVICE_TYPE_DEFAULT,{CL_DEVICE_TYPE_DEFAULT_label}>>
:CL_DEVICE_TYPE_DEFAULT_anchor: [[CL_DEVICE_TYPE_DEFAULT]]{CL_DEVICE_TYPE_DEFAULT}

// CL_DEVICE_TYPE_CPU
:CL_DEVICE_TYPE_CPU_label: pass:q[`CL_&#8203;DEVICE_&#8203;TYPE_&#8203;CPU`]
:CL_DEVICE_TYPE_CPU: <<CL_DEVICE_TYPE_CPU,{CL_DEVICE_TYPE_CPU_label}>>
:CL_DEVICE_TYPE_CPU_anchor: [[CL_DEVICE_TYPE_CPU]]{CL_DEVICE_TYPE_CPU}

// CL_DEVICE_TYPE_GPU
:CL_DEVICE_TYPE_GPU_label: pass:q[`CL_&#8203;DEVICE_&#8203;TYPE_&#8203;GPU`]
:CL_DEVICE_TYPE_GPU: <<CL_DEVICE_TYPE_GPU,{CL_DEVICE_TYPE_GPU_label}>>
:CL_DEVICE_TYPE_GPU_anchor: [[CL_DEVICE_TYPE_GPU]]{CL_DEVICE_TYPE_GPU}

// CL_DEVICE_TYPE_ACCELERATOR
:CL_DEVICE_TYPE_ACCELERATOR_label: pass:q[`CL_&#8203;DEVICE_&#8203;TYPE_&#8203;ACCELERATOR`]
:CL_DEVICE_TYPE_ACCELERATOR: <<CL_DEVICE_TYPE_ACCELERATOR,{CL_DEVICE_TYPE_ACCELERATOR_label}>>
:CL_DEVICE_TYPE_ACCELERATOR_anchor: [[CL_DEVICE_TYPE_ACCELERATOR]]{CL_DEVICE_TYPE_ACCELERATOR}

// CL_DEVICE_TYPE_CUSTOM
:CL_DEVICE_TYPE_CUSTOM_label: pass:q[`CL_&#8203;DEVICE_&#8203;TYPE_&#8203;CUSTOM`]
:CL_DEVICE_TYPE_CUSTOM: <<CL_DEVICE_TYPE_CUSTOM,{CL_DEVICE_TYPE_CUSTOM_label}>>
:CL_DEVICE_TYPE_CUSTOM_anchor: [[CL_DEVICE_TYPE_CUSTOM]]{CL_DEVICE_TYPE_CUSTOM}

// CL_DEVICE_TYPE_ALL
:CL_DEVICE_TYPE_ALL_label: pass:q[`CL_&#8203;DEVICE_&#8203;TYPE_&#8203;ALL`]
:CL_DEVICE_TYPE_ALL: <<CL_DEVICE_TYPE_ALL,{CL_DEVICE_TYPE_ALL_label}>>
:CL_DEVICE_TYPE_ALL_anchor: [[CL_DEVICE_TYPE_ALL]]{CL_DEVICE_TYPE_ALL}

// CL_DEVICE_TYPE
:CL_DEVICE_TYPE_label: pass:q[`CL_&#8203;DEVICE_&#8203;TYPE`]
:CL_DEVICE_TYPE: <<CL_DEVICE_TYPE,{CL_DEVICE_TYPE_label}>>
:CL_DEVICE_TYPE_anchor: [[CL_DEVICE_TYPE]]{CL_DEVICE_TYPE}

// CL_DEVICE_VENDOR_ID
:CL_DEVICE_VENDOR_ID_label: pass:q[`CL_&#8203;DEVICE_&#8203;VENDOR_&#8203;ID`]
:CL_DEVICE_VENDOR_ID: <<CL_DEVICE_VENDOR_ID,{CL_DEVICE_VENDOR_ID_label}>>
:CL_DEVICE_VENDOR_ID_anchor: [[CL_DEVICE_VENDOR_ID]]{CL_DEVICE_VENDOR_ID}

// CL_DEVICE_MAX_COMPUTE_UNITS
:CL_DEVICE_MAX_COMPUTE_UNITS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;COMPUTE_&#8203;UNITS`]
:CL_DEVICE_MAX_COMPUTE_UNITS: <<CL_DEVICE_MAX_COMPUTE_UNITS,{CL_DEVICE_MAX_COMPUTE_UNITS_label}>>
:CL_DEVICE_MAX_COMPUTE_UNITS_anchor: [[CL_DEVICE_MAX_COMPUTE_UNITS]]{CL_DEVICE_MAX_COMPUTE_UNITS}

// CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
:CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;WORK_&#8203;ITEM_&#8203;DIMENSIONS`]
:CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS: <<CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS,{CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS_label}>>
:CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS_anchor: [[CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS]]{CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS}

// CL_DEVICE_MAX_WORK_GROUP_SIZE
:CL_DEVICE_MAX_WORK_GROUP_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;WORK_&#8203;GROUP_&#8203;SIZE`]
:CL_DEVICE_MAX_WORK_GROUP_SIZE: <<CL_DEVICE_MAX_WORK_GROUP_SIZE,{CL_DEVICE_MAX_WORK_GROUP_SIZE_label}>>
:CL_DEVICE_MAX_WORK_GROUP_SIZE_anchor: [[CL_DEVICE_MAX_WORK_GROUP_SIZE]]{CL_DEVICE_MAX_WORK_GROUP_SIZE}

// CL_DEVICE_MAX_WORK_ITEM_SIZES
:CL_DEVICE_MAX_WORK_ITEM_SIZES_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;WORK_&#8203;ITEM_&#8203;SIZES`]
:CL_DEVICE_MAX_WORK_ITEM_SIZES: <<CL_DEVICE_MAX_WORK_ITEM_SIZES,{CL_DEVICE_MAX_WORK_ITEM_SIZES_label}>>
:CL_DEVICE_MAX_WORK_ITEM_SIZES_anchor: [[CL_DEVICE_MAX_WORK_ITEM_SIZES]]{CL_DEVICE_MAX_WORK_ITEM_SIZES}

// CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;VECTOR_&#8203;WIDTH_&#8203;CHAR`]
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR: <<CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR,{CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR_label}>>
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR_anchor: [[CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR]]{CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR}

// CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;VECTOR_&#8203;WIDTH_&#8203;SHORT`]
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT: <<CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT,{CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT_label}>>
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT_anchor: [[CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT]]{CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT}

// CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;VECTOR_&#8203;WIDTH_&#8203;INT`]
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT: <<CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT,{CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT_label}>>
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT_anchor: [[CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT]]{CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT}

// CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;VECTOR_&#8203;WIDTH_&#8203;LONG`]
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG: <<CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG,{CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG_label}>>
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG_anchor: [[CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG]]{CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG}

// CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;VECTOR_&#8203;WIDTH_&#8203;FLOAT`]
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT: <<CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT,{CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT_label}>>
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT_anchor: [[CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT]]{CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT}

// CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;VECTOR_&#8203;WIDTH_&#8203;DOUBLE`]
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE: <<CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE,{CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE_label}>>
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE_anchor: [[CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE]]{CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE}

// CL_DEVICE_MAX_CLOCK_FREQUENCY
:CL_DEVICE_MAX_CLOCK_FREQUENCY_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;CLOCK_&#8203;FREQUENCY`]
:CL_DEVICE_MAX_CLOCK_FREQUENCY: <<CL_DEVICE_MAX_CLOCK_FREQUENCY,{CL_DEVICE_MAX_CLOCK_FREQUENCY_label}>>
:CL_DEVICE_MAX_CLOCK_FREQUENCY_anchor: [[CL_DEVICE_MAX_CLOCK_FREQUENCY]]{CL_DEVICE_MAX_CLOCK_FREQUENCY}

// CL_DEVICE_ADDRESS_BITS
:CL_DEVICE_ADDRESS_BITS_label: pass:q[`CL_&#8203;DEVICE_&#8203;ADDRESS_&#8203;BITS`]
:CL_DEVICE_ADDRESS_BITS: <<CL_DEVICE_ADDRESS_BITS,{CL_DEVICE_ADDRESS_BITS_label}>>
:CL_DEVICE_ADDRESS_BITS_anchor: [[CL_DEVICE_ADDRESS_BITS]]{CL_DEVICE_ADDRESS_BITS}

// CL_DEVICE_MAX_READ_IMAGE_ARGS
:CL_DEVICE_MAX_READ_IMAGE_ARGS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;READ_&#8203;IMAGE_&#8203;ARGS`]
:CL_DEVICE_MAX_READ_IMAGE_ARGS: <<CL_DEVICE_MAX_READ_IMAGE_ARGS,{CL_DEVICE_MAX_READ_IMAGE_ARGS_label}>>
:CL_DEVICE_MAX_READ_IMAGE_ARGS_anchor: [[CL_DEVICE_MAX_READ_IMAGE_ARGS]]{CL_DEVICE_MAX_READ_IMAGE_ARGS}

// CL_DEVICE_MAX_WRITE_IMAGE_ARGS
:CL_DEVICE_MAX_WRITE_IMAGE_ARGS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;WRITE_&#8203;IMAGE_&#8203;ARGS`]
:CL_DEVICE_MAX_WRITE_IMAGE_ARGS: <<CL_DEVICE_MAX_WRITE_IMAGE_ARGS,{CL_DEVICE_MAX_WRITE_IMAGE_ARGS_label}>>
:CL_DEVICE_MAX_WRITE_IMAGE_ARGS_anchor: [[CL_DEVICE_MAX_WRITE_IMAGE_ARGS]]{CL_DEVICE_MAX_WRITE_IMAGE_ARGS}

// CL_DEVICE_MAX_MEM_ALLOC_SIZE
:CL_DEVICE_MAX_MEM_ALLOC_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;MEM_&#8203;ALLOC_&#8203;SIZE`]
:CL_DEVICE_MAX_MEM_ALLOC_SIZE: <<CL_DEVICE_MAX_MEM_ALLOC_SIZE,{CL_DEVICE_MAX_MEM_ALLOC_SIZE_label}>>
:CL_DEVICE_MAX_MEM_ALLOC_SIZE_anchor: [[CL_DEVICE_MAX_MEM_ALLOC_SIZE]]{CL_DEVICE_MAX_MEM_ALLOC_SIZE}

// CL_DEVICE_IMAGE2D_MAX_WIDTH
:CL_DEVICE_IMAGE2D_MAX_WIDTH_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE2D_&#8203;MAX_&#8203;WIDTH`]
:CL_DEVICE_IMAGE2D_MAX_WIDTH: <<CL_DEVICE_IMAGE2D_MAX_WIDTH,{CL_DEVICE_IMAGE2D_MAX_WIDTH_label}>>
:CL_DEVICE_IMAGE2D_MAX_WIDTH_anchor: [[CL_DEVICE_IMAGE2D_MAX_WIDTH]]{CL_DEVICE_IMAGE2D_MAX_WIDTH}

// CL_DEVICE_IMAGE2D_MAX_HEIGHT
:CL_DEVICE_IMAGE2D_MAX_HEIGHT_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE2D_&#8203;MAX_&#8203;HEIGHT`]
:CL_DEVICE_IMAGE2D_MAX_HEIGHT: <<CL_DEVICE_IMAGE2D_MAX_HEIGHT,{CL_DEVICE_IMAGE2D_MAX_HEIGHT_label}>>
:CL_DEVICE_IMAGE2D_MAX_HEIGHT_anchor: [[CL_DEVICE_IMAGE2D_MAX_HEIGHT]]{CL_DEVICE_IMAGE2D_MAX_HEIGHT}

// CL_DEVICE_IMAGE3D_MAX_WIDTH
:CL_DEVICE_IMAGE3D_MAX_WIDTH_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE3D_&#8203;MAX_&#8203;WIDTH`]
:CL_DEVICE_IMAGE3D_MAX_WIDTH: <<CL_DEVICE_IMAGE3D_MAX_WIDTH,{CL_DEVICE_IMAGE3D_MAX_WIDTH_label}>>
:CL_DEVICE_IMAGE3D_MAX_WIDTH_anchor: [[CL_DEVICE_IMAGE3D_MAX_WIDTH]]{CL_DEVICE_IMAGE3D_MAX_WIDTH}

// CL_DEVICE_IMAGE3D_MAX_HEIGHT
:CL_DEVICE_IMAGE3D_MAX_HEIGHT_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE3D_&#8203;MAX_&#8203;HEIGHT`]
:CL_DEVICE_IMAGE3D_MAX_HEIGHT: <<CL_DEVICE_IMAGE3D_MAX_HEIGHT,{CL_DEVICE_IMAGE3D_MAX_HEIGHT_label}>>
:CL_DEVICE_IMAGE3D_MAX_HEIGHT_anchor: [[CL_DEVICE_IMAGE3D_MAX_HEIGHT]]{CL_DEVICE_IMAGE3D_MAX_HEIGHT}

// CL_DEVICE_IMAGE3D_MAX_DEPTH
:CL_DEVICE_IMAGE3D_MAX_DEPTH_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE3D_&#8203;MAX_&#8203;DEPTH`]
:CL_DEVICE_IMAGE3D_MAX_DEPTH: <<CL_DEVICE_IMAGE3D_MAX_DEPTH,{CL_DEVICE_IMAGE3D_MAX_DEPTH_label}>>
:CL_DEVICE_IMAGE3D_MAX_DEPTH_anchor: [[CL_DEVICE_IMAGE3D_MAX_DEPTH]]{CL_DEVICE_IMAGE3D_MAX_DEPTH}

// CL_DEVICE_IMAGE_SUPPORT
:CL_DEVICE_IMAGE_SUPPORT_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE_&#8203;SUPPORT`]
:CL_DEVICE_IMAGE_SUPPORT: <<CL_DEVICE_IMAGE_SUPPORT,{CL_DEVICE_IMAGE_SUPPORT_label}>>
:CL_DEVICE_IMAGE_SUPPORT_anchor: [[CL_DEVICE_IMAGE_SUPPORT]]{CL_DEVICE_IMAGE_SUPPORT}

// CL_DEVICE_MAX_PARAMETER_SIZE
:CL_DEVICE_MAX_PARAMETER_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;PARAMETER_&#8203;SIZE`]
:CL_DEVICE_MAX_PARAMETER_SIZE: <<CL_DEVICE_MAX_PARAMETER_SIZE,{CL_DEVICE_MAX_PARAMETER_SIZE_label}>>
:CL_DEVICE_MAX_PARAMETER_SIZE_anchor: [[CL_DEVICE_MAX_PARAMETER_SIZE]]{CL_DEVICE_MAX_PARAMETER_SIZE}

// CL_DEVICE_MAX_SAMPLERS
:CL_DEVICE_MAX_SAMPLERS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;SAMPLERS`]
:CL_DEVICE_MAX_SAMPLERS: <<CL_DEVICE_MAX_SAMPLERS,{CL_DEVICE_MAX_SAMPLERS_label}>>
:CL_DEVICE_MAX_SAMPLERS_anchor: [[CL_DEVICE_MAX_SAMPLERS]]{CL_DEVICE_MAX_SAMPLERS}

// CL_DEVICE_MEM_BASE_ADDR_ALIGN
:CL_DEVICE_MEM_BASE_ADDR_ALIGN_label: pass:q[`CL_&#8203;DEVICE_&#8203;MEM_&#8203;BASE_&#8203;ADDR_&#8203;ALIGN`]
:CL_DEVICE_MEM_BASE_ADDR_ALIGN: <<CL_DEVICE_MEM_BASE_ADDR_ALIGN,{CL_DEVICE_MEM_BASE_ADDR_ALIGN_label}>>
:CL_DEVICE_MEM_BASE_ADDR_ALIGN_anchor: [[CL_DEVICE_MEM_BASE_ADDR_ALIGN]]{CL_DEVICE_MEM_BASE_ADDR_ALIGN}

// CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE
:CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;MIN_&#8203;DATA_&#8203;TYPE_&#8203;ALIGN_&#8203;SIZE`]
:CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE: <<CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE,{CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE_label}>>
:CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE_anchor: [[CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE]]{CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE}

// CL_DEVICE_SINGLE_FP_CONFIG
:CL_DEVICE_SINGLE_FP_CONFIG_label: pass:q[`CL_&#8203;DEVICE_&#8203;SINGLE_&#8203;FP_&#8203;CONFIG`]
:CL_DEVICE_SINGLE_FP_CONFIG: <<CL_DEVICE_SINGLE_FP_CONFIG,{CL_DEVICE_SINGLE_FP_CONFIG_label}>>
:CL_DEVICE_SINGLE_FP_CONFIG_anchor: [[CL_DEVICE_SINGLE_FP_CONFIG]]{CL_DEVICE_SINGLE_FP_CONFIG}

// CL_DEVICE_GLOBAL_MEM_CACHE_TYPE
:CL_DEVICE_GLOBAL_MEM_CACHE_TYPE_label: pass:q[`CL_&#8203;DEVICE_&#8203;GLOBAL_&#8203;MEM_&#8203;CACHE_&#8203;TYPE`]
:CL_DEVICE_GLOBAL_MEM_CACHE_TYPE: <<CL_DEVICE_GLOBAL_MEM_CACHE_TYPE,{CL_DEVICE_GLOBAL_MEM_CACHE_TYPE_label}>>
:CL_DEVICE_GLOBAL_MEM_CACHE_TYPE_anchor: [[CL_DEVICE_GLOBAL_MEM_CACHE_TYPE]]{CL_DEVICE_GLOBAL_MEM_CACHE_TYPE}

// CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE
:CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;GLOBAL_&#8203;MEM_&#8203;CACHELINE_&#8203;SIZE`]
:CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE: <<CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE,{CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE_label}>>
:CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE_anchor: [[CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE]]{CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE}

// CL_DEVICE_GLOBAL_MEM_CACHE_SIZE
:CL_DEVICE_GLOBAL_MEM_CACHE_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;GLOBAL_&#8203;MEM_&#8203;CACHE_&#8203;SIZE`]
:CL_DEVICE_GLOBAL_MEM_CACHE_SIZE: <<CL_DEVICE_GLOBAL_MEM_CACHE_SIZE,{CL_DEVICE_GLOBAL_MEM_CACHE_SIZE_label}>>
:CL_DEVICE_GLOBAL_MEM_CACHE_SIZE_anchor: [[CL_DEVICE_GLOBAL_MEM_CACHE_SIZE]]{CL_DEVICE_GLOBAL_MEM_CACHE_SIZE}

// CL_DEVICE_GLOBAL_MEM_SIZE
:CL_DEVICE_GLOBAL_MEM_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;GLOBAL_&#8203;MEM_&#8203;SIZE`]
:CL_DEVICE_GLOBAL_MEM_SIZE: <<CL_DEVICE_GLOBAL_MEM_SIZE,{CL_DEVICE_GLOBAL_MEM_SIZE_label}>>
:CL_DEVICE_GLOBAL_MEM_SIZE_anchor: [[CL_DEVICE_GLOBAL_MEM_SIZE]]{CL_DEVICE_GLOBAL_MEM_SIZE}

// CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
:CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;CONSTANT_&#8203;BUFFER_&#8203;SIZE`]
:CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE: <<CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE,{CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE_label}>>
:CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE_anchor: [[CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE]]{CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE}

// CL_DEVICE_MAX_CONSTANT_ARGS
:CL_DEVICE_MAX_CONSTANT_ARGS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;CONSTANT_&#8203;ARGS`]
:CL_DEVICE_MAX_CONSTANT_ARGS: <<CL_DEVICE_MAX_CONSTANT_ARGS,{CL_DEVICE_MAX_CONSTANT_ARGS_label}>>
:CL_DEVICE_MAX_CONSTANT_ARGS_anchor: [[CL_DEVICE_MAX_CONSTANT_ARGS]]{CL_DEVICE_MAX_CONSTANT_ARGS}

// CL_DEVICE_LOCAL_MEM_TYPE
:CL_DEVICE_LOCAL_MEM_TYPE_label: pass:q[`CL_&#8203;DEVICE_&#8203;LOCAL_&#8203;MEM_&#8203;TYPE`]
:CL_DEVICE_LOCAL_MEM_TYPE: <<CL_DEVICE_LOCAL_MEM_TYPE,{CL_DEVICE_LOCAL_MEM_TYPE_label}>>
:CL_DEVICE_LOCAL_MEM_TYPE_anchor: [[CL_DEVICE_LOCAL_MEM_TYPE]]{CL_DEVICE_LOCAL_MEM_TYPE}

// CL_DEVICE_LOCAL_MEM_SIZE
:CL_DEVICE_LOCAL_MEM_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;LOCAL_&#8203;MEM_&#8203;SIZE`]
:CL_DEVICE_LOCAL_MEM_SIZE: <<CL_DEVICE_LOCAL_MEM_SIZE,{CL_DEVICE_LOCAL_MEM_SIZE_label}>>
:CL_DEVICE_LOCAL_MEM_SIZE_anchor: [[CL_DEVICE_LOCAL_MEM_SIZE]]{CL_DEVICE_LOCAL_MEM_SIZE}

// CL_DEVICE_ERROR_CORRECTION_SUPPORT
:CL_DEVICE_ERROR_CORRECTION_SUPPORT_label: pass:q[`CL_&#8203;DEVICE_&#8203;ERROR_&#8203;CORRECTION_&#8203;SUPPORT`]
:CL_DEVICE_ERROR_CORRECTION_SUPPORT: <<CL_DEVICE_ERROR_CORRECTION_SUPPORT,{CL_DEVICE_ERROR_CORRECTION_SUPPORT_label}>>
:CL_DEVICE_ERROR_CORRECTION_SUPPORT_anchor: [[CL_DEVICE_ERROR_CORRECTION_SUPPORT]]{CL_DEVICE_ERROR_CORRECTION_SUPPORT}

// CL_DEVICE_PROFILING_TIMER_RESOLUTION
:CL_DEVICE_PROFILING_TIMER_RESOLUTION_label: pass:q[`CL_&#8203;DEVICE_&#8203;PROFILING_&#8203;TIMER_&#8203;RESOLUTION`]
:CL_DEVICE_PROFILING_TIMER_RESOLUTION: <<CL_DEVICE_PROFILING_TIMER_RESOLUTION,{CL_DEVICE_PROFILING_TIMER_RESOLUTION_label}>>
:CL_DEVICE_PROFILING_TIMER_RESOLUTION_anchor: [[CL_DEVICE_PROFILING_TIMER_RESOLUTION]]{CL_DEVICE_PROFILING_TIMER_RESOLUTION}

// CL_DEVICE_ENDIAN_LITTLE
:CL_DEVICE_ENDIAN_LITTLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;ENDIAN_&#8203;LITTLE`]
:CL_DEVICE_ENDIAN_LITTLE: <<CL_DEVICE_ENDIAN_LITTLE,{CL_DEVICE_ENDIAN_LITTLE_label}>>
:CL_DEVICE_ENDIAN_LITTLE_anchor: [[CL_DEVICE_ENDIAN_LITTLE]]{CL_DEVICE_ENDIAN_LITTLE}

// CL_DEVICE_AVAILABLE
:CL_DEVICE_AVAILABLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;AVAILABLE`]
:CL_DEVICE_AVAILABLE: <<CL_DEVICE_AVAILABLE,{CL_DEVICE_AVAILABLE_label}>>
:CL_DEVICE_AVAILABLE_anchor: [[CL_DEVICE_AVAILABLE]]{CL_DEVICE_AVAILABLE}

// CL_DEVICE_COMPILER_AVAILABLE
:CL_DEVICE_COMPILER_AVAILABLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;COMPILER_&#8203;AVAILABLE`]
:CL_DEVICE_COMPILER_AVAILABLE: <<CL_DEVICE_COMPILER_AVAILABLE,{CL_DEVICE_COMPILER_AVAILABLE_label}>>
:CL_DEVICE_COMPILER_AVAILABLE_anchor: [[CL_DEVICE_COMPILER_AVAILABLE]]{CL_DEVICE_COMPILER_AVAILABLE}

// CL_DEVICE_EXECUTION_CAPABILITIES
:CL_DEVICE_EXECUTION_CAPABILITIES_label: pass:q[`CL_&#8203;DEVICE_&#8203;EXECUTION_&#8203;CAPABILITIES`]
:CL_DEVICE_EXECUTION_CAPABILITIES: <<CL_DEVICE_EXECUTION_CAPABILITIES,{CL_DEVICE_EXECUTION_CAPABILITIES_label}>>
:CL_DEVICE_EXECUTION_CAPABILITIES_anchor: [[CL_DEVICE_EXECUTION_CAPABILITIES]]{CL_DEVICE_EXECUTION_CAPABILITIES}

// CL_DEVICE_QUEUE_PROPERTIES
:CL_DEVICE_QUEUE_PROPERTIES_label: pass:q[`CL_&#8203;DEVICE_&#8203;QUEUE_&#8203;PROPERTIES`]
:CL_DEVICE_QUEUE_PROPERTIES: <<CL_DEVICE_QUEUE_PROPERTIES,{CL_DEVICE_QUEUE_PROPERTIES_label}>>
:CL_DEVICE_QUEUE_PROPERTIES_anchor: [[CL_DEVICE_QUEUE_PROPERTIES]]{CL_DEVICE_QUEUE_PROPERTIES}

// CL_DEVICE_QUEUE_ON_HOST_PROPERTIES
:CL_DEVICE_QUEUE_ON_HOST_PROPERTIES_label: pass:q[`CL_&#8203;DEVICE_&#8203;QUEUE_&#8203;ON_&#8203;HOST_&#8203;PROPERTIES`]
:CL_DEVICE_QUEUE_ON_HOST_PROPERTIES: <<CL_DEVICE_QUEUE_ON_HOST_PROPERTIES,{CL_DEVICE_QUEUE_ON_HOST_PROPERTIES_label}>>
:CL_DEVICE_QUEUE_ON_HOST_PROPERTIES_anchor: [[CL_DEVICE_QUEUE_ON_HOST_PROPERTIES]]{CL_DEVICE_QUEUE_ON_HOST_PROPERTIES}

// CL_DEVICE_NAME
:CL_DEVICE_NAME_label: pass:q[`CL_&#8203;DEVICE_&#8203;NAME`]
:CL_DEVICE_NAME: <<CL_DEVICE_NAME,{CL_DEVICE_NAME_label}>>
:CL_DEVICE_NAME_anchor: [[CL_DEVICE_NAME]]{CL_DEVICE_NAME}

// CL_DEVICE_VENDOR
:CL_DEVICE_VENDOR_label: pass:q[`CL_&#8203;DEVICE_&#8203;VENDOR`]
:CL_DEVICE_VENDOR: <<CL_DEVICE_VENDOR,{CL_DEVICE_VENDOR_label}>>
:CL_DEVICE_VENDOR_anchor: [[CL_DEVICE_VENDOR]]{CL_DEVICE_VENDOR}

// CL_DRIVER_VERSION
:CL_DRIVER_VERSION_label: pass:q[`CL_&#8203;DRIVER_&#8203;VERSION`]
:CL_DRIVER_VERSION: <<CL_DRIVER_VERSION,{CL_DRIVER_VERSION_label}>>
:CL_DRIVER_VERSION_anchor: [[CL_DRIVER_VERSION]]{CL_DRIVER_VERSION}

// CL_DEVICE_PROFILE
:CL_DEVICE_PROFILE_label: pass:q[`CL_&#8203;DEVICE_&#8203;PROFILE`]
:CL_DEVICE_PROFILE: <<CL_DEVICE_PROFILE,{CL_DEVICE_PROFILE_label}>>
:CL_DEVICE_PROFILE_anchor: [[CL_DEVICE_PROFILE]]{CL_DEVICE_PROFILE}

// CL_DEVICE_VERSION
:CL_DEVICE_VERSION_label: pass:q[`CL_&#8203;DEVICE_&#8203;VERSION`]
:CL_DEVICE_VERSION: <<CL_DEVICE_VERSION,{CL_DEVICE_VERSION_label}>>
:CL_DEVICE_VERSION_anchor: [[CL_DEVICE_VERSION]]{CL_DEVICE_VERSION}

// CL_DEVICE_EXTENSIONS
:CL_DEVICE_EXTENSIONS_label: pass:q[`CL_&#8203;DEVICE_&#8203;EXTENSIONS`]
:CL_DEVICE_EXTENSIONS: <<CL_DEVICE_EXTENSIONS,{CL_DEVICE_EXTENSIONS_label}>>
:CL_DEVICE_EXTENSIONS_anchor: [[CL_DEVICE_EXTENSIONS]]{CL_DEVICE_EXTENSIONS}

// CL_DEVICE_PLATFORM
:CL_DEVICE_PLATFORM_label: pass:q[`CL_&#8203;DEVICE_&#8203;PLATFORM`]
:CL_DEVICE_PLATFORM: <<CL_DEVICE_PLATFORM,{CL_DEVICE_PLATFORM_label}>>
:CL_DEVICE_PLATFORM_anchor: [[CL_DEVICE_PLATFORM]]{CL_DEVICE_PLATFORM}

// CL_DEVICE_DOUBLE_FP_CONFIG
:CL_DEVICE_DOUBLE_FP_CONFIG_label: pass:q[`CL_&#8203;DEVICE_&#8203;DOUBLE_&#8203;FP_&#8203;CONFIG`]
:CL_DEVICE_DOUBLE_FP_CONFIG: <<CL_DEVICE_DOUBLE_FP_CONFIG,{CL_DEVICE_DOUBLE_FP_CONFIG_label}>>
:CL_DEVICE_DOUBLE_FP_CONFIG_anchor: [[CL_DEVICE_DOUBLE_FP_CONFIG]]{CL_DEVICE_DOUBLE_FP_CONFIG}

// CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;VECTOR_&#8203;WIDTH_&#8203;HALF`]
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF: <<CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF,{CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF_label}>>
:CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF_anchor: [[CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF]]{CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF}

// CL_DEVICE_HOST_UNIFIED_MEMORY
:CL_DEVICE_HOST_UNIFIED_MEMORY_label: pass:q[`CL_&#8203;DEVICE_&#8203;HOST_&#8203;UNIFIED_&#8203;MEMORY`]
:CL_DEVICE_HOST_UNIFIED_MEMORY: <<CL_DEVICE_HOST_UNIFIED_MEMORY,{CL_DEVICE_HOST_UNIFIED_MEMORY_label}>>
:CL_DEVICE_HOST_UNIFIED_MEMORY_anchor: [[CL_DEVICE_HOST_UNIFIED_MEMORY]]{CL_DEVICE_HOST_UNIFIED_MEMORY}

// CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR
:CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR_label: pass:q[`CL_&#8203;DEVICE_&#8203;NATIVE_&#8203;VECTOR_&#8203;WIDTH_&#8203;CHAR`]
:CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR: <<CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR,{CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR_label}>>
:CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR_anchor: [[CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR]]{CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR}

// CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT
:CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT_label: pass:q[`CL_&#8203;DEVICE_&#8203;NATIVE_&#8203;VECTOR_&#8203;WIDTH_&#8203;SHORT`]
:CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT: <<CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT,{CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT_label}>>
:CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT_anchor: [[CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT]]{CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT}

// CL_DEVICE_NATIVE_VECTOR_WIDTH_INT
:CL_DEVICE_NATIVE_VECTOR_WIDTH_INT_label: pass:q[`CL_&#8203;DEVICE_&#8203;NATIVE_&#8203;VECTOR_&#8203;WIDTH_&#8203;INT`]
:CL_DEVICE_NATIVE_VECTOR_WIDTH_INT: <<CL_DEVICE_NATIVE_VECTOR_WIDTH_INT,{CL_DEVICE_NATIVE_VECTOR_WIDTH_INT_label}>>
:CL_DEVICE_NATIVE_VECTOR_WIDTH_INT_anchor: [[CL_DEVICE_NATIVE_VECTOR_WIDTH_INT]]{CL_DEVICE_NATIVE_VECTOR_WIDTH_INT}

// CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG
:CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG_label: pass:q[`CL_&#8203;DEVICE_&#8203;NATIVE_&#8203;VECTOR_&#8203;WIDTH_&#8203;LONG`]
:CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG: <<CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG,{CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG_label}>>
:CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG_anchor: [[CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG]]{CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG}

// CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT
:CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT_label: pass:q[`CL_&#8203;DEVICE_&#8203;NATIVE_&#8203;VECTOR_&#8203;WIDTH_&#8203;FLOAT`]
:CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT: <<CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT,{CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT_label}>>
:CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT_anchor: [[CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT]]{CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT}

// CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE
:CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;NATIVE_&#8203;VECTOR_&#8203;WIDTH_&#8203;DOUBLE`]
:CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE: <<CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE,{CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE_label}>>
:CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE_anchor: [[CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE]]{CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE}

// CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF
:CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF_label: pass:q[`CL_&#8203;DEVICE_&#8203;NATIVE_&#8203;VECTOR_&#8203;WIDTH_&#8203;HALF`]
:CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF: <<CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF,{CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF_label}>>
:CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF_anchor: [[CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF]]{CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF}

// CL_DEVICE_OPENCL_C_VERSION
:CL_DEVICE_OPENCL_C_VERSION_label: pass:q[`CL_&#8203;DEVICE_&#8203;OPENCL_&#8203;C_&#8203;VERSION`]
:CL_DEVICE_OPENCL_C_VERSION: <<CL_DEVICE_OPENCL_C_VERSION,{CL_DEVICE_OPENCL_C_VERSION_label}>>
:CL_DEVICE_OPENCL_C_VERSION_anchor: [[CL_DEVICE_OPENCL_C_VERSION]]{CL_DEVICE_OPENCL_C_VERSION}

// CL_DEVICE_LINKER_AVAILABLE
:CL_DEVICE_LINKER_AVAILABLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;LINKER_&#8203;AVAILABLE`]
:CL_DEVICE_LINKER_AVAILABLE: <<CL_DEVICE_LINKER_AVAILABLE,{CL_DEVICE_LINKER_AVAILABLE_label}>>
:CL_DEVICE_LINKER_AVAILABLE_anchor: [[CL_DEVICE_LINKER_AVAILABLE]]{CL_DEVICE_LINKER_AVAILABLE}

// CL_DEVICE_BUILT_IN_KERNELS
:CL_DEVICE_BUILT_IN_KERNELS_label: pass:q[`CL_&#8203;DEVICE_&#8203;BUILT_&#8203;IN_&#8203;KERNELS`]
:CL_DEVICE_BUILT_IN_KERNELS: <<CL_DEVICE_BUILT_IN_KERNELS,{CL_DEVICE_BUILT_IN_KERNELS_label}>>
:CL_DEVICE_BUILT_IN_KERNELS_anchor: [[CL_DEVICE_BUILT_IN_KERNELS]]{CL_DEVICE_BUILT_IN_KERNELS}

// CL_DEVICE_IMAGE_MAX_BUFFER_SIZE
:CL_DEVICE_IMAGE_MAX_BUFFER_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE_&#8203;MAX_&#8203;BUFFER_&#8203;SIZE`]
:CL_DEVICE_IMAGE_MAX_BUFFER_SIZE: <<CL_DEVICE_IMAGE_MAX_BUFFER_SIZE,{CL_DEVICE_IMAGE_MAX_BUFFER_SIZE_label}>>
:CL_DEVICE_IMAGE_MAX_BUFFER_SIZE_anchor: [[CL_DEVICE_IMAGE_MAX_BUFFER_SIZE]]{CL_DEVICE_IMAGE_MAX_BUFFER_SIZE}

// CL_DEVICE_IMAGE_MAX_ARRAY_SIZE
:CL_DEVICE_IMAGE_MAX_ARRAY_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE_&#8203;MAX_&#8203;ARRAY_&#8203;SIZE`]
:CL_DEVICE_IMAGE_MAX_ARRAY_SIZE: <<CL_DEVICE_IMAGE_MAX_ARRAY_SIZE,{CL_DEVICE_IMAGE_MAX_ARRAY_SIZE_label}>>
:CL_DEVICE_IMAGE_MAX_ARRAY_SIZE_anchor: [[CL_DEVICE_IMAGE_MAX_ARRAY_SIZE]]{CL_DEVICE_IMAGE_MAX_ARRAY_SIZE}

// CL_DEVICE_PARENT_DEVICE
:CL_DEVICE_PARENT_DEVICE_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARENT_&#8203;DEVICE`]
:CL_DEVICE_PARENT_DEVICE: <<CL_DEVICE_PARENT_DEVICE,{CL_DEVICE_PARENT_DEVICE_label}>>
:CL_DEVICE_PARENT_DEVICE_anchor: [[CL_DEVICE_PARENT_DEVICE]]{CL_DEVICE_PARENT_DEVICE}

// CL_DEVICE_PARTITION_MAX_SUB_DEVICES
:CL_DEVICE_PARTITION_MAX_SUB_DEVICES_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;MAX_&#8203;SUB_&#8203;DEVICES`]
:CL_DEVICE_PARTITION_MAX_SUB_DEVICES: <<CL_DEVICE_PARTITION_MAX_SUB_DEVICES,{CL_DEVICE_PARTITION_MAX_SUB_DEVICES_label}>>
:CL_DEVICE_PARTITION_MAX_SUB_DEVICES_anchor: [[CL_DEVICE_PARTITION_MAX_SUB_DEVICES]]{CL_DEVICE_PARTITION_MAX_SUB_DEVICES}

// CL_DEVICE_PARTITION_PROPERTIES
:CL_DEVICE_PARTITION_PROPERTIES_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;PROPERTIES`]
:CL_DEVICE_PARTITION_PROPERTIES: <<CL_DEVICE_PARTITION_PROPERTIES,{CL_DEVICE_PARTITION_PROPERTIES_label}>>
:CL_DEVICE_PARTITION_PROPERTIES_anchor: [[CL_DEVICE_PARTITION_PROPERTIES]]{CL_DEVICE_PARTITION_PROPERTIES}

// CL_DEVICE_PARTITION_AFFINITY_DOMAIN
:CL_DEVICE_PARTITION_AFFINITY_DOMAIN_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;AFFINITY_&#8203;DOMAIN`]
:CL_DEVICE_PARTITION_AFFINITY_DOMAIN: <<CL_DEVICE_PARTITION_AFFINITY_DOMAIN,{CL_DEVICE_PARTITION_AFFINITY_DOMAIN_label}>>
:CL_DEVICE_PARTITION_AFFINITY_DOMAIN_anchor: [[CL_DEVICE_PARTITION_AFFINITY_DOMAIN]]{CL_DEVICE_PARTITION_AFFINITY_DOMAIN}

// CL_DEVICE_PARTITION_TYPE
:CL_DEVICE_PARTITION_TYPE_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;TYPE`]
:CL_DEVICE_PARTITION_TYPE: <<CL_DEVICE_PARTITION_TYPE,{CL_DEVICE_PARTITION_TYPE_label}>>
:CL_DEVICE_PARTITION_TYPE_anchor: [[CL_DEVICE_PARTITION_TYPE]]{CL_DEVICE_PARTITION_TYPE}

// CL_DEVICE_REFERENCE_COUNT
:CL_DEVICE_REFERENCE_COUNT_label: pass:q[`CL_&#8203;DEVICE_&#8203;REFERENCE_&#8203;COUNT`]
:CL_DEVICE_REFERENCE_COUNT: <<CL_DEVICE_REFERENCE_COUNT,{CL_DEVICE_REFERENCE_COUNT_label}>>
:CL_DEVICE_REFERENCE_COUNT_anchor: [[CL_DEVICE_REFERENCE_COUNT]]{CL_DEVICE_REFERENCE_COUNT}

// CL_DEVICE_PREFERRED_INTEROP_USER_SYNC
:CL_DEVICE_PREFERRED_INTEROP_USER_SYNC_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;INTEROP_&#8203;USER_&#8203;SYNC`]
:CL_DEVICE_PREFERRED_INTEROP_USER_SYNC: <<CL_DEVICE_PREFERRED_INTEROP_USER_SYNC,{CL_DEVICE_PREFERRED_INTEROP_USER_SYNC_label}>>
:CL_DEVICE_PREFERRED_INTEROP_USER_SYNC_anchor: [[CL_DEVICE_PREFERRED_INTEROP_USER_SYNC]]{CL_DEVICE_PREFERRED_INTEROP_USER_SYNC}

// CL_DEVICE_PRINTF_BUFFER_SIZE
:CL_DEVICE_PRINTF_BUFFER_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;PRINTF_&#8203;BUFFER_&#8203;SIZE`]
:CL_DEVICE_PRINTF_BUFFER_SIZE: <<CL_DEVICE_PRINTF_BUFFER_SIZE,{CL_DEVICE_PRINTF_BUFFER_SIZE_label}>>
:CL_DEVICE_PRINTF_BUFFER_SIZE_anchor: [[CL_DEVICE_PRINTF_BUFFER_SIZE]]{CL_DEVICE_PRINTF_BUFFER_SIZE}

// CL_DEVICE_IMAGE_PITCH_ALIGNMENT
:CL_DEVICE_IMAGE_PITCH_ALIGNMENT_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE_&#8203;PITCH_&#8203;ALIGNMENT`]
:CL_DEVICE_IMAGE_PITCH_ALIGNMENT: <<CL_DEVICE_IMAGE_PITCH_ALIGNMENT,{CL_DEVICE_IMAGE_PITCH_ALIGNMENT_label}>>
:CL_DEVICE_IMAGE_PITCH_ALIGNMENT_anchor: [[CL_DEVICE_IMAGE_PITCH_ALIGNMENT]]{CL_DEVICE_IMAGE_PITCH_ALIGNMENT}

// CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT
:CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT_label: pass:q[`CL_&#8203;DEVICE_&#8203;IMAGE_&#8203;BASE_&#8203;ADDRESS_&#8203;ALIGNMENT`]
:CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT: <<CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT,{CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT_label}>>
:CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT_anchor: [[CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT]]{CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT}

// CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS
:CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;READ_&#8203;WRITE_&#8203;IMAGE_&#8203;ARGS`]
:CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS: <<CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS,{CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS_label}>>
:CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS_anchor: [[CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS]]{CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS}

// CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE
:CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;GLOBAL_&#8203;VARIABLE_&#8203;SIZE`]
:CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE: <<CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE,{CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE_label}>>
:CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE_anchor: [[CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE]]{CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE}

// CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES
:CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES_label: pass:q[`CL_&#8203;DEVICE_&#8203;QUEUE_&#8203;ON_&#8203;DEVICE_&#8203;PROPERTIES`]
:CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES: <<CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES,{CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES_label}>>
:CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES_anchor: [[CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES]]{CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES}

// CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE
:CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;QUEUE_&#8203;ON_&#8203;DEVICE_&#8203;PREFERRED_&#8203;SIZE`]
:CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE: <<CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE,{CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE_label}>>
:CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE_anchor: [[CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE]]{CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE}

// CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE
:CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;QUEUE_&#8203;ON_&#8203;DEVICE_&#8203;MAX_&#8203;SIZE`]
:CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE: <<CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE,{CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE_label}>>
:CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE_anchor: [[CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE]]{CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE}

// CL_DEVICE_MAX_ON_DEVICE_QUEUES
:CL_DEVICE_MAX_ON_DEVICE_QUEUES_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;ON_&#8203;DEVICE_&#8203;QUEUES`]
:CL_DEVICE_MAX_ON_DEVICE_QUEUES: <<CL_DEVICE_MAX_ON_DEVICE_QUEUES,{CL_DEVICE_MAX_ON_DEVICE_QUEUES_label}>>
:CL_DEVICE_MAX_ON_DEVICE_QUEUES_anchor: [[CL_DEVICE_MAX_ON_DEVICE_QUEUES]]{CL_DEVICE_MAX_ON_DEVICE_QUEUES}

// CL_DEVICE_MAX_ON_DEVICE_EVENTS
:CL_DEVICE_MAX_ON_DEVICE_EVENTS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;ON_&#8203;DEVICE_&#8203;EVENTS`]
:CL_DEVICE_MAX_ON_DEVICE_EVENTS: <<CL_DEVICE_MAX_ON_DEVICE_EVENTS,{CL_DEVICE_MAX_ON_DEVICE_EVENTS_label}>>
:CL_DEVICE_MAX_ON_DEVICE_EVENTS_anchor: [[CL_DEVICE_MAX_ON_DEVICE_EVENTS]]{CL_DEVICE_MAX_ON_DEVICE_EVENTS}

// CL_DEVICE_SVM_CAPABILITIES
:CL_DEVICE_SVM_CAPABILITIES_label: pass:q[`CL_&#8203;DEVICE_&#8203;SVM_&#8203;CAPABILITIES`]
:CL_DEVICE_SVM_CAPABILITIES: <<CL_DEVICE_SVM_CAPABILITIES,{CL_DEVICE_SVM_CAPABILITIES_label}>>
:CL_DEVICE_SVM_CAPABILITIES_anchor: [[CL_DEVICE_SVM_CAPABILITIES]]{CL_DEVICE_SVM_CAPABILITIES}

// CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE
:CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;GLOBAL_&#8203;VARIABLE_&#8203;PREFERRED_&#8203;TOTAL_&#8203;SIZE`]
:CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE: <<CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE,{CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE_label}>>
:CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE_anchor: [[CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE]]{CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE}

// CL_DEVICE_MAX_PIPE_ARGS
:CL_DEVICE_MAX_PIPE_ARGS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;PIPE_&#8203;ARGS`]
:CL_DEVICE_MAX_PIPE_ARGS: <<CL_DEVICE_MAX_PIPE_ARGS,{CL_DEVICE_MAX_PIPE_ARGS_label}>>
:CL_DEVICE_MAX_PIPE_ARGS_anchor: [[CL_DEVICE_MAX_PIPE_ARGS]]{CL_DEVICE_MAX_PIPE_ARGS}

// CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS
:CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS_label: pass:q[`CL_&#8203;DEVICE_&#8203;PIPE_&#8203;MAX_&#8203;ACTIVE_&#8203;RESERVATIONS`]
:CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS: <<CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS,{CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS_label}>>
:CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS_anchor: [[CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS]]{CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS}

// CL_DEVICE_PIPE_MAX_PACKET_SIZE
:CL_DEVICE_PIPE_MAX_PACKET_SIZE_label: pass:q[`CL_&#8203;DEVICE_&#8203;PIPE_&#8203;MAX_&#8203;PACKET_&#8203;SIZE`]
:CL_DEVICE_PIPE_MAX_PACKET_SIZE: <<CL_DEVICE_PIPE_MAX_PACKET_SIZE,{CL_DEVICE_PIPE_MAX_PACKET_SIZE_label}>>
:CL_DEVICE_PIPE_MAX_PACKET_SIZE_anchor: [[CL_DEVICE_PIPE_MAX_PACKET_SIZE]]{CL_DEVICE_PIPE_MAX_PACKET_SIZE}

// CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT
:CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;PLATFORM_&#8203;ATOMIC_&#8203;ALIGNMENT`]
:CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT: <<CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT,{CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT_label}>>
:CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT_anchor: [[CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT]]{CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT}

// CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT
:CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;GLOBAL_&#8203;ATOMIC_&#8203;ALIGNMENT`]
:CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT: <<CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT,{CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT_label}>>
:CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT_anchor: [[CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT]]{CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT}

// CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT
:CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT_label: pass:q[`CL_&#8203;DEVICE_&#8203;PREFERRED_&#8203;LOCAL_&#8203;ATOMIC_&#8203;ALIGNMENT`]
:CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT: <<CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT,{CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT_label}>>
:CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT_anchor: [[CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT]]{CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT}

// CL_DEVICE_IL_VERSION
:CL_DEVICE_IL_VERSION_label: pass:q[`CL_&#8203;DEVICE_&#8203;IL_&#8203;VERSION`]
:CL_DEVICE_IL_VERSION: <<CL_DEVICE_IL_VERSION,{CL_DEVICE_IL_VERSION_label}>>
:CL_DEVICE_IL_VERSION_anchor: [[CL_DEVICE_IL_VERSION]]{CL_DEVICE_IL_VERSION}

// CL_DEVICE_MAX_NUM_SUB_GROUPS
:CL_DEVICE_MAX_NUM_SUB_GROUPS_label: pass:q[`CL_&#8203;DEVICE_&#8203;MAX_&#8203;NUM_&#8203;SUB_&#8203;GROUPS`]
:CL_DEVICE_MAX_NUM_SUB_GROUPS: <<CL_DEVICE_MAX_NUM_SUB_GROUPS,{CL_DEVICE_MAX_NUM_SUB_GROUPS_label}>>
:CL_DEVICE_MAX_NUM_SUB_GROUPS_anchor: [[CL_DEVICE_MAX_NUM_SUB_GROUPS]]{CL_DEVICE_MAX_NUM_SUB_GROUPS}

// CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS
:CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS_label: pass:q[`CL_&#8203;DEVICE_&#8203;SUB_&#8203;GROUP_&#8203;INDEPENDENT_&#8203;FORWARD_&#8203;PROGRESS`]
:CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS: <<CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS,{CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS_label}>>
:CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS_anchor: [[CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS]]{CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS}

// CL_FP_DENORM
:CL_FP_DENORM_label: pass:q[`CL_&#8203;FP_&#8203;DENORM`]
:CL_FP_DENORM: <<CL_FP_DENORM,{CL_FP_DENORM_label}>>
:CL_FP_DENORM_anchor: [[CL_FP_DENORM]]{CL_FP_DENORM}

// CL_FP_INF_NAN
:CL_FP_INF_NAN_label: pass:q[`CL_&#8203;FP_&#8203;INF_&#8203;NAN`]
:CL_FP_INF_NAN: <<CL_FP_INF_NAN,{CL_FP_INF_NAN_label}>>
:CL_FP_INF_NAN_anchor: [[CL_FP_INF_NAN]]{CL_FP_INF_NAN}

// CL_FP_ROUND_TO_NEAREST
:CL_FP_ROUND_TO_NEAREST_label: pass:q[`CL_&#8203;FP_&#8203;ROUND_&#8203;TO_&#8203;NEAREST`]
:CL_FP_ROUND_TO_NEAREST: <<CL_FP_ROUND_TO_NEAREST,{CL_FP_ROUND_TO_NEAREST_label}>>
:CL_FP_ROUND_TO_NEAREST_anchor: [[CL_FP_ROUND_TO_NEAREST]]{CL_FP_ROUND_TO_NEAREST}

// CL_FP_ROUND_TO_ZERO
:CL_FP_ROUND_TO_ZERO_label: pass:q[`CL_&#8203;FP_&#8203;ROUND_&#8203;TO_&#8203;ZERO`]
:CL_FP_ROUND_TO_ZERO: <<CL_FP_ROUND_TO_ZERO,{CL_FP_ROUND_TO_ZERO_label}>>
:CL_FP_ROUND_TO_ZERO_anchor: [[CL_FP_ROUND_TO_ZERO]]{CL_FP_ROUND_TO_ZERO}

// CL_FP_ROUND_TO_INF
:CL_FP_ROUND_TO_INF_label: pass:q[`CL_&#8203;FP_&#8203;ROUND_&#8203;TO_&#8203;INF`]
:CL_FP_ROUND_TO_INF: <<CL_FP_ROUND_TO_INF,{CL_FP_ROUND_TO_INF_label}>>
:CL_FP_ROUND_TO_INF_anchor: [[CL_FP_ROUND_TO_INF]]{CL_FP_ROUND_TO_INF}

// CL_FP_FMA
:CL_FP_FMA_label: pass:q[`CL_&#8203;FP_&#8203;FMA`]
:CL_FP_FMA: <<CL_FP_FMA,{CL_FP_FMA_label}>>
:CL_FP_FMA_anchor: [[CL_FP_FMA]]{CL_FP_FMA}

// CL_FP_SOFT_FLOAT
:CL_FP_SOFT_FLOAT_label: pass:q[`CL_&#8203;FP_&#8203;SOFT_&#8203;FLOAT`]
:CL_FP_SOFT_FLOAT: <<CL_FP_SOFT_FLOAT,{CL_FP_SOFT_FLOAT_label}>>
:CL_FP_SOFT_FLOAT_anchor: [[CL_FP_SOFT_FLOAT]]{CL_FP_SOFT_FLOAT}

// CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT
:CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT_label: pass:q[`CL_&#8203;FP_&#8203;CORRECTLY_&#8203;ROUNDED_&#8203;DIVIDE_&#8203;SQRT`]
:CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT: <<CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT,{CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT_label}>>
:CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT_anchor: [[CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT]]{CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT}

// CL_NONE
:CL_NONE_label: pass:q[`CL_&#8203;NONE`]
:CL_NONE: <<CL_NONE,{CL_NONE_label}>>
:CL_NONE_anchor: [[CL_NONE]]{CL_NONE}

// CL_READ_ONLY_CACHE
:CL_READ_ONLY_CACHE_label: pass:q[`CL_&#8203;READ_&#8203;ONLY_&#8203;CACHE`]
:CL_READ_ONLY_CACHE: <<CL_READ_ONLY_CACHE,{CL_READ_ONLY_CACHE_label}>>
:CL_READ_ONLY_CACHE_anchor: [[CL_READ_ONLY_CACHE]]{CL_READ_ONLY_CACHE}

// CL_READ_WRITE_CACHE
:CL_READ_WRITE_CACHE_label: pass:q[`CL_&#8203;READ_&#8203;WRITE_&#8203;CACHE`]
:CL_READ_WRITE_CACHE: <<CL_READ_WRITE_CACHE,{CL_READ_WRITE_CACHE_label}>>
:CL_READ_WRITE_CACHE_anchor: [[CL_READ_WRITE_CACHE]]{CL_READ_WRITE_CACHE}

// CL_LOCAL
:CL_LOCAL_label: pass:q[`CL_&#8203;LOCAL`]
:CL_LOCAL: <<CL_LOCAL,{CL_LOCAL_label}>>
:CL_LOCAL_anchor: [[CL_LOCAL]]{CL_LOCAL}

// CL_GLOBAL
:CL_GLOBAL_label: pass:q[`CL_&#8203;GLOBAL`]
:CL_GLOBAL: <<CL_GLOBAL,{CL_GLOBAL_label}>>
:CL_GLOBAL_anchor: [[CL_GLOBAL]]{CL_GLOBAL}

// CL_EXEC_KERNEL
:CL_EXEC_KERNEL_label: pass:q[`CL_&#8203;EXEC_&#8203;KERNEL`]
:CL_EXEC_KERNEL: <<CL_EXEC_KERNEL,{CL_EXEC_KERNEL_label}>>
:CL_EXEC_KERNEL_anchor: [[CL_EXEC_KERNEL]]{CL_EXEC_KERNEL}

// CL_EXEC_NATIVE_KERNEL
:CL_EXEC_NATIVE_KERNEL_label: pass:q[`CL_&#8203;EXEC_&#8203;NATIVE_&#8203;KERNEL`]
:CL_EXEC_NATIVE_KERNEL: <<CL_EXEC_NATIVE_KERNEL,{CL_EXEC_NATIVE_KERNEL_label}>>
:CL_EXEC_NATIVE_KERNEL_anchor: [[CL_EXEC_NATIVE_KERNEL]]{CL_EXEC_NATIVE_KERNEL}

// CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE
:CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE_label: pass:q[`CL_&#8203;QUEUE_&#8203;OUT_&#8203;OF_&#8203;ORDER_&#8203;EXEC_&#8203;MODE_&#8203;ENABLE`]
:CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE: <<CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE,{CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE_label}>>
:CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE_anchor: [[CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE]]{CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE}

// CL_QUEUE_PROFILING_ENABLE
:CL_QUEUE_PROFILING_ENABLE_label: pass:q[`CL_&#8203;QUEUE_&#8203;PROFILING_&#8203;ENABLE`]
:CL_QUEUE_PROFILING_ENABLE: <<CL_QUEUE_PROFILING_ENABLE,{CL_QUEUE_PROFILING_ENABLE_label}>>
:CL_QUEUE_PROFILING_ENABLE_anchor: [[CL_QUEUE_PROFILING_ENABLE]]{CL_QUEUE_PROFILING_ENABLE}

// CL_QUEUE_ON_DEVICE
:CL_QUEUE_ON_DEVICE_label: pass:q[`CL_&#8203;QUEUE_&#8203;ON_&#8203;DEVICE`]
:CL_QUEUE_ON_DEVICE: <<CL_QUEUE_ON_DEVICE,{CL_QUEUE_ON_DEVICE_label}>>
:CL_QUEUE_ON_DEVICE_anchor: [[CL_QUEUE_ON_DEVICE]]{CL_QUEUE_ON_DEVICE}

// CL_QUEUE_ON_DEVICE_DEFAULT
:CL_QUEUE_ON_DEVICE_DEFAULT_label: pass:q[`CL_&#8203;QUEUE_&#8203;ON_&#8203;DEVICE_&#8203;DEFAULT`]
:CL_QUEUE_ON_DEVICE_DEFAULT: <<CL_QUEUE_ON_DEVICE_DEFAULT,{CL_QUEUE_ON_DEVICE_DEFAULT_label}>>
:CL_QUEUE_ON_DEVICE_DEFAULT_anchor: [[CL_QUEUE_ON_DEVICE_DEFAULT]]{CL_QUEUE_ON_DEVICE_DEFAULT}

// CL_CONTEXT_REFERENCE_COUNT
:CL_CONTEXT_REFERENCE_COUNT_label: pass:q[`CL_&#8203;CONTEXT_&#8203;REFERENCE_&#8203;COUNT`]
:CL_CONTEXT_REFERENCE_COUNT: <<CL_CONTEXT_REFERENCE_COUNT,{CL_CONTEXT_REFERENCE_COUNT_label}>>
:CL_CONTEXT_REFERENCE_COUNT_anchor: [[CL_CONTEXT_REFERENCE_COUNT]]{CL_CONTEXT_REFERENCE_COUNT}

// CL_CONTEXT_DEVICES
:CL_CONTEXT_DEVICES_label: pass:q[`CL_&#8203;CONTEXT_&#8203;DEVICES`]
:CL_CONTEXT_DEVICES: <<CL_CONTEXT_DEVICES,{CL_CONTEXT_DEVICES_label}>>
:CL_CONTEXT_DEVICES_anchor: [[CL_CONTEXT_DEVICES]]{CL_CONTEXT_DEVICES}

// CL_CONTEXT_PROPERTIES
:CL_CONTEXT_PROPERTIES_label: pass:q[`CL_&#8203;CONTEXT_&#8203;PROPERTIES`]
:CL_CONTEXT_PROPERTIES: <<CL_CONTEXT_PROPERTIES,{CL_CONTEXT_PROPERTIES_label}>>
:CL_CONTEXT_PROPERTIES_anchor: [[CL_CONTEXT_PROPERTIES]]{CL_CONTEXT_PROPERTIES}

// CL_CONTEXT_NUM_DEVICES
:CL_CONTEXT_NUM_DEVICES_label: pass:q[`CL_&#8203;CONTEXT_&#8203;NUM_&#8203;DEVICES`]
:CL_CONTEXT_NUM_DEVICES: <<CL_CONTEXT_NUM_DEVICES,{CL_CONTEXT_NUM_DEVICES_label}>>
:CL_CONTEXT_NUM_DEVICES_anchor: [[CL_CONTEXT_NUM_DEVICES]]{CL_CONTEXT_NUM_DEVICES}

// CL_CONTEXT_PLATFORM
:CL_CONTEXT_PLATFORM_label: pass:q[`CL_&#8203;CONTEXT_&#8203;PLATFORM`]
:CL_CONTEXT_PLATFORM: <<CL_CONTEXT_PLATFORM,{CL_CONTEXT_PLATFORM_label}>>
:CL_CONTEXT_PLATFORM_anchor: [[CL_CONTEXT_PLATFORM]]{CL_CONTEXT_PLATFORM}

// CL_CONTEXT_INTEROP_USER_SYNC
:CL_CONTEXT_INTEROP_USER_SYNC_label: pass:q[`CL_&#8203;CONTEXT_&#8203;INTEROP_&#8203;USER_&#8203;SYNC`]
:CL_CONTEXT_INTEROP_USER_SYNC: <<CL_CONTEXT_INTEROP_USER_SYNC,{CL_CONTEXT_INTEROP_USER_SYNC_label}>>
:CL_CONTEXT_INTEROP_USER_SYNC_anchor: [[CL_CONTEXT_INTEROP_USER_SYNC]]{CL_CONTEXT_INTEROP_USER_SYNC}

// CL_DEVICE_PARTITION_EQUALLY
:CL_DEVICE_PARTITION_EQUALLY_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;EQUALLY`]
:CL_DEVICE_PARTITION_EQUALLY: <<CL_DEVICE_PARTITION_EQUALLY,{CL_DEVICE_PARTITION_EQUALLY_label}>>
:CL_DEVICE_PARTITION_EQUALLY_anchor: [[CL_DEVICE_PARTITION_EQUALLY]]{CL_DEVICE_PARTITION_EQUALLY}

// CL_DEVICE_PARTITION_BY_COUNTS
:CL_DEVICE_PARTITION_BY_COUNTS_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;BY_&#8203;COUNTS`]
:CL_DEVICE_PARTITION_BY_COUNTS: <<CL_DEVICE_PARTITION_BY_COUNTS,{CL_DEVICE_PARTITION_BY_COUNTS_label}>>
:CL_DEVICE_PARTITION_BY_COUNTS_anchor: [[CL_DEVICE_PARTITION_BY_COUNTS]]{CL_DEVICE_PARTITION_BY_COUNTS}

// CL_DEVICE_PARTITION_BY_COUNTS_LIST_END
:CL_DEVICE_PARTITION_BY_COUNTS_LIST_END_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;BY_&#8203;COUNTS_&#8203;LIST_&#8203;END`]
:CL_DEVICE_PARTITION_BY_COUNTS_LIST_END: <<CL_DEVICE_PARTITION_BY_COUNTS_LIST_END,{CL_DEVICE_PARTITION_BY_COUNTS_LIST_END_label}>>
:CL_DEVICE_PARTITION_BY_COUNTS_LIST_END_anchor: [[CL_DEVICE_PARTITION_BY_COUNTS_LIST_END]]{CL_DEVICE_PARTITION_BY_COUNTS_LIST_END}

// CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN
:CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_label: pass:q[`CL_&#8203;DEVICE_&#8203;PARTITION_&#8203;BY_&#8203;AFFINITY_&#8203;DOMAIN`]
:CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN: <<CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN,{CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_label}>>
:CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_anchor: [[CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN]]{CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN}

// CL_DEVICE_AFFINITY_DOMAIN_NUMA
:CL_DEVICE_AFFINITY_DOMAIN_NUMA_label: pass:q[`CL_&#8203;DEVICE_&#8203;AFFINITY_&#8203;DOMAIN_&#8203;NUMA`]
:CL_DEVICE_AFFINITY_DOMAIN_NUMA: <<CL_DEVICE_AFFINITY_DOMAIN_NUMA,{CL_DEVICE_AFFINITY_DOMAIN_NUMA_label}>>
:CL_DEVICE_AFFINITY_DOMAIN_NUMA_anchor: [[CL_DEVICE_AFFINITY_DOMAIN_NUMA]]{CL_DEVICE_AFFINITY_DOMAIN_NUMA}

// CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE
:CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE_label: pass:q[`CL_&#8203;DEVICE_&#8203;AFFINITY_&#8203;DOMAIN_&#8203;L4_&#8203;CACHE`]
:CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE: <<CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE,{CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE_label}>>
:CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE_anchor: [[CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE]]{CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE}

// CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE
:CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE_label: pass:q[`CL_&#8203;DEVICE_&#8203;AFFINITY_&#8203;DOMAIN_&#8203;L3_&#8203;CACHE`]
:CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE: <<CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE,{CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE_label}>>
:CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE_anchor: [[CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE]]{CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE}

// CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE
:CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE_label: pass:q[`CL_&#8203;DEVICE_&#8203;AFFINITY_&#8203;DOMAIN_&#8203;L2_&#8203;CACHE`]
:CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE: <<CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE,{CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE_label}>>
:CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE_anchor: [[CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE]]{CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE}

// CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE
:CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE_label: pass:q[`CL_&#8203;DEVICE_&#8203;AFFINITY_&#8203;DOMAIN_&#8203;L1_&#8203;CACHE`]
:CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE: <<CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE,{CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE_label}>>
:CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE_anchor: [[CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE]]{CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE}

// CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE
:CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE_label: pass:q[`CL_&#8203;DEVICE_&#8203;AFFINITY_&#8203;DOMAIN_&#8203;NEXT_&#8203;PARTITIONABLE`]
:CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE: <<CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE,{CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE_label}>>
:CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE_anchor: [[CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE]]{CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE}

// CL_DEVICE_SVM_COARSE_GRAIN_BUFFER
:CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_label: pass:q[`CL_&#8203;DEVICE_&#8203;SVM_&#8203;COARSE_&#8203;GRAIN_&#8203;BUFFER`]
:CL_DEVICE_SVM_COARSE_GRAIN_BUFFER: <<CL_DEVICE_SVM_COARSE_GRAIN_BUFFER,{CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_label}>>
:CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_anchor: [[CL_DEVICE_SVM_COARSE_GRAIN_BUFFER]]{CL_DEVICE_SVM_COARSE_GRAIN_BUFFER}

// CL_DEVICE_SVM_FINE_GRAIN_BUFFER
:CL_DEVICE_SVM_FINE_GRAIN_BUFFER_label: pass:q[`CL_&#8203;DEVICE_&#8203;SVM_&#8203;FINE_&#8203;GRAIN_&#8203;BUFFER`]
:CL_DEVICE_SVM_FINE_GRAIN_BUFFER: <<CL_DEVICE_SVM_FINE_GRAIN_BUFFER,{CL_DEVICE_SVM_FINE_GRAIN_BUFFER_label}>>
:CL_DEVICE_SVM_FINE_GRAIN_BUFFER_anchor: [[CL_DEVICE_SVM_FINE_GRAIN_BUFFER]]{CL_DEVICE_SVM_FINE_GRAIN_BUFFER}

// CL_DEVICE_SVM_FINE_GRAIN_SYSTEM
:CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_label: pass:q[`CL_&#8203;DEVICE_&#8203;SVM_&#8203;FINE_&#8203;GRAIN_&#8203;SYSTEM`]
:CL_DEVICE_SVM_FINE_GRAIN_SYSTEM: <<CL_DEVICE_SVM_FINE_GRAIN_SYSTEM,{CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_label}>>
:CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_anchor: [[CL_DEVICE_SVM_FINE_GRAIN_SYSTEM]]{CL_DEVICE_SVM_FINE_GRAIN_SYSTEM}

// CL_DEVICE_SVM_ATOMICS
:CL_DEVICE_SVM_ATOMICS_label: pass:q[`CL_&#8203;DEVICE_&#8203;SVM_&#8203;ATOMICS`]
:CL_DEVICE_SVM_ATOMICS: <<CL_DEVICE_SVM_ATOMICS,{CL_DEVICE_SVM_ATOMICS_label}>>
:CL_DEVICE_SVM_ATOMICS_anchor: [[CL_DEVICE_SVM_ATOMICS]]{CL_DEVICE_SVM_ATOMICS}

// CL_QUEUE_CONTEXT
:CL_QUEUE_CONTEXT_label: pass:q[`CL_&#8203;QUEUE_&#8203;CONTEXT`]
:CL_QUEUE_CONTEXT: <<CL_QUEUE_CONTEXT,{CL_QUEUE_CONTEXT_label}>>
:CL_QUEUE_CONTEXT_anchor: [[CL_QUEUE_CONTEXT]]{CL_QUEUE_CONTEXT}

// CL_QUEUE_DEVICE
:CL_QUEUE_DEVICE_label: pass:q[`CL_&#8203;QUEUE_&#8203;DEVICE`]
:CL_QUEUE_DEVICE: <<CL_QUEUE_DEVICE,{CL_QUEUE_DEVICE_label}>>
:CL_QUEUE_DEVICE_anchor: [[CL_QUEUE_DEVICE]]{CL_QUEUE_DEVICE}

// CL_QUEUE_REFERENCE_COUNT
:CL_QUEUE_REFERENCE_COUNT_label: pass:q[`CL_&#8203;QUEUE_&#8203;REFERENCE_&#8203;COUNT`]
:CL_QUEUE_REFERENCE_COUNT: <<CL_QUEUE_REFERENCE_COUNT,{CL_QUEUE_REFERENCE_COUNT_label}>>
:CL_QUEUE_REFERENCE_COUNT_anchor: [[CL_QUEUE_REFERENCE_COUNT]]{CL_QUEUE_REFERENCE_COUNT}

// CL_QUEUE_PROPERTIES
:CL_QUEUE_PROPERTIES_label: pass:q[`CL_&#8203;QUEUE_&#8203;PROPERTIES`]
:CL_QUEUE_PROPERTIES: <<CL_QUEUE_PROPERTIES,{CL_QUEUE_PROPERTIES_label}>>
:CL_QUEUE_PROPERTIES_anchor: [[CL_QUEUE_PROPERTIES]]{CL_QUEUE_PROPERTIES}

// CL_QUEUE_SIZE
:CL_QUEUE_SIZE_label: pass:q[`CL_&#8203;QUEUE_&#8203;SIZE`]
:CL_QUEUE_SIZE: <<CL_QUEUE_SIZE,{CL_QUEUE_SIZE_label}>>
:CL_QUEUE_SIZE_anchor: [[CL_QUEUE_SIZE]]{CL_QUEUE_SIZE}

// CL_QUEUE_DEVICE_DEFAULT
:CL_QUEUE_DEVICE_DEFAULT_label: pass:q[`CL_&#8203;QUEUE_&#8203;DEVICE_&#8203;DEFAULT`]
:CL_QUEUE_DEVICE_DEFAULT: <<CL_QUEUE_DEVICE_DEFAULT,{CL_QUEUE_DEVICE_DEFAULT_label}>>
:CL_QUEUE_DEVICE_DEFAULT_anchor: [[CL_QUEUE_DEVICE_DEFAULT]]{CL_QUEUE_DEVICE_DEFAULT}

// CL_MEM_READ_WRITE
:CL_MEM_READ_WRITE_label: pass:q[`CL_&#8203;MEM_&#8203;READ_&#8203;WRITE`]
:CL_MEM_READ_WRITE: <<CL_MEM_READ_WRITE,{CL_MEM_READ_WRITE_label}>>
:CL_MEM_READ_WRITE_anchor: [[CL_MEM_READ_WRITE]]{CL_MEM_READ_WRITE}

// CL_MEM_WRITE_ONLY
:CL_MEM_WRITE_ONLY_label: pass:q[`CL_&#8203;MEM_&#8203;WRITE_&#8203;ONLY`]
:CL_MEM_WRITE_ONLY: <<CL_MEM_WRITE_ONLY,{CL_MEM_WRITE_ONLY_label}>>
:CL_MEM_WRITE_ONLY_anchor: [[CL_MEM_WRITE_ONLY]]{CL_MEM_WRITE_ONLY}

// CL_MEM_READ_ONLY
:CL_MEM_READ_ONLY_label: pass:q[`CL_&#8203;MEM_&#8203;READ_&#8203;ONLY`]
:CL_MEM_READ_ONLY: <<CL_MEM_READ_ONLY,{CL_MEM_READ_ONLY_label}>>
:CL_MEM_READ_ONLY_anchor: [[CL_MEM_READ_ONLY]]{CL_MEM_READ_ONLY}

// CL_MEM_USE_HOST_PTR
:CL_MEM_USE_HOST_PTR_label: pass:q[`CL_&#8203;MEM_&#8203;USE_&#8203;HOST_&#8203;PTR`]
:CL_MEM_USE_HOST_PTR: <<CL_MEM_USE_HOST_PTR,{CL_MEM_USE_HOST_PTR_label}>>
:CL_MEM_USE_HOST_PTR_anchor: [[CL_MEM_USE_HOST_PTR]]{CL_MEM_USE_HOST_PTR}

// CL_MEM_ALLOC_HOST_PTR
:CL_MEM_ALLOC_HOST_PTR_label: pass:q[`CL_&#8203;MEM_&#8203;ALLOC_&#8203;HOST_&#8203;PTR`]
:CL_MEM_ALLOC_HOST_PTR: <<CL_MEM_ALLOC_HOST_PTR,{CL_MEM_ALLOC_HOST_PTR_label}>>
:CL_MEM_ALLOC_HOST_PTR_anchor: [[CL_MEM_ALLOC_HOST_PTR]]{CL_MEM_ALLOC_HOST_PTR}

// CL_MEM_COPY_HOST_PTR
:CL_MEM_COPY_HOST_PTR_label: pass:q[`CL_&#8203;MEM_&#8203;COPY_&#8203;HOST_&#8203;PTR`]
:CL_MEM_COPY_HOST_PTR: <<CL_MEM_COPY_HOST_PTR,{CL_MEM_COPY_HOST_PTR_label}>>
:CL_MEM_COPY_HOST_PTR_anchor: [[CL_MEM_COPY_HOST_PTR]]{CL_MEM_COPY_HOST_PTR}

// CL_MEM_HOST_WRITE_ONLY
:CL_MEM_HOST_WRITE_ONLY_label: pass:q[`CL_&#8203;MEM_&#8203;HOST_&#8203;WRITE_&#8203;ONLY`]
:CL_MEM_HOST_WRITE_ONLY: <<CL_MEM_HOST_WRITE_ONLY,{CL_MEM_HOST_WRITE_ONLY_label}>>
:CL_MEM_HOST_WRITE_ONLY_anchor: [[CL_MEM_HOST_WRITE_ONLY]]{CL_MEM_HOST_WRITE_ONLY}

// CL_MEM_HOST_READ_ONLY
:CL_MEM_HOST_READ_ONLY_label: pass:q[`CL_&#8203;MEM_&#8203;HOST_&#8203;READ_&#8203;ONLY`]
:CL_MEM_HOST_READ_ONLY: <<CL_MEM_HOST_READ_ONLY,{CL_MEM_HOST_READ_ONLY_label}>>
:CL_MEM_HOST_READ_ONLY_anchor: [[CL_MEM_HOST_READ_ONLY]]{CL_MEM_HOST_READ_ONLY}

// CL_MEM_HOST_NO_ACCESS
:CL_MEM_HOST_NO_ACCESS_label: pass:q[`CL_&#8203;MEM_&#8203;HOST_&#8203;NO_&#8203;ACCESS`]
:CL_MEM_HOST_NO_ACCESS: <<CL_MEM_HOST_NO_ACCESS,{CL_MEM_HOST_NO_ACCESS_label}>>
:CL_MEM_HOST_NO_ACCESS_anchor: [[CL_MEM_HOST_NO_ACCESS]]{CL_MEM_HOST_NO_ACCESS}

// CL_MEM_SVM_FINE_GRAIN_BUFFER
:CL_MEM_SVM_FINE_GRAIN_BUFFER_label: pass:q[`CL_&#8203;MEM_&#8203;SVM_&#8203;FINE_&#8203;GRAIN_&#8203;BUFFER`]
:CL_MEM_SVM_FINE_GRAIN_BUFFER: <<CL_MEM_SVM_FINE_GRAIN_BUFFER,{CL_MEM_SVM_FINE_GRAIN_BUFFER_label}>>
:CL_MEM_SVM_FINE_GRAIN_BUFFER_anchor: [[CL_MEM_SVM_FINE_GRAIN_BUFFER]]{CL_MEM_SVM_FINE_GRAIN_BUFFER}

// CL_MEM_SVM_ATOMICS
:CL_MEM_SVM_ATOMICS_label: pass:q[`CL_&#8203;MEM_&#8203;SVM_&#8203;ATOMICS`]
:CL_MEM_SVM_ATOMICS: <<CL_MEM_SVM_ATOMICS,{CL_MEM_SVM_ATOMICS_label}>>
:CL_MEM_SVM_ATOMICS_anchor: [[CL_MEM_SVM_ATOMICS]]{CL_MEM_SVM_ATOMICS}

// CL_MEM_KERNEL_READ_AND_WRITE
:CL_MEM_KERNEL_READ_AND_WRITE_label: pass:q[`CL_&#8203;MEM_&#8203;KERNEL_&#8203;READ_&#8203;AND_&#8203;WRITE`]
:CL_MEM_KERNEL_READ_AND_WRITE: <<CL_MEM_KERNEL_READ_AND_WRITE,{CL_MEM_KERNEL_READ_AND_WRITE_label}>>
:CL_MEM_KERNEL_READ_AND_WRITE_anchor: [[CL_MEM_KERNEL_READ_AND_WRITE]]{CL_MEM_KERNEL_READ_AND_WRITE}

// CL_MIGRATE_MEM_OBJECT_HOST
:CL_MIGRATE_MEM_OBJECT_HOST_label: pass:q[`CL_&#8203;MIGRATE_&#8203;MEM_&#8203;OBJECT_&#8203;HOST`]
:CL_MIGRATE_MEM_OBJECT_HOST: <<CL_MIGRATE_MEM_OBJECT_HOST,{CL_MIGRATE_MEM_OBJECT_HOST_label}>>
:CL_MIGRATE_MEM_OBJECT_HOST_anchor: [[CL_MIGRATE_MEM_OBJECT_HOST]]{CL_MIGRATE_MEM_OBJECT_HOST}

// CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED
:CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED_label: pass:q[`CL_&#8203;MIGRATE_&#8203;MEM_&#8203;OBJECT_&#8203;CONTENT_&#8203;UNDEFINED`]
:CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED: <<CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED,{CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED_label}>>
:CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED_anchor: [[CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED]]{CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED}

// CL_R
:CL_R_label: pass:q[`CL_&#8203;R`]
:CL_R: <<CL_R,{CL_R_label}>>
:CL_R_anchor: [[CL_R]]{CL_R}

// CL_A
:CL_A_label: pass:q[`CL_&#8203;A`]
:CL_A: <<CL_A,{CL_A_label}>>
:CL_A_anchor: [[CL_A]]{CL_A}

// CL_RG
:CL_RG_label: pass:q[`CL_&#8203;RG`]
:CL_RG: <<CL_RG,{CL_RG_label}>>
:CL_RG_anchor: [[CL_RG]]{CL_RG}

// CL_RA
:CL_RA_label: pass:q[`CL_&#8203;RA`]
:CL_RA: <<CL_RA,{CL_RA_label}>>
:CL_RA_anchor: [[CL_RA]]{CL_RA}

// CL_RGB
:CL_RGB_label: pass:q[`CL_&#8203;RGB`]
:CL_RGB: <<CL_RGB,{CL_RGB_label}>>
:CL_RGB_anchor: [[CL_RGB]]{CL_RGB}

// CL_RGBA
:CL_RGBA_label: pass:q[`CL_&#8203;RGBA`]
:CL_RGBA: <<CL_RGBA,{CL_RGBA_label}>>
:CL_RGBA_anchor: [[CL_RGBA]]{CL_RGBA}

// CL_BGRA
:CL_BGRA_label: pass:q[`CL_&#8203;BGRA`]
:CL_BGRA: <<CL_BGRA,{CL_BGRA_label}>>
:CL_BGRA_anchor: [[CL_BGRA]]{CL_BGRA}

// CL_ARGB
:CL_ARGB_label: pass:q[`CL_&#8203;ARGB`]
:CL_ARGB: <<CL_ARGB,{CL_ARGB_label}>>
:CL_ARGB_anchor: [[CL_ARGB]]{CL_ARGB}

// CL_INTENSITY
:CL_INTENSITY_label: pass:q[`CL_&#8203;INTENSITY`]
:CL_INTENSITY: <<CL_INTENSITY,{CL_INTENSITY_label}>>
:CL_INTENSITY_anchor: [[CL_INTENSITY]]{CL_INTENSITY}

// CL_LUMINANCE
:CL_LUMINANCE_label: pass:q[`CL_&#8203;LUMINANCE`]
:CL_LUMINANCE: <<CL_LUMINANCE,{CL_LUMINANCE_label}>>
:CL_LUMINANCE_anchor: [[CL_LUMINANCE]]{CL_LUMINANCE}

// CL_Rx
:CL_Rx_label: pass:q[`CL_&#8203;Rx`]
:CL_Rx: <<CL_Rx,{CL_Rx_label}>>
:CL_Rx_anchor: [[CL_Rx]]{CL_Rx}

// CL_RGx
:CL_RGx_label: pass:q[`CL_&#8203;RGx`]
:CL_RGx: <<CL_RGx,{CL_RGx_label}>>
:CL_RGx_anchor: [[CL_RGx]]{CL_RGx}

// CL_RGBx
:CL_RGBx_label: pass:q[`CL_&#8203;RGBx`]
:CL_RGBx: <<CL_RGBx,{CL_RGBx_label}>>
:CL_RGBx_anchor: [[CL_RGBx]]{CL_RGBx}

// CL_DEPTH
:CL_DEPTH_label: pass:q[`CL_&#8203;DEPTH`]
:CL_DEPTH: <<CL_DEPTH,{CL_DEPTH_label}>>
:CL_DEPTH_anchor: [[CL_DEPTH]]{CL_DEPTH}

// CL_DEPTH_STENCIL
:CL_DEPTH_STENCIL_label: pass:q[`CL_&#8203;DEPTH_&#8203;STENCIL`]
:CL_DEPTH_STENCIL: <<CL_DEPTH_STENCIL,{CL_DEPTH_STENCIL_label}>>
:CL_DEPTH_STENCIL_anchor: [[CL_DEPTH_STENCIL]]{CL_DEPTH_STENCIL}

// CL_sRGB
:CL_sRGB_label: pass:q[`CL_&#8203;sRGB`]
:CL_sRGB: <<CL_sRGB,{CL_sRGB_label}>>
:CL_sRGB_anchor: [[CL_sRGB]]{CL_sRGB}

// CL_sRGBx
:CL_sRGBx_label: pass:q[`CL_&#8203;sRGBx`]
:CL_sRGBx: <<CL_sRGBx,{CL_sRGBx_label}>>
:CL_sRGBx_anchor: [[CL_sRGBx]]{CL_sRGBx}

// CL_sRGBA
:CL_sRGBA_label: pass:q[`CL_&#8203;sRGBA`]
:CL_sRGBA: <<CL_sRGBA,{CL_sRGBA_label}>>
:CL_sRGBA_anchor: [[CL_sRGBA]]{CL_sRGBA}

// CL_sBGRA
:CL_sBGRA_label: pass:q[`CL_&#8203;sBGRA`]
:CL_sBGRA: <<CL_sBGRA,{CL_sBGRA_label}>>
:CL_sBGRA_anchor: [[CL_sBGRA]]{CL_sBGRA}

// CL_ABGR
:CL_ABGR_label: pass:q[`CL_&#8203;ABGR`]
:CL_ABGR: <<CL_ABGR,{CL_ABGR_label}>>
:CL_ABGR_anchor: [[CL_ABGR]]{CL_ABGR}

// CL_SNORM_INT8
:CL_SNORM_INT8_label: pass:q[`CL_&#8203;SNORM_&#8203;INT8`]
:CL_SNORM_INT8: <<CL_SNORM_INT8,{CL_SNORM_INT8_label}>>
:CL_SNORM_INT8_anchor: [[CL_SNORM_INT8]]{CL_SNORM_INT8}

// CL_SNORM_INT16
:CL_SNORM_INT16_label: pass:q[`CL_&#8203;SNORM_&#8203;INT16`]
:CL_SNORM_INT16: <<CL_SNORM_INT16,{CL_SNORM_INT16_label}>>
:CL_SNORM_INT16_anchor: [[CL_SNORM_INT16]]{CL_SNORM_INT16}

// CL_UNORM_INT8
:CL_UNORM_INT8_label: pass:q[`CL_&#8203;UNORM_&#8203;INT8`]
:CL_UNORM_INT8: <<CL_UNORM_INT8,{CL_UNORM_INT8_label}>>
:CL_UNORM_INT8_anchor: [[CL_UNORM_INT8]]{CL_UNORM_INT8}

// CL_UNORM_INT16
:CL_UNORM_INT16_label: pass:q[`CL_&#8203;UNORM_&#8203;INT16`]
:CL_UNORM_INT16: <<CL_UNORM_INT16,{CL_UNORM_INT16_label}>>
:CL_UNORM_INT16_anchor: [[CL_UNORM_INT16]]{CL_UNORM_INT16}

// CL_UNORM_SHORT_565
:CL_UNORM_SHORT_565_label: pass:q[`CL_&#8203;UNORM_&#8203;SHORT_&#8203;565`]
:CL_UNORM_SHORT_565: <<CL_UNORM_SHORT_565,{CL_UNORM_SHORT_565_label}>>
:CL_UNORM_SHORT_565_anchor: [[CL_UNORM_SHORT_565]]{CL_UNORM_SHORT_565}

// CL_UNORM_SHORT_555
:CL_UNORM_SHORT_555_label: pass:q[`CL_&#8203;UNORM_&#8203;SHORT_&#8203;555`]
:CL_UNORM_SHORT_555: <<CL_UNORM_SHORT_555,{CL_UNORM_SHORT_555_label}>>
:CL_UNORM_SHORT_555_anchor: [[CL_UNORM_SHORT_555]]{CL_UNORM_SHORT_555}

// CL_UNORM_INT_101010
:CL_UNORM_INT_101010_label: pass:q[`CL_&#8203;UNORM_&#8203;INT_&#8203;101010`]
:CL_UNORM_INT_101010: <<CL_UNORM_INT_101010,{CL_UNORM_INT_101010_label}>>
:CL_UNORM_INT_101010_anchor: [[CL_UNORM_INT_101010]]{CL_UNORM_INT_101010}

// CL_SIGNED_INT8
:CL_SIGNED_INT8_label: pass:q[`CL_&#8203;SIGNED_&#8203;INT8`]
:CL_SIGNED_INT8: <<CL_SIGNED_INT8,{CL_SIGNED_INT8_label}>>
:CL_SIGNED_INT8_anchor: [[CL_SIGNED_INT8]]{CL_SIGNED_INT8}

// CL_SIGNED_INT16
:CL_SIGNED_INT16_label: pass:q[`CL_&#8203;SIGNED_&#8203;INT16`]
:CL_SIGNED_INT16: <<CL_SIGNED_INT16,{CL_SIGNED_INT16_label}>>
:CL_SIGNED_INT16_anchor: [[CL_SIGNED_INT16]]{CL_SIGNED_INT16}

// CL_SIGNED_INT32
:CL_SIGNED_INT32_label: pass:q[`CL_&#8203;SIGNED_&#8203;INT32`]
:CL_SIGNED_INT32: <<CL_SIGNED_INT32,{CL_SIGNED_INT32_label}>>
:CL_SIGNED_INT32_anchor: [[CL_SIGNED_INT32]]{CL_SIGNED_INT32}

// CL_UNSIGNED_INT8
:CL_UNSIGNED_INT8_label: pass:q[`CL_&#8203;UNSIGNED_&#8203;INT8`]
:CL_UNSIGNED_INT8: <<CL_UNSIGNED_INT8,{CL_UNSIGNED_INT8_label}>>
:CL_UNSIGNED_INT8_anchor: [[CL_UNSIGNED_INT8]]{CL_UNSIGNED_INT8}

// CL_UNSIGNED_INT16
:CL_UNSIGNED_INT16_label: pass:q[`CL_&#8203;UNSIGNED_&#8203;INT16`]
:CL_UNSIGNED_INT16: <<CL_UNSIGNED_INT16,{CL_UNSIGNED_INT16_label}>>
:CL_UNSIGNED_INT16_anchor: [[CL_UNSIGNED_INT16]]{CL_UNSIGNED_INT16}

// CL_UNSIGNED_INT32
:CL_UNSIGNED_INT32_label: pass:q[`CL_&#8203;UNSIGNED_&#8203;INT32`]
:CL_UNSIGNED_INT32: <<CL_UNSIGNED_INT32,{CL_UNSIGNED_INT32_label}>>
:CL_UNSIGNED_INT32_anchor: [[CL_UNSIGNED_INT32]]{CL_UNSIGNED_INT32}

// CL_HALF_FLOAT
:CL_HALF_FLOAT_label: pass:q[`CL_&#8203;HALF_&#8203;FLOAT`]
:CL_HALF_FLOAT: <<CL_HALF_FLOAT,{CL_HALF_FLOAT_label}>>
:CL_HALF_FLOAT_anchor: [[CL_HALF_FLOAT]]{CL_HALF_FLOAT}

// CL_FLOAT
:CL_FLOAT_label: pass:q[`CL_&#8203;FLOAT`]
:CL_FLOAT: <<CL_FLOAT,{CL_FLOAT_label}>>
:CL_FLOAT_anchor: [[CL_FLOAT]]{CL_FLOAT}

// CL_UNORM_INT24
:CL_UNORM_INT24_label: pass:q[`CL_&#8203;UNORM_&#8203;INT24`]
:CL_UNORM_INT24: <<CL_UNORM_INT24,{CL_UNORM_INT24_label}>>
:CL_UNORM_INT24_anchor: [[CL_UNORM_INT24]]{CL_UNORM_INT24}

// CL_UNORM_INT_101010_2
:CL_UNORM_INT_101010_2_label: pass:q[`CL_&#8203;UNORM_&#8203;INT_&#8203;101010_&#8203;2`]
:CL_UNORM_INT_101010_2: <<CL_UNORM_INT_101010_2,{CL_UNORM_INT_101010_2_label}>>
:CL_UNORM_INT_101010_2_anchor: [[CL_UNORM_INT_101010_2]]{CL_UNORM_INT_101010_2}

// CL_MEM_OBJECT_BUFFER
:CL_MEM_OBJECT_BUFFER_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;BUFFER`]
:CL_MEM_OBJECT_BUFFER: <<CL_MEM_OBJECT_BUFFER,{CL_MEM_OBJECT_BUFFER_label}>>
:CL_MEM_OBJECT_BUFFER_anchor: [[CL_MEM_OBJECT_BUFFER]]{CL_MEM_OBJECT_BUFFER}

// CL_MEM_OBJECT_IMAGE2D
:CL_MEM_OBJECT_IMAGE2D_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;IMAGE2D`]
:CL_MEM_OBJECT_IMAGE2D: <<CL_MEM_OBJECT_IMAGE2D,{CL_MEM_OBJECT_IMAGE2D_label}>>
:CL_MEM_OBJECT_IMAGE2D_anchor: [[CL_MEM_OBJECT_IMAGE2D]]{CL_MEM_OBJECT_IMAGE2D}

// CL_MEM_OBJECT_IMAGE3D
:CL_MEM_OBJECT_IMAGE3D_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;IMAGE3D`]
:CL_MEM_OBJECT_IMAGE3D: <<CL_MEM_OBJECT_IMAGE3D,{CL_MEM_OBJECT_IMAGE3D_label}>>
:CL_MEM_OBJECT_IMAGE3D_anchor: [[CL_MEM_OBJECT_IMAGE3D]]{CL_MEM_OBJECT_IMAGE3D}

// CL_MEM_OBJECT_IMAGE2D_ARRAY
:CL_MEM_OBJECT_IMAGE2D_ARRAY_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;IMAGE2D_&#8203;ARRAY`]
:CL_MEM_OBJECT_IMAGE2D_ARRAY: <<CL_MEM_OBJECT_IMAGE2D_ARRAY,{CL_MEM_OBJECT_IMAGE2D_ARRAY_label}>>
:CL_MEM_OBJECT_IMAGE2D_ARRAY_anchor: [[CL_MEM_OBJECT_IMAGE2D_ARRAY]]{CL_MEM_OBJECT_IMAGE2D_ARRAY}

// CL_MEM_OBJECT_IMAGE1D
:CL_MEM_OBJECT_IMAGE1D_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;IMAGE1D`]
:CL_MEM_OBJECT_IMAGE1D: <<CL_MEM_OBJECT_IMAGE1D,{CL_MEM_OBJECT_IMAGE1D_label}>>
:CL_MEM_OBJECT_IMAGE1D_anchor: [[CL_MEM_OBJECT_IMAGE1D]]{CL_MEM_OBJECT_IMAGE1D}

// CL_MEM_OBJECT_IMAGE1D_ARRAY
:CL_MEM_OBJECT_IMAGE1D_ARRAY_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;IMAGE1D_&#8203;ARRAY`]
:CL_MEM_OBJECT_IMAGE1D_ARRAY: <<CL_MEM_OBJECT_IMAGE1D_ARRAY,{CL_MEM_OBJECT_IMAGE1D_ARRAY_label}>>
:CL_MEM_OBJECT_IMAGE1D_ARRAY_anchor: [[CL_MEM_OBJECT_IMAGE1D_ARRAY]]{CL_MEM_OBJECT_IMAGE1D_ARRAY}

// CL_MEM_OBJECT_IMAGE1D_BUFFER
:CL_MEM_OBJECT_IMAGE1D_BUFFER_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;IMAGE1D_&#8203;BUFFER`]
:CL_MEM_OBJECT_IMAGE1D_BUFFER: <<CL_MEM_OBJECT_IMAGE1D_BUFFER,{CL_MEM_OBJECT_IMAGE1D_BUFFER_label}>>
:CL_MEM_OBJECT_IMAGE1D_BUFFER_anchor: [[CL_MEM_OBJECT_IMAGE1D_BUFFER]]{CL_MEM_OBJECT_IMAGE1D_BUFFER}

// CL_MEM_OBJECT_PIPE
:CL_MEM_OBJECT_PIPE_label: pass:q[`CL_&#8203;MEM_&#8203;OBJECT_&#8203;PIPE`]
:CL_MEM_OBJECT_PIPE: <<CL_MEM_OBJECT_PIPE,{CL_MEM_OBJECT_PIPE_label}>>
:CL_MEM_OBJECT_PIPE_anchor: [[CL_MEM_OBJECT_PIPE]]{CL_MEM_OBJECT_PIPE}

// CL_MEM_TYPE
:CL_MEM_TYPE_label: pass:q[`CL_&#8203;MEM_&#8203;TYPE`]
:CL_MEM_TYPE: <<CL_MEM_TYPE,{CL_MEM_TYPE_label}>>
:CL_MEM_TYPE_anchor: [[CL_MEM_TYPE]]{CL_MEM_TYPE}

// CL_MEM_FLAGS
:CL_MEM_FLAGS_label: pass:q[`CL_&#8203;MEM_&#8203;FLAGS`]
:CL_MEM_FLAGS: <<CL_MEM_FLAGS,{CL_MEM_FLAGS_label}>>
:CL_MEM_FLAGS_anchor: [[CL_MEM_FLAGS]]{CL_MEM_FLAGS}

// CL_MEM_SIZE
:CL_MEM_SIZE_label: pass:q[`CL_&#8203;MEM_&#8203;SIZE`]
:CL_MEM_SIZE: <<CL_MEM_SIZE,{CL_MEM_SIZE_label}>>
:CL_MEM_SIZE_anchor: [[CL_MEM_SIZE]]{CL_MEM_SIZE}

// CL_MEM_HOST_PTR
:CL_MEM_HOST_PTR_label: pass:q[`CL_&#8203;MEM_&#8203;HOST_&#8203;PTR`]
:CL_MEM_HOST_PTR: <<CL_MEM_HOST_PTR,{CL_MEM_HOST_PTR_label}>>
:CL_MEM_HOST_PTR_anchor: [[CL_MEM_HOST_PTR]]{CL_MEM_HOST_PTR}

// CL_MEM_MAP_COUNT
:CL_MEM_MAP_COUNT_label: pass:q[`CL_&#8203;MEM_&#8203;MAP_&#8203;COUNT`]
:CL_MEM_MAP_COUNT: <<CL_MEM_MAP_COUNT,{CL_MEM_MAP_COUNT_label}>>
:CL_MEM_MAP_COUNT_anchor: [[CL_MEM_MAP_COUNT]]{CL_MEM_MAP_COUNT}

// CL_MEM_REFERENCE_COUNT
:CL_MEM_REFERENCE_COUNT_label: pass:q[`CL_&#8203;MEM_&#8203;REFERENCE_&#8203;COUNT`]
:CL_MEM_REFERENCE_COUNT: <<CL_MEM_REFERENCE_COUNT,{CL_MEM_REFERENCE_COUNT_label}>>
:CL_MEM_REFERENCE_COUNT_anchor: [[CL_MEM_REFERENCE_COUNT]]{CL_MEM_REFERENCE_COUNT}

// CL_MEM_CONTEXT
:CL_MEM_CONTEXT_label: pass:q[`CL_&#8203;MEM_&#8203;CONTEXT`]
:CL_MEM_CONTEXT: <<CL_MEM_CONTEXT,{CL_MEM_CONTEXT_label}>>
:CL_MEM_CONTEXT_anchor: [[CL_MEM_CONTEXT]]{CL_MEM_CONTEXT}

// CL_MEM_ASSOCIATED_MEMOBJECT
:CL_MEM_ASSOCIATED_MEMOBJECT_label: pass:q[`CL_&#8203;MEM_&#8203;ASSOCIATED_&#8203;MEMOBJECT`]
:CL_MEM_ASSOCIATED_MEMOBJECT: <<CL_MEM_ASSOCIATED_MEMOBJECT,{CL_MEM_ASSOCIATED_MEMOBJECT_label}>>
:CL_MEM_ASSOCIATED_MEMOBJECT_anchor: [[CL_MEM_ASSOCIATED_MEMOBJECT]]{CL_MEM_ASSOCIATED_MEMOBJECT}

// CL_MEM_OFFSET
:CL_MEM_OFFSET_label: pass:q[`CL_&#8203;MEM_&#8203;OFFSET`]
:CL_MEM_OFFSET: <<CL_MEM_OFFSET,{CL_MEM_OFFSET_label}>>
:CL_MEM_OFFSET_anchor: [[CL_MEM_OFFSET]]{CL_MEM_OFFSET}

// CL_MEM_USES_SVM_POINTER
:CL_MEM_USES_SVM_POINTER_label: pass:q[`CL_&#8203;MEM_&#8203;USES_&#8203;SVM_&#8203;POINTER`]
:CL_MEM_USES_SVM_POINTER: <<CL_MEM_USES_SVM_POINTER,{CL_MEM_USES_SVM_POINTER_label}>>
:CL_MEM_USES_SVM_POINTER_anchor: [[CL_MEM_USES_SVM_POINTER]]{CL_MEM_USES_SVM_POINTER}

// CL_IMAGE_FORMAT
:CL_IMAGE_FORMAT_label: pass:q[`CL_&#8203;IMAGE_&#8203;FORMAT`]
:CL_IMAGE_FORMAT: <<CL_IMAGE_FORMAT,{CL_IMAGE_FORMAT_label}>>
:CL_IMAGE_FORMAT_anchor: [[CL_IMAGE_FORMAT]]{CL_IMAGE_FORMAT}

// CL_IMAGE_ELEMENT_SIZE
:CL_IMAGE_ELEMENT_SIZE_label: pass:q[`CL_&#8203;IMAGE_&#8203;ELEMENT_&#8203;SIZE`]
:CL_IMAGE_ELEMENT_SIZE: <<CL_IMAGE_ELEMENT_SIZE,{CL_IMAGE_ELEMENT_SIZE_label}>>
:CL_IMAGE_ELEMENT_SIZE_anchor: [[CL_IMAGE_ELEMENT_SIZE]]{CL_IMAGE_ELEMENT_SIZE}

// CL_IMAGE_ROW_PITCH
:CL_IMAGE_ROW_PITCH_label: pass:q[`CL_&#8203;IMAGE_&#8203;ROW_&#8203;PITCH`]
:CL_IMAGE_ROW_PITCH: <<CL_IMAGE_ROW_PITCH,{CL_IMAGE_ROW_PITCH_label}>>
:CL_IMAGE_ROW_PITCH_anchor: [[CL_IMAGE_ROW_PITCH]]{CL_IMAGE_ROW_PITCH}

// CL_IMAGE_SLICE_PITCH
:CL_IMAGE_SLICE_PITCH_label: pass:q[`CL_&#8203;IMAGE_&#8203;SLICE_&#8203;PITCH`]
:CL_IMAGE_SLICE_PITCH: <<CL_IMAGE_SLICE_PITCH,{CL_IMAGE_SLICE_PITCH_label}>>
:CL_IMAGE_SLICE_PITCH_anchor: [[CL_IMAGE_SLICE_PITCH]]{CL_IMAGE_SLICE_PITCH}

// CL_IMAGE_WIDTH
:CL_IMAGE_WIDTH_label: pass:q[`CL_&#8203;IMAGE_&#8203;WIDTH`]
:CL_IMAGE_WIDTH: <<CL_IMAGE_WIDTH,{CL_IMAGE_WIDTH_label}>>
:CL_IMAGE_WIDTH_anchor: [[CL_IMAGE_WIDTH]]{CL_IMAGE_WIDTH}

// CL_IMAGE_HEIGHT
:CL_IMAGE_HEIGHT_label: pass:q[`CL_&#8203;IMAGE_&#8203;HEIGHT`]
:CL_IMAGE_HEIGHT: <<CL_IMAGE_HEIGHT,{CL_IMAGE_HEIGHT_label}>>
:CL_IMAGE_HEIGHT_anchor: [[CL_IMAGE_HEIGHT]]{CL_IMAGE_HEIGHT}

// CL_IMAGE_DEPTH
:CL_IMAGE_DEPTH_label: pass:q[`CL_&#8203;IMAGE_&#8203;DEPTH`]
:CL_IMAGE_DEPTH: <<CL_IMAGE_DEPTH,{CL_IMAGE_DEPTH_label}>>
:CL_IMAGE_DEPTH_anchor: [[CL_IMAGE_DEPTH]]{CL_IMAGE_DEPTH}

// CL_IMAGE_ARRAY_SIZE
:CL_IMAGE_ARRAY_SIZE_label: pass:q[`CL_&#8203;IMAGE_&#8203;ARRAY_&#8203;SIZE`]
:CL_IMAGE_ARRAY_SIZE: <<CL_IMAGE_ARRAY_SIZE,{CL_IMAGE_ARRAY_SIZE_label}>>
:CL_IMAGE_ARRAY_SIZE_anchor: [[CL_IMAGE_ARRAY_SIZE]]{CL_IMAGE_ARRAY_SIZE}

// CL_IMAGE_BUFFER
:CL_IMAGE_BUFFER_label: pass:q[`CL_&#8203;IMAGE_&#8203;BUFFER`]
:CL_IMAGE_BUFFER: <<CL_IMAGE_BUFFER,{CL_IMAGE_BUFFER_label}>>
:CL_IMAGE_BUFFER_anchor: [[CL_IMAGE_BUFFER]]{CL_IMAGE_BUFFER}

// CL_IMAGE_NUM_MIP_LEVELS
:CL_IMAGE_NUM_MIP_LEVELS_label: pass:q[`CL_&#8203;IMAGE_&#8203;NUM_&#8203;MIP_&#8203;LEVELS`]
:CL_IMAGE_NUM_MIP_LEVELS: <<CL_IMAGE_NUM_MIP_LEVELS,{CL_IMAGE_NUM_MIP_LEVELS_label}>>
:CL_IMAGE_NUM_MIP_LEVELS_anchor: [[CL_IMAGE_NUM_MIP_LEVELS]]{CL_IMAGE_NUM_MIP_LEVELS}

// CL_IMAGE_NUM_SAMPLES
:CL_IMAGE_NUM_SAMPLES_label: pass:q[`CL_&#8203;IMAGE_&#8203;NUM_&#8203;SAMPLES`]
:CL_IMAGE_NUM_SAMPLES: <<CL_IMAGE_NUM_SAMPLES,{CL_IMAGE_NUM_SAMPLES_label}>>
:CL_IMAGE_NUM_SAMPLES_anchor: [[CL_IMAGE_NUM_SAMPLES]]{CL_IMAGE_NUM_SAMPLES}

// CL_PIPE_PACKET_SIZE
:CL_PIPE_PACKET_SIZE_label: pass:q[`CL_&#8203;PIPE_&#8203;PACKET_&#8203;SIZE`]
:CL_PIPE_PACKET_SIZE: <<CL_PIPE_PACKET_SIZE,{CL_PIPE_PACKET_SIZE_label}>>
:CL_PIPE_PACKET_SIZE_anchor: [[CL_PIPE_PACKET_SIZE]]{CL_PIPE_PACKET_SIZE}

// CL_PIPE_MAX_PACKETS
:CL_PIPE_MAX_PACKETS_label: pass:q[`CL_&#8203;PIPE_&#8203;MAX_&#8203;PACKETS`]
:CL_PIPE_MAX_PACKETS: <<CL_PIPE_MAX_PACKETS,{CL_PIPE_MAX_PACKETS_label}>>
:CL_PIPE_MAX_PACKETS_anchor: [[CL_PIPE_MAX_PACKETS]]{CL_PIPE_MAX_PACKETS}

// CL_ADDRESS_NONE
:CL_ADDRESS_NONE_label: pass:q[`CL_&#8203;ADDRESS_&#8203;NONE`]
:CL_ADDRESS_NONE: <<CL_ADDRESS_NONE,{CL_ADDRESS_NONE_label}>>
:CL_ADDRESS_NONE_anchor: [[CL_ADDRESS_NONE]]{CL_ADDRESS_NONE}

// CL_ADDRESS_CLAMP_TO_EDGE
:CL_ADDRESS_CLAMP_TO_EDGE_label: pass:q[`CL_&#8203;ADDRESS_&#8203;CLAMP_&#8203;TO_&#8203;EDGE`]
:CL_ADDRESS_CLAMP_TO_EDGE: <<CL_ADDRESS_CLAMP_TO_EDGE,{CL_ADDRESS_CLAMP_TO_EDGE_label}>>
:CL_ADDRESS_CLAMP_TO_EDGE_anchor: [[CL_ADDRESS_CLAMP_TO_EDGE]]{CL_ADDRESS_CLAMP_TO_EDGE}

// CL_ADDRESS_CLAMP
:CL_ADDRESS_CLAMP_label: pass:q[`CL_&#8203;ADDRESS_&#8203;CLAMP`]
:CL_ADDRESS_CLAMP: <<CL_ADDRESS_CLAMP,{CL_ADDRESS_CLAMP_label}>>
:CL_ADDRESS_CLAMP_anchor: [[CL_ADDRESS_CLAMP]]{CL_ADDRESS_CLAMP}

// CL_ADDRESS_REPEAT
:CL_ADDRESS_REPEAT_label: pass:q[`CL_&#8203;ADDRESS_&#8203;REPEAT`]
:CL_ADDRESS_REPEAT: <<CL_ADDRESS_REPEAT,{CL_ADDRESS_REPEAT_label}>>
:CL_ADDRESS_REPEAT_anchor: [[CL_ADDRESS_REPEAT]]{CL_ADDRESS_REPEAT}

// CL_ADDRESS_MIRRORED_REPEAT
:CL_ADDRESS_MIRRORED_REPEAT_label: pass:q[`CL_&#8203;ADDRESS_&#8203;MIRRORED_&#8203;REPEAT`]
:CL_ADDRESS_MIRRORED_REPEAT: <<CL_ADDRESS_MIRRORED_REPEAT,{CL_ADDRESS_MIRRORED_REPEAT_label}>>
:CL_ADDRESS_MIRRORED_REPEAT_anchor: [[CL_ADDRESS_MIRRORED_REPEAT]]{CL_ADDRESS_MIRRORED_REPEAT}

// CL_FILTER_NEAREST
:CL_FILTER_NEAREST_label: pass:q[`CL_&#8203;FILTER_&#8203;NEAREST`]
:CL_FILTER_NEAREST: <<CL_FILTER_NEAREST,{CL_FILTER_NEAREST_label}>>
:CL_FILTER_NEAREST_anchor: [[CL_FILTER_NEAREST]]{CL_FILTER_NEAREST}

// CL_FILTER_LINEAR
:CL_FILTER_LINEAR_label: pass:q[`CL_&#8203;FILTER_&#8203;LINEAR`]
:CL_FILTER_LINEAR: <<CL_FILTER_LINEAR,{CL_FILTER_LINEAR_label}>>
:CL_FILTER_LINEAR_anchor: [[CL_FILTER_LINEAR]]{CL_FILTER_LINEAR}

// CL_SAMPLER_REFERENCE_COUNT
:CL_SAMPLER_REFERENCE_COUNT_label: pass:q[`CL_&#8203;SAMPLER_&#8203;REFERENCE_&#8203;COUNT`]
:CL_SAMPLER_REFERENCE_COUNT: <<CL_SAMPLER_REFERENCE_COUNT,{CL_SAMPLER_REFERENCE_COUNT_label}>>
:CL_SAMPLER_REFERENCE_COUNT_anchor: [[CL_SAMPLER_REFERENCE_COUNT]]{CL_SAMPLER_REFERENCE_COUNT}

// CL_SAMPLER_CONTEXT
:CL_SAMPLER_CONTEXT_label: pass:q[`CL_&#8203;SAMPLER_&#8203;CONTEXT`]
:CL_SAMPLER_CONTEXT: <<CL_SAMPLER_CONTEXT,{CL_SAMPLER_CONTEXT_label}>>
:CL_SAMPLER_CONTEXT_anchor: [[CL_SAMPLER_CONTEXT]]{CL_SAMPLER_CONTEXT}

// CL_SAMPLER_NORMALIZED_COORDS
:CL_SAMPLER_NORMALIZED_COORDS_label: pass:q[`CL_&#8203;SAMPLER_&#8203;NORMALIZED_&#8203;COORDS`]
:CL_SAMPLER_NORMALIZED_COORDS: <<CL_SAMPLER_NORMALIZED_COORDS,{CL_SAMPLER_NORMALIZED_COORDS_label}>>
:CL_SAMPLER_NORMALIZED_COORDS_anchor: [[CL_SAMPLER_NORMALIZED_COORDS]]{CL_SAMPLER_NORMALIZED_COORDS}

// CL_SAMPLER_ADDRESSING_MODE
:CL_SAMPLER_ADDRESSING_MODE_label: pass:q[`CL_&#8203;SAMPLER_&#8203;ADDRESSING_&#8203;MODE`]
:CL_SAMPLER_ADDRESSING_MODE: <<CL_SAMPLER_ADDRESSING_MODE,{CL_SAMPLER_ADDRESSING_MODE_label}>>
:CL_SAMPLER_ADDRESSING_MODE_anchor: [[CL_SAMPLER_ADDRESSING_MODE]]{CL_SAMPLER_ADDRESSING_MODE}

// CL_SAMPLER_FILTER_MODE
:CL_SAMPLER_FILTER_MODE_label: pass:q[`CL_&#8203;SAMPLER_&#8203;FILTER_&#8203;MODE`]
:CL_SAMPLER_FILTER_MODE: <<CL_SAMPLER_FILTER_MODE,{CL_SAMPLER_FILTER_MODE_label}>>
:CL_SAMPLER_FILTER_MODE_anchor: [[CL_SAMPLER_FILTER_MODE]]{CL_SAMPLER_FILTER_MODE}

// CL_SAMPLER_MIP_FILTER_MODE
:CL_SAMPLER_MIP_FILTER_MODE_label: pass:q[`CL_&#8203;SAMPLER_&#8203;MIP_&#8203;FILTER_&#8203;MODE`]
:CL_SAMPLER_MIP_FILTER_MODE: <<CL_SAMPLER_MIP_FILTER_MODE,{CL_SAMPLER_MIP_FILTER_MODE_label}>>
:CL_SAMPLER_MIP_FILTER_MODE_anchor: [[CL_SAMPLER_MIP_FILTER_MODE]]{CL_SAMPLER_MIP_FILTER_MODE}

// CL_SAMPLER_LOD_MIN
:CL_SAMPLER_LOD_MIN_label: pass:q[`CL_&#8203;SAMPLER_&#8203;LOD_&#8203;MIN`]
:CL_SAMPLER_LOD_MIN: <<CL_SAMPLER_LOD_MIN,{CL_SAMPLER_LOD_MIN_label}>>
:CL_SAMPLER_LOD_MIN_anchor: [[CL_SAMPLER_LOD_MIN]]{CL_SAMPLER_LOD_MIN}

// CL_SAMPLER_LOD_MAX
:CL_SAMPLER_LOD_MAX_label: pass:q[`CL_&#8203;SAMPLER_&#8203;LOD_&#8203;MAX`]
:CL_SAMPLER_LOD_MAX: <<CL_SAMPLER_LOD_MAX,{CL_SAMPLER_LOD_MAX_label}>>
:CL_SAMPLER_LOD_MAX_anchor: [[CL_SAMPLER_LOD_MAX]]{CL_SAMPLER_LOD_MAX}

// CL_MAP_READ
:CL_MAP_READ_label: pass:q[`CL_&#8203;MAP_&#8203;READ`]
:CL_MAP_READ: <<CL_MAP_READ,{CL_MAP_READ_label}>>
:CL_MAP_READ_anchor: [[CL_MAP_READ]]{CL_MAP_READ}

// CL_MAP_WRITE
:CL_MAP_WRITE_label: pass:q[`CL_&#8203;MAP_&#8203;WRITE`]
:CL_MAP_WRITE: <<CL_MAP_WRITE,{CL_MAP_WRITE_label}>>
:CL_MAP_WRITE_anchor: [[CL_MAP_WRITE]]{CL_MAP_WRITE}

// CL_MAP_WRITE_INVALIDATE_REGION
:CL_MAP_WRITE_INVALIDATE_REGION_label: pass:q[`CL_&#8203;MAP_&#8203;WRITE_&#8203;INVALIDATE_&#8203;REGION`]
:CL_MAP_WRITE_INVALIDATE_REGION: <<CL_MAP_WRITE_INVALIDATE_REGION,{CL_MAP_WRITE_INVALIDATE_REGION_label}>>
:CL_MAP_WRITE_INVALIDATE_REGION_anchor: [[CL_MAP_WRITE_INVALIDATE_REGION]]{CL_MAP_WRITE_INVALIDATE_REGION}

// CL_PROGRAM_REFERENCE_COUNT
:CL_PROGRAM_REFERENCE_COUNT_label: pass:q[`CL_&#8203;PROGRAM_&#8203;REFERENCE_&#8203;COUNT`]
:CL_PROGRAM_REFERENCE_COUNT: <<CL_PROGRAM_REFERENCE_COUNT,{CL_PROGRAM_REFERENCE_COUNT_label}>>
:CL_PROGRAM_REFERENCE_COUNT_anchor: [[CL_PROGRAM_REFERENCE_COUNT]]{CL_PROGRAM_REFERENCE_COUNT}

// CL_PROGRAM_CONTEXT
:CL_PROGRAM_CONTEXT_label: pass:q[`CL_&#8203;PROGRAM_&#8203;CONTEXT`]
:CL_PROGRAM_CONTEXT: <<CL_PROGRAM_CONTEXT,{CL_PROGRAM_CONTEXT_label}>>
:CL_PROGRAM_CONTEXT_anchor: [[CL_PROGRAM_CONTEXT]]{CL_PROGRAM_CONTEXT}

// CL_PROGRAM_NUM_DEVICES
:CL_PROGRAM_NUM_DEVICES_label: pass:q[`CL_&#8203;PROGRAM_&#8203;NUM_&#8203;DEVICES`]
:CL_PROGRAM_NUM_DEVICES: <<CL_PROGRAM_NUM_DEVICES,{CL_PROGRAM_NUM_DEVICES_label}>>
:CL_PROGRAM_NUM_DEVICES_anchor: [[CL_PROGRAM_NUM_DEVICES]]{CL_PROGRAM_NUM_DEVICES}

// CL_PROGRAM_DEVICES
:CL_PROGRAM_DEVICES_label: pass:q[`CL_&#8203;PROGRAM_&#8203;DEVICES`]
:CL_PROGRAM_DEVICES: <<CL_PROGRAM_DEVICES,{CL_PROGRAM_DEVICES_label}>>
:CL_PROGRAM_DEVICES_anchor: [[CL_PROGRAM_DEVICES]]{CL_PROGRAM_DEVICES}

// CL_PROGRAM_SOURCE
:CL_PROGRAM_SOURCE_label: pass:q[`CL_&#8203;PROGRAM_&#8203;SOURCE`]
:CL_PROGRAM_SOURCE: <<CL_PROGRAM_SOURCE,{CL_PROGRAM_SOURCE_label}>>
:CL_PROGRAM_SOURCE_anchor: [[CL_PROGRAM_SOURCE]]{CL_PROGRAM_SOURCE}

// CL_PROGRAM_BINARY_SIZES
:CL_PROGRAM_BINARY_SIZES_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BINARY_&#8203;SIZES`]
:CL_PROGRAM_BINARY_SIZES: <<CL_PROGRAM_BINARY_SIZES,{CL_PROGRAM_BINARY_SIZES_label}>>
:CL_PROGRAM_BINARY_SIZES_anchor: [[CL_PROGRAM_BINARY_SIZES]]{CL_PROGRAM_BINARY_SIZES}

// CL_PROGRAM_BINARIES
:CL_PROGRAM_BINARIES_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BINARIES`]
:CL_PROGRAM_BINARIES: <<CL_PROGRAM_BINARIES,{CL_PROGRAM_BINARIES_label}>>
:CL_PROGRAM_BINARIES_anchor: [[CL_PROGRAM_BINARIES]]{CL_PROGRAM_BINARIES}

// CL_PROGRAM_NUM_KERNELS
:CL_PROGRAM_NUM_KERNELS_label: pass:q[`CL_&#8203;PROGRAM_&#8203;NUM_&#8203;KERNELS`]
:CL_PROGRAM_NUM_KERNELS: <<CL_PROGRAM_NUM_KERNELS,{CL_PROGRAM_NUM_KERNELS_label}>>
:CL_PROGRAM_NUM_KERNELS_anchor: [[CL_PROGRAM_NUM_KERNELS]]{CL_PROGRAM_NUM_KERNELS}

// CL_PROGRAM_KERNEL_NAMES
:CL_PROGRAM_KERNEL_NAMES_label: pass:q[`CL_&#8203;PROGRAM_&#8203;KERNEL_&#8203;NAMES`]
:CL_PROGRAM_KERNEL_NAMES: <<CL_PROGRAM_KERNEL_NAMES,{CL_PROGRAM_KERNEL_NAMES_label}>>
:CL_PROGRAM_KERNEL_NAMES_anchor: [[CL_PROGRAM_KERNEL_NAMES]]{CL_PROGRAM_KERNEL_NAMES}

// CL_PROGRAM_IL
:CL_PROGRAM_IL_label: pass:q[`CL_&#8203;PROGRAM_&#8203;IL`]
:CL_PROGRAM_IL: <<CL_PROGRAM_IL,{CL_PROGRAM_IL_label}>>
:CL_PROGRAM_IL_anchor: [[CL_PROGRAM_IL]]{CL_PROGRAM_IL}

// CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT
:CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT_label: pass:q[`CL_&#8203;PROGRAM_&#8203;SCOPE_&#8203;GLOBAL_&#8203;CTORS_&#8203;PRESENT`]
:CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT: <<CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT,{CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT_label}>>
:CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT_anchor: [[CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT]]{CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT}

// CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT
:CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT_label: pass:q[`CL_&#8203;PROGRAM_&#8203;SCOPE_&#8203;GLOBAL_&#8203;DTORS_&#8203;PRESENT`]
:CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT: <<CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT,{CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT_label}>>
:CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT_anchor: [[CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT]]{CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT}

// CL_PROGRAM_BUILD_STATUS
:CL_PROGRAM_BUILD_STATUS_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BUILD_&#8203;STATUS`]
:CL_PROGRAM_BUILD_STATUS: <<CL_PROGRAM_BUILD_STATUS,{CL_PROGRAM_BUILD_STATUS_label}>>
:CL_PROGRAM_BUILD_STATUS_anchor: [[CL_PROGRAM_BUILD_STATUS]]{CL_PROGRAM_BUILD_STATUS}

// CL_PROGRAM_BUILD_OPTIONS
:CL_PROGRAM_BUILD_OPTIONS_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BUILD_&#8203;OPTIONS`]
:CL_PROGRAM_BUILD_OPTIONS: <<CL_PROGRAM_BUILD_OPTIONS,{CL_PROGRAM_BUILD_OPTIONS_label}>>
:CL_PROGRAM_BUILD_OPTIONS_anchor: [[CL_PROGRAM_BUILD_OPTIONS]]{CL_PROGRAM_BUILD_OPTIONS}

// CL_PROGRAM_BUILD_LOG
:CL_PROGRAM_BUILD_LOG_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BUILD_&#8203;LOG`]
:CL_PROGRAM_BUILD_LOG: <<CL_PROGRAM_BUILD_LOG,{CL_PROGRAM_BUILD_LOG_label}>>
:CL_PROGRAM_BUILD_LOG_anchor: [[CL_PROGRAM_BUILD_LOG]]{CL_PROGRAM_BUILD_LOG}

// CL_PROGRAM_BINARY_TYPE
:CL_PROGRAM_BINARY_TYPE_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BINARY_&#8203;TYPE`]
:CL_PROGRAM_BINARY_TYPE: <<CL_PROGRAM_BINARY_TYPE,{CL_PROGRAM_BINARY_TYPE_label}>>
:CL_PROGRAM_BINARY_TYPE_anchor: [[CL_PROGRAM_BINARY_TYPE]]{CL_PROGRAM_BINARY_TYPE}

// CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE
:CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BUILD_&#8203;GLOBAL_&#8203;VARIABLE_&#8203;TOTAL_&#8203;SIZE`]
:CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE: <<CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE,{CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE_label}>>
:CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE_anchor: [[CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE]]{CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE}

// CL_PROGRAM_BINARY_TYPE_NONE
:CL_PROGRAM_BINARY_TYPE_NONE_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BINARY_&#8203;TYPE_&#8203;NONE`]
:CL_PROGRAM_BINARY_TYPE_NONE: <<CL_PROGRAM_BINARY_TYPE_NONE,{CL_PROGRAM_BINARY_TYPE_NONE_label}>>
:CL_PROGRAM_BINARY_TYPE_NONE_anchor: [[CL_PROGRAM_BINARY_TYPE_NONE]]{CL_PROGRAM_BINARY_TYPE_NONE}

// CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT
:CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BINARY_&#8203;TYPE_&#8203;COMPILED_&#8203;OBJECT`]
:CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT: <<CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT,{CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT_label}>>
:CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT_anchor: [[CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT]]{CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT}

// CL_PROGRAM_BINARY_TYPE_LIBRARY
:CL_PROGRAM_BINARY_TYPE_LIBRARY_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BINARY_&#8203;TYPE_&#8203;LIBRARY`]
:CL_PROGRAM_BINARY_TYPE_LIBRARY: <<CL_PROGRAM_BINARY_TYPE_LIBRARY,{CL_PROGRAM_BINARY_TYPE_LIBRARY_label}>>
:CL_PROGRAM_BINARY_TYPE_LIBRARY_anchor: [[CL_PROGRAM_BINARY_TYPE_LIBRARY]]{CL_PROGRAM_BINARY_TYPE_LIBRARY}

// CL_PROGRAM_BINARY_TYPE_EXECUTABLE
:CL_PROGRAM_BINARY_TYPE_EXECUTABLE_label: pass:q[`CL_&#8203;PROGRAM_&#8203;BINARY_&#8203;TYPE_&#8203;EXECUTABLE`]
:CL_PROGRAM_BINARY_TYPE_EXECUTABLE: <<CL_PROGRAM_BINARY_TYPE_EXECUTABLE,{CL_PROGRAM_BINARY_TYPE_EXECUTABLE_label}>>
:CL_PROGRAM_BINARY_TYPE_EXECUTABLE_anchor: [[CL_PROGRAM_BINARY_TYPE_EXECUTABLE]]{CL_PROGRAM_BINARY_TYPE_EXECUTABLE}

// CL_BUILD_SUCCESS
:CL_BUILD_SUCCESS_label: pass:q[`CL_&#8203;BUILD_&#8203;SUCCESS`]
:CL_BUILD_SUCCESS: <<CL_BUILD_SUCCESS,{CL_BUILD_SUCCESS_label}>>
:CL_BUILD_SUCCESS_anchor: [[CL_BUILD_SUCCESS]]{CL_BUILD_SUCCESS}

// CL_BUILD_NONE
:CL_BUILD_NONE_label: pass:q[`CL_&#8203;BUILD_&#8203;NONE`]
:CL_BUILD_NONE: <<CL_BUILD_NONE,{CL_BUILD_NONE_label}>>
:CL_BUILD_NONE_anchor: [[CL_BUILD_NONE]]{CL_BUILD_NONE}

// CL_BUILD_ERROR
:CL_BUILD_ERROR_label: pass:q[`CL_&#8203;BUILD_&#8203;ERROR`]
:CL_BUILD_ERROR: <<CL_BUILD_ERROR,{CL_BUILD_ERROR_label}>>
:CL_BUILD_ERROR_anchor: [[CL_BUILD_ERROR]]{CL_BUILD_ERROR}

// CL_BUILD_IN_PROGRESS
:CL_BUILD_IN_PROGRESS_label: pass:q[`CL_&#8203;BUILD_&#8203;IN_&#8203;PROGRESS`]
:CL_BUILD_IN_PROGRESS: <<CL_BUILD_IN_PROGRESS,{CL_BUILD_IN_PROGRESS_label}>>
:CL_BUILD_IN_PROGRESS_anchor: [[CL_BUILD_IN_PROGRESS]]{CL_BUILD_IN_PROGRESS}

// CL_KERNEL_FUNCTION_NAME
:CL_KERNEL_FUNCTION_NAME_label: pass:q[`CL_&#8203;KERNEL_&#8203;FUNCTION_&#8203;NAME`]
:CL_KERNEL_FUNCTION_NAME: <<CL_KERNEL_FUNCTION_NAME,{CL_KERNEL_FUNCTION_NAME_label}>>
:CL_KERNEL_FUNCTION_NAME_anchor: [[CL_KERNEL_FUNCTION_NAME]]{CL_KERNEL_FUNCTION_NAME}

// CL_KERNEL_NUM_ARGS
:CL_KERNEL_NUM_ARGS_label: pass:q[`CL_&#8203;KERNEL_&#8203;NUM_&#8203;ARGS`]
:CL_KERNEL_NUM_ARGS: <<CL_KERNEL_NUM_ARGS,{CL_KERNEL_NUM_ARGS_label}>>
:CL_KERNEL_NUM_ARGS_anchor: [[CL_KERNEL_NUM_ARGS]]{CL_KERNEL_NUM_ARGS}

// CL_KERNEL_REFERENCE_COUNT
:CL_KERNEL_REFERENCE_COUNT_label: pass:q[`CL_&#8203;KERNEL_&#8203;REFERENCE_&#8203;COUNT`]
:CL_KERNEL_REFERENCE_COUNT: <<CL_KERNEL_REFERENCE_COUNT,{CL_KERNEL_REFERENCE_COUNT_label}>>
:CL_KERNEL_REFERENCE_COUNT_anchor: [[CL_KERNEL_REFERENCE_COUNT]]{CL_KERNEL_REFERENCE_COUNT}

// CL_KERNEL_CONTEXT
:CL_KERNEL_CONTEXT_label: pass:q[`CL_&#8203;KERNEL_&#8203;CONTEXT`]
:CL_KERNEL_CONTEXT: <<CL_KERNEL_CONTEXT,{CL_KERNEL_CONTEXT_label}>>
:CL_KERNEL_CONTEXT_anchor: [[CL_KERNEL_CONTEXT]]{CL_KERNEL_CONTEXT}

// CL_KERNEL_PROGRAM
:CL_KERNEL_PROGRAM_label: pass:q[`CL_&#8203;KERNEL_&#8203;PROGRAM`]
:CL_KERNEL_PROGRAM: <<CL_KERNEL_PROGRAM,{CL_KERNEL_PROGRAM_label}>>
:CL_KERNEL_PROGRAM_anchor: [[CL_KERNEL_PROGRAM]]{CL_KERNEL_PROGRAM}

// CL_KERNEL_ATTRIBUTES
:CL_KERNEL_ATTRIBUTES_label: pass:q[`CL_&#8203;KERNEL_&#8203;ATTRIBUTES`]
:CL_KERNEL_ATTRIBUTES: <<CL_KERNEL_ATTRIBUTES,{CL_KERNEL_ATTRIBUTES_label}>>
:CL_KERNEL_ATTRIBUTES_anchor: [[CL_KERNEL_ATTRIBUTES]]{CL_KERNEL_ATTRIBUTES}

// CL_KERNEL_MAX_NUM_SUB_GROUPS
:CL_KERNEL_MAX_NUM_SUB_GROUPS_label: pass:q[`CL_&#8203;KERNEL_&#8203;MAX_&#8203;NUM_&#8203;SUB_&#8203;GROUPS`]
:CL_KERNEL_MAX_NUM_SUB_GROUPS: <<CL_KERNEL_MAX_NUM_SUB_GROUPS,{CL_KERNEL_MAX_NUM_SUB_GROUPS_label}>>
:CL_KERNEL_MAX_NUM_SUB_GROUPS_anchor: [[CL_KERNEL_MAX_NUM_SUB_GROUPS]]{CL_KERNEL_MAX_NUM_SUB_GROUPS}

// CL_KERNEL_COMPILE_NUM_SUB_GROUPS
:CL_KERNEL_COMPILE_NUM_SUB_GROUPS_label: pass:q[`CL_&#8203;KERNEL_&#8203;COMPILE_&#8203;NUM_&#8203;SUB_&#8203;GROUPS`]
:CL_KERNEL_COMPILE_NUM_SUB_GROUPS: <<CL_KERNEL_COMPILE_NUM_SUB_GROUPS,{CL_KERNEL_COMPILE_NUM_SUB_GROUPS_label}>>
:CL_KERNEL_COMPILE_NUM_SUB_GROUPS_anchor: [[CL_KERNEL_COMPILE_NUM_SUB_GROUPS]]{CL_KERNEL_COMPILE_NUM_SUB_GROUPS}

// CL_KERNEL_ARG_ADDRESS_QUALIFIER
:CL_KERNEL_ARG_ADDRESS_QUALIFIER_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ADDRESS_&#8203;QUALIFIER`]
:CL_KERNEL_ARG_ADDRESS_QUALIFIER: <<CL_KERNEL_ARG_ADDRESS_QUALIFIER,{CL_KERNEL_ARG_ADDRESS_QUALIFIER_label}>>
:CL_KERNEL_ARG_ADDRESS_QUALIFIER_anchor: [[CL_KERNEL_ARG_ADDRESS_QUALIFIER]]{CL_KERNEL_ARG_ADDRESS_QUALIFIER}

// CL_KERNEL_ARG_ACCESS_QUALIFIER
:CL_KERNEL_ARG_ACCESS_QUALIFIER_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ACCESS_&#8203;QUALIFIER`]
:CL_KERNEL_ARG_ACCESS_QUALIFIER: <<CL_KERNEL_ARG_ACCESS_QUALIFIER,{CL_KERNEL_ARG_ACCESS_QUALIFIER_label}>>
:CL_KERNEL_ARG_ACCESS_QUALIFIER_anchor: [[CL_KERNEL_ARG_ACCESS_QUALIFIER]]{CL_KERNEL_ARG_ACCESS_QUALIFIER}

// CL_KERNEL_ARG_TYPE_NAME
:CL_KERNEL_ARG_TYPE_NAME_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;TYPE_&#8203;NAME`]
:CL_KERNEL_ARG_TYPE_NAME: <<CL_KERNEL_ARG_TYPE_NAME,{CL_KERNEL_ARG_TYPE_NAME_label}>>
:CL_KERNEL_ARG_TYPE_NAME_anchor: [[CL_KERNEL_ARG_TYPE_NAME]]{CL_KERNEL_ARG_TYPE_NAME}

// CL_KERNEL_ARG_TYPE_QUALIFIER
:CL_KERNEL_ARG_TYPE_QUALIFIER_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;TYPE_&#8203;QUALIFIER`]
:CL_KERNEL_ARG_TYPE_QUALIFIER: <<CL_KERNEL_ARG_TYPE_QUALIFIER,{CL_KERNEL_ARG_TYPE_QUALIFIER_label}>>
:CL_KERNEL_ARG_TYPE_QUALIFIER_anchor: [[CL_KERNEL_ARG_TYPE_QUALIFIER]]{CL_KERNEL_ARG_TYPE_QUALIFIER}

// CL_KERNEL_ARG_NAME
:CL_KERNEL_ARG_NAME_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;NAME`]
:CL_KERNEL_ARG_NAME: <<CL_KERNEL_ARG_NAME,{CL_KERNEL_ARG_NAME_label}>>
:CL_KERNEL_ARG_NAME_anchor: [[CL_KERNEL_ARG_NAME]]{CL_KERNEL_ARG_NAME}

// CL_KERNEL_ARG_ADDRESS_GLOBAL
:CL_KERNEL_ARG_ADDRESS_GLOBAL_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ADDRESS_&#8203;GLOBAL`]
:CL_KERNEL_ARG_ADDRESS_GLOBAL: <<CL_KERNEL_ARG_ADDRESS_GLOBAL,{CL_KERNEL_ARG_ADDRESS_GLOBAL_label}>>
:CL_KERNEL_ARG_ADDRESS_GLOBAL_anchor: [[CL_KERNEL_ARG_ADDRESS_GLOBAL]]{CL_KERNEL_ARG_ADDRESS_GLOBAL}

// CL_KERNEL_ARG_ADDRESS_LOCAL
:CL_KERNEL_ARG_ADDRESS_LOCAL_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ADDRESS_&#8203;LOCAL`]
:CL_KERNEL_ARG_ADDRESS_LOCAL: <<CL_KERNEL_ARG_ADDRESS_LOCAL,{CL_KERNEL_ARG_ADDRESS_LOCAL_label}>>
:CL_KERNEL_ARG_ADDRESS_LOCAL_anchor: [[CL_KERNEL_ARG_ADDRESS_LOCAL]]{CL_KERNEL_ARG_ADDRESS_LOCAL}

// CL_KERNEL_ARG_ADDRESS_CONSTANT
:CL_KERNEL_ARG_ADDRESS_CONSTANT_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ADDRESS_&#8203;CONSTANT`]
:CL_KERNEL_ARG_ADDRESS_CONSTANT: <<CL_KERNEL_ARG_ADDRESS_CONSTANT,{CL_KERNEL_ARG_ADDRESS_CONSTANT_label}>>
:CL_KERNEL_ARG_ADDRESS_CONSTANT_anchor: [[CL_KERNEL_ARG_ADDRESS_CONSTANT]]{CL_KERNEL_ARG_ADDRESS_CONSTANT}

// CL_KERNEL_ARG_ADDRESS_PRIVATE
:CL_KERNEL_ARG_ADDRESS_PRIVATE_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ADDRESS_&#8203;PRIVATE`]
:CL_KERNEL_ARG_ADDRESS_PRIVATE: <<CL_KERNEL_ARG_ADDRESS_PRIVATE,{CL_KERNEL_ARG_ADDRESS_PRIVATE_label}>>
:CL_KERNEL_ARG_ADDRESS_PRIVATE_anchor: [[CL_KERNEL_ARG_ADDRESS_PRIVATE]]{CL_KERNEL_ARG_ADDRESS_PRIVATE}

// CL_KERNEL_ARG_ACCESS_READ_ONLY
:CL_KERNEL_ARG_ACCESS_READ_ONLY_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ACCESS_&#8203;READ_&#8203;ONLY`]
:CL_KERNEL_ARG_ACCESS_READ_ONLY: <<CL_KERNEL_ARG_ACCESS_READ_ONLY,{CL_KERNEL_ARG_ACCESS_READ_ONLY_label}>>
:CL_KERNEL_ARG_ACCESS_READ_ONLY_anchor: [[CL_KERNEL_ARG_ACCESS_READ_ONLY]]{CL_KERNEL_ARG_ACCESS_READ_ONLY}

// CL_KERNEL_ARG_ACCESS_WRITE_ONLY
:CL_KERNEL_ARG_ACCESS_WRITE_ONLY_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ACCESS_&#8203;WRITE_&#8203;ONLY`]
:CL_KERNEL_ARG_ACCESS_WRITE_ONLY: <<CL_KERNEL_ARG_ACCESS_WRITE_ONLY,{CL_KERNEL_ARG_ACCESS_WRITE_ONLY_label}>>
:CL_KERNEL_ARG_ACCESS_WRITE_ONLY_anchor: [[CL_KERNEL_ARG_ACCESS_WRITE_ONLY]]{CL_KERNEL_ARG_ACCESS_WRITE_ONLY}

// CL_KERNEL_ARG_ACCESS_READ_WRITE
:CL_KERNEL_ARG_ACCESS_READ_WRITE_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ACCESS_&#8203;READ_&#8203;WRITE`]
:CL_KERNEL_ARG_ACCESS_READ_WRITE: <<CL_KERNEL_ARG_ACCESS_READ_WRITE,{CL_KERNEL_ARG_ACCESS_READ_WRITE_label}>>
:CL_KERNEL_ARG_ACCESS_READ_WRITE_anchor: [[CL_KERNEL_ARG_ACCESS_READ_WRITE]]{CL_KERNEL_ARG_ACCESS_READ_WRITE}

// CL_KERNEL_ARG_ACCESS_NONE
:CL_KERNEL_ARG_ACCESS_NONE_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;ACCESS_&#8203;NONE`]
:CL_KERNEL_ARG_ACCESS_NONE: <<CL_KERNEL_ARG_ACCESS_NONE,{CL_KERNEL_ARG_ACCESS_NONE_label}>>
:CL_KERNEL_ARG_ACCESS_NONE_anchor: [[CL_KERNEL_ARG_ACCESS_NONE]]{CL_KERNEL_ARG_ACCESS_NONE}

// CL_KERNEL_ARG_TYPE_NONE
:CL_KERNEL_ARG_TYPE_NONE_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;TYPE_&#8203;NONE`]
:CL_KERNEL_ARG_TYPE_NONE: <<CL_KERNEL_ARG_TYPE_NONE,{CL_KERNEL_ARG_TYPE_NONE_label}>>
:CL_KERNEL_ARG_TYPE_NONE_anchor: [[CL_KERNEL_ARG_TYPE_NONE]]{CL_KERNEL_ARG_TYPE_NONE}

// CL_KERNEL_ARG_TYPE_CONST
:CL_KERNEL_ARG_TYPE_CONST_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;TYPE_&#8203;CONST`]
:CL_KERNEL_ARG_TYPE_CONST: <<CL_KERNEL_ARG_TYPE_CONST,{CL_KERNEL_ARG_TYPE_CONST_label}>>
:CL_KERNEL_ARG_TYPE_CONST_anchor: [[CL_KERNEL_ARG_TYPE_CONST]]{CL_KERNEL_ARG_TYPE_CONST}

// CL_KERNEL_ARG_TYPE_RESTRICT
:CL_KERNEL_ARG_TYPE_RESTRICT_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;TYPE_&#8203;RESTRICT`]
:CL_KERNEL_ARG_TYPE_RESTRICT: <<CL_KERNEL_ARG_TYPE_RESTRICT,{CL_KERNEL_ARG_TYPE_RESTRICT_label}>>
:CL_KERNEL_ARG_TYPE_RESTRICT_anchor: [[CL_KERNEL_ARG_TYPE_RESTRICT]]{CL_KERNEL_ARG_TYPE_RESTRICT}

// CL_KERNEL_ARG_TYPE_VOLATILE
:CL_KERNEL_ARG_TYPE_VOLATILE_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;TYPE_&#8203;VOLATILE`]
:CL_KERNEL_ARG_TYPE_VOLATILE: <<CL_KERNEL_ARG_TYPE_VOLATILE,{CL_KERNEL_ARG_TYPE_VOLATILE_label}>>
:CL_KERNEL_ARG_TYPE_VOLATILE_anchor: [[CL_KERNEL_ARG_TYPE_VOLATILE]]{CL_KERNEL_ARG_TYPE_VOLATILE}

// CL_KERNEL_ARG_TYPE_PIPE
:CL_KERNEL_ARG_TYPE_PIPE_label: pass:q[`CL_&#8203;KERNEL_&#8203;ARG_&#8203;TYPE_&#8203;PIPE`]
:CL_KERNEL_ARG_TYPE_PIPE: <<CL_KERNEL_ARG_TYPE_PIPE,{CL_KERNEL_ARG_TYPE_PIPE_label}>>
:CL_KERNEL_ARG_TYPE_PIPE_anchor: [[CL_KERNEL_ARG_TYPE_PIPE]]{CL_KERNEL_ARG_TYPE_PIPE}

// CL_KERNEL_WORK_GROUP_SIZE
:CL_KERNEL_WORK_GROUP_SIZE_label: pass:q[`CL_&#8203;KERNEL_&#8203;WORK_&#8203;GROUP_&#8203;SIZE`]
:CL_KERNEL_WORK_GROUP_SIZE: <<CL_KERNEL_WORK_GROUP_SIZE,{CL_KERNEL_WORK_GROUP_SIZE_label}>>
:CL_KERNEL_WORK_GROUP_SIZE_anchor: [[CL_KERNEL_WORK_GROUP_SIZE]]{CL_KERNEL_WORK_GROUP_SIZE}

// CL_KERNEL_COMPILE_WORK_GROUP_SIZE
:CL_KERNEL_COMPILE_WORK_GROUP_SIZE_label: pass:q[`CL_&#8203;KERNEL_&#8203;COMPILE_&#8203;WORK_&#8203;GROUP_&#8203;SIZE`]
:CL_KERNEL_COMPILE_WORK_GROUP_SIZE: <<CL_KERNEL_COMPILE_WORK_GROUP_SIZE,{CL_KERNEL_COMPILE_WORK_GROUP_SIZE_label}>>
:CL_KERNEL_COMPILE_WORK_GROUP_SIZE_anchor: [[CL_KERNEL_COMPILE_WORK_GROUP_SIZE]]{CL_KERNEL_COMPILE_WORK_GROUP_SIZE}

// CL_KERNEL_LOCAL_MEM_SIZE
:CL_KERNEL_LOCAL_MEM_SIZE_label: pass:q[`CL_&#8203;KERNEL_&#8203;LOCAL_&#8203;MEM_&#8203;SIZE`]
:CL_KERNEL_LOCAL_MEM_SIZE: <<CL_KERNEL_LOCAL_MEM_SIZE,{CL_KERNEL_LOCAL_MEM_SIZE_label}>>
:CL_KERNEL_LOCAL_MEM_SIZE_anchor: [[CL_KERNEL_LOCAL_MEM_SIZE]]{CL_KERNEL_LOCAL_MEM_SIZE}

// CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE
:CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE_label: pass:q[`CL_&#8203;KERNEL_&#8203;PREFERRED_&#8203;WORK_&#8203;GROUP_&#8203;SIZE_&#8203;MULTIPLE`]
:CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE: <<CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE,{CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE_label}>>
:CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE_anchor: [[CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE]]{CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE}

// CL_KERNEL_PRIVATE_MEM_SIZE
:CL_KERNEL_PRIVATE_MEM_SIZE_label: pass:q[`CL_&#8203;KERNEL_&#8203;PRIVATE_&#8203;MEM_&#8203;SIZE`]
:CL_KERNEL_PRIVATE_MEM_SIZE: <<CL_KERNEL_PRIVATE_MEM_SIZE,{CL_KERNEL_PRIVATE_MEM_SIZE_label}>>
:CL_KERNEL_PRIVATE_MEM_SIZE_anchor: [[CL_KERNEL_PRIVATE_MEM_SIZE]]{CL_KERNEL_PRIVATE_MEM_SIZE}

// CL_KERNEL_GLOBAL_WORK_SIZE
:CL_KERNEL_GLOBAL_WORK_SIZE_label: pass:q[`CL_&#8203;KERNEL_&#8203;GLOBAL_&#8203;WORK_&#8203;SIZE`]
:CL_KERNEL_GLOBAL_WORK_SIZE: <<CL_KERNEL_GLOBAL_WORK_SIZE,{CL_KERNEL_GLOBAL_WORK_SIZE_label}>>
:CL_KERNEL_GLOBAL_WORK_SIZE_anchor: [[CL_KERNEL_GLOBAL_WORK_SIZE]]{CL_KERNEL_GLOBAL_WORK_SIZE}

// CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE
:CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_label: pass:q[`CL_&#8203;KERNEL_&#8203;MAX_&#8203;SUB_&#8203;GROUP_&#8203;SIZE_&#8203;FOR_&#8203;NDRANGE`]
:CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE: <<CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE,{CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_label}>>
:CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_anchor: [[CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE]]{CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE}

// CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE
:CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_label: pass:q[`CL_&#8203;KERNEL_&#8203;SUB_&#8203;GROUP_&#8203;COUNT_&#8203;FOR_&#8203;NDRANGE`]
:CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE: <<CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE,{CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_label}>>
:CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_anchor: [[CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE]]{CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE}

// CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT
:CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT_label: pass:q[`CL_&#8203;KERNEL_&#8203;LOCAL_&#8203;SIZE_&#8203;FOR_&#8203;SUB_&#8203;GROUP_&#8203;COUNT`]
:CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT: <<CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT,{CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT_label}>>
:CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT_anchor: [[CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT]]{CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT}

// CL_KERNEL_EXEC_INFO_SVM_PTRS
:CL_KERNEL_EXEC_INFO_SVM_PTRS_label: pass:q[`CL_&#8203;KERNEL_&#8203;EXEC_&#8203;INFO_&#8203;SVM_&#8203;PTRS`]
:CL_KERNEL_EXEC_INFO_SVM_PTRS: <<CL_KERNEL_EXEC_INFO_SVM_PTRS,{CL_KERNEL_EXEC_INFO_SVM_PTRS_label}>>
:CL_KERNEL_EXEC_INFO_SVM_PTRS_anchor: [[CL_KERNEL_EXEC_INFO_SVM_PTRS]]{CL_KERNEL_EXEC_INFO_SVM_PTRS}

// CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM
:CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_label: pass:q[`CL_&#8203;KERNEL_&#8203;EXEC_&#8203;INFO_&#8203;SVM_&#8203;FINE_&#8203;GRAIN_&#8203;SYSTEM`]
:CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM: <<CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM,{CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_label}>>
:CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_anchor: [[CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM]]{CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM}

// CL_EVENT_COMMAND_QUEUE
:CL_EVENT_COMMAND_QUEUE_label: pass:q[`CL_&#8203;EVENT_&#8203;COMMAND_&#8203;QUEUE`]
:CL_EVENT_COMMAND_QUEUE: <<CL_EVENT_COMMAND_QUEUE,{CL_EVENT_COMMAND_QUEUE_label}>>
:CL_EVENT_COMMAND_QUEUE_anchor: [[CL_EVENT_COMMAND_QUEUE]]{CL_EVENT_COMMAND_QUEUE}

// CL_EVENT_COMMAND_TYPE
:CL_EVENT_COMMAND_TYPE_label: pass:q[`CL_&#8203;EVENT_&#8203;COMMAND_&#8203;TYPE`]
:CL_EVENT_COMMAND_TYPE: <<CL_EVENT_COMMAND_TYPE,{CL_EVENT_COMMAND_TYPE_label}>>
:CL_EVENT_COMMAND_TYPE_anchor: [[CL_EVENT_COMMAND_TYPE]]{CL_EVENT_COMMAND_TYPE}

// CL_EVENT_REFERENCE_COUNT
:CL_EVENT_REFERENCE_COUNT_label: pass:q[`CL_&#8203;EVENT_&#8203;REFERENCE_&#8203;COUNT`]
:CL_EVENT_REFERENCE_COUNT: <<CL_EVENT_REFERENCE_COUNT,{CL_EVENT_REFERENCE_COUNT_label}>>
:CL_EVENT_REFERENCE_COUNT_anchor: [[CL_EVENT_REFERENCE_COUNT]]{CL_EVENT_REFERENCE_COUNT}

// CL_EVENT_COMMAND_EXECUTION_STATUS
:CL_EVENT_COMMAND_EXECUTION_STATUS_label: pass:q[`CL_&#8203;EVENT_&#8203;COMMAND_&#8203;EXECUTION_&#8203;STATUS`]
:CL_EVENT_COMMAND_EXECUTION_STATUS: <<CL_EVENT_COMMAND_EXECUTION_STATUS,{CL_EVENT_COMMAND_EXECUTION_STATUS_label}>>
:CL_EVENT_COMMAND_EXECUTION_STATUS_anchor: [[CL_EVENT_COMMAND_EXECUTION_STATUS]]{CL_EVENT_COMMAND_EXECUTION_STATUS}

// CL_EVENT_CONTEXT
:CL_EVENT_CONTEXT_label: pass:q[`CL_&#8203;EVENT_&#8203;CONTEXT`]
:CL_EVENT_CONTEXT: <<CL_EVENT_CONTEXT,{CL_EVENT_CONTEXT_label}>>
:CL_EVENT_CONTEXT_anchor: [[CL_EVENT_CONTEXT]]{CL_EVENT_CONTEXT}

// CL_COMMAND_NDRANGE_KERNEL
:CL_COMMAND_NDRANGE_KERNEL_label: pass:q[`CL_&#8203;COMMAND_&#8203;NDRANGE_&#8203;KERNEL`]
:CL_COMMAND_NDRANGE_KERNEL: <<CL_COMMAND_NDRANGE_KERNEL,{CL_COMMAND_NDRANGE_KERNEL_label}>>
:CL_COMMAND_NDRANGE_KERNEL_anchor: [[CL_COMMAND_NDRANGE_KERNEL]]{CL_COMMAND_NDRANGE_KERNEL}

// CL_COMMAND_TASK
:CL_COMMAND_TASK_label: pass:q[`CL_&#8203;COMMAND_&#8203;TASK`]
:CL_COMMAND_TASK: <<CL_COMMAND_TASK,{CL_COMMAND_TASK_label}>>
:CL_COMMAND_TASK_anchor: [[CL_COMMAND_TASK]]{CL_COMMAND_TASK}

// CL_COMMAND_NATIVE_KERNEL
:CL_COMMAND_NATIVE_KERNEL_label: pass:q[`CL_&#8203;COMMAND_&#8203;NATIVE_&#8203;KERNEL`]
:CL_COMMAND_NATIVE_KERNEL: <<CL_COMMAND_NATIVE_KERNEL,{CL_COMMAND_NATIVE_KERNEL_label}>>
:CL_COMMAND_NATIVE_KERNEL_anchor: [[CL_COMMAND_NATIVE_KERNEL]]{CL_COMMAND_NATIVE_KERNEL}

// CL_COMMAND_READ_BUFFER
:CL_COMMAND_READ_BUFFER_label: pass:q[`CL_&#8203;COMMAND_&#8203;READ_&#8203;BUFFER`]
:CL_COMMAND_READ_BUFFER: <<CL_COMMAND_READ_BUFFER,{CL_COMMAND_READ_BUFFER_label}>>
:CL_COMMAND_READ_BUFFER_anchor: [[CL_COMMAND_READ_BUFFER]]{CL_COMMAND_READ_BUFFER}

// CL_COMMAND_WRITE_BUFFER
:CL_COMMAND_WRITE_BUFFER_label: pass:q[`CL_&#8203;COMMAND_&#8203;WRITE_&#8203;BUFFER`]
:CL_COMMAND_WRITE_BUFFER: <<CL_COMMAND_WRITE_BUFFER,{CL_COMMAND_WRITE_BUFFER_label}>>
:CL_COMMAND_WRITE_BUFFER_anchor: [[CL_COMMAND_WRITE_BUFFER]]{CL_COMMAND_WRITE_BUFFER}

// CL_COMMAND_COPY_BUFFER
:CL_COMMAND_COPY_BUFFER_label: pass:q[`CL_&#8203;COMMAND_&#8203;COPY_&#8203;BUFFER`]
:CL_COMMAND_COPY_BUFFER: <<CL_COMMAND_COPY_BUFFER,{CL_COMMAND_COPY_BUFFER_label}>>
:CL_COMMAND_COPY_BUFFER_anchor: [[CL_COMMAND_COPY_BUFFER]]{CL_COMMAND_COPY_BUFFER}

// CL_COMMAND_READ_IMAGE
:CL_COMMAND_READ_IMAGE_label: pass:q[`CL_&#8203;COMMAND_&#8203;READ_&#8203;IMAGE`]
:CL_COMMAND_READ_IMAGE: <<CL_COMMAND_READ_IMAGE,{CL_COMMAND_READ_IMAGE_label}>>
:CL_COMMAND_READ_IMAGE_anchor: [[CL_COMMAND_READ_IMAGE]]{CL_COMMAND_READ_IMAGE}

// CL_COMMAND_WRITE_IMAGE
:CL_COMMAND_WRITE_IMAGE_label: pass:q[`CL_&#8203;COMMAND_&#8203;WRITE_&#8203;IMAGE`]
:CL_COMMAND_WRITE_IMAGE: <<CL_COMMAND_WRITE_IMAGE,{CL_COMMAND_WRITE_IMAGE_label}>>
:CL_COMMAND_WRITE_IMAGE_anchor: [[CL_COMMAND_WRITE_IMAGE]]{CL_COMMAND_WRITE_IMAGE}

// CL_COMMAND_COPY_IMAGE
:CL_COMMAND_COPY_IMAGE_label: pass:q[`CL_&#8203;COMMAND_&#8203;COPY_&#8203;IMAGE`]
:CL_COMMAND_COPY_IMAGE: <<CL_COMMAND_COPY_IMAGE,{CL_COMMAND_COPY_IMAGE_label}>>
:CL_COMMAND_COPY_IMAGE_anchor: [[CL_COMMAND_COPY_IMAGE]]{CL_COMMAND_COPY_IMAGE}

// CL_COMMAND_COPY_IMAGE_TO_BUFFER
:CL_COMMAND_COPY_IMAGE_TO_BUFFER_label: pass:q[`CL_&#8203;COMMAND_&#8203;COPY_&#8203;IMAGE_&#8203;TO_&#8203;BUFFER`]
:CL_COMMAND_COPY_IMAGE_TO_BUFFER: <<CL_COMMAND_COPY_IMAGE_TO_BUFFER,{CL_COMMAND_COPY_IMAGE_TO_BUFFER_label}>>
:CL_COMMAND_COPY_IMAGE_TO_BUFFER_anchor: [[CL_COMMAND_COPY_IMAGE_TO_BUFFER]]{CL_COMMAND_COPY_IMAGE_TO_BUFFER}

// CL_COMMAND_COPY_BUFFER_TO_IMAGE
:CL_COMMAND_COPY_BUFFER_TO_IMAGE_label: pass:q[`CL_&#8203;COMMAND_&#8203;COPY_&#8203;BUFFER_&#8203;TO_&#8203;IMAGE`]
:CL_COMMAND_COPY_BUFFER_TO_IMAGE: <<CL_COMMAND_COPY_BUFFER_TO_IMAGE,{CL_COMMAND_COPY_BUFFER_TO_IMAGE_label}>>
:CL_COMMAND_COPY_BUFFER_TO_IMAGE_anchor: [[CL_COMMAND_COPY_BUFFER_TO_IMAGE]]{CL_COMMAND_COPY_BUFFER_TO_IMAGE}

// CL_COMMAND_MAP_BUFFER
:CL_COMMAND_MAP_BUFFER_label: pass:q[`CL_&#8203;COMMAND_&#8203;MAP_&#8203;BUFFER`]
:CL_COMMAND_MAP_BUFFER: <<CL_COMMAND_MAP_BUFFER,{CL_COMMAND_MAP_BUFFER_label}>>
:CL_COMMAND_MAP_BUFFER_anchor: [[CL_COMMAND_MAP_BUFFER]]{CL_COMMAND_MAP_BUFFER}

// CL_COMMAND_MAP_IMAGE
:CL_COMMAND_MAP_IMAGE_label: pass:q[`CL_&#8203;COMMAND_&#8203;MAP_&#8203;IMAGE`]
:CL_COMMAND_MAP_IMAGE: <<CL_COMMAND_MAP_IMAGE,{CL_COMMAND_MAP_IMAGE_label}>>
:CL_COMMAND_MAP_IMAGE_anchor: [[CL_COMMAND_MAP_IMAGE]]{CL_COMMAND_MAP_IMAGE}

// CL_COMMAND_UNMAP_MEM_OBJECT
:CL_COMMAND_UNMAP_MEM_OBJECT_label: pass:q[`CL_&#8203;COMMAND_&#8203;UNMAP_&#8203;MEM_&#8203;OBJECT`]
:CL_COMMAND_UNMAP_MEM_OBJECT: <<CL_COMMAND_UNMAP_MEM_OBJECT,{CL_COMMAND_UNMAP_MEM_OBJECT_label}>>
:CL_COMMAND_UNMAP_MEM_OBJECT_anchor: [[CL_COMMAND_UNMAP_MEM_OBJECT]]{CL_COMMAND_UNMAP_MEM_OBJECT}

// CL_COMMAND_MARKER
:CL_COMMAND_MARKER_label: pass:q[`CL_&#8203;COMMAND_&#8203;MARKER`]
:CL_COMMAND_MARKER: <<CL_COMMAND_MARKER,{CL_COMMAND_MARKER_label}>>
:CL_COMMAND_MARKER_anchor: [[CL_COMMAND_MARKER]]{CL_COMMAND_MARKER}

// CL_COMMAND_ACQUIRE_GL_OBJECTS
:CL_COMMAND_ACQUIRE_GL_OBJECTS_label: pass:q[`CL_&#8203;COMMAND_&#8203;ACQUIRE_&#8203;GL_&#8203;OBJECTS`]
:CL_COMMAND_ACQUIRE_GL_OBJECTS: <<CL_COMMAND_ACQUIRE_GL_OBJECTS,{CL_COMMAND_ACQUIRE_GL_OBJECTS_label}>>
:CL_COMMAND_ACQUIRE_GL_OBJECTS_anchor: [[CL_COMMAND_ACQUIRE_GL_OBJECTS]]{CL_COMMAND_ACQUIRE_GL_OBJECTS}

// CL_COMMAND_RELEASE_GL_OBJECTS
:CL_COMMAND_RELEASE_GL_OBJECTS_label: pass:q[`CL_&#8203;COMMAND_&#8203;RELEASE_&#8203;GL_&#8203;OBJECTS`]
:CL_COMMAND_RELEASE_GL_OBJECTS: <<CL_COMMAND_RELEASE_GL_OBJECTS,{CL_COMMAND_RELEASE_GL_OBJECTS_label}>>
:CL_COMMAND_RELEASE_GL_OBJECTS_anchor: [[CL_COMMAND_RELEASE_GL_OBJECTS]]{CL_COMMAND_RELEASE_GL_OBJECTS}

// CL_COMMAND_READ_BUFFER_RECT
:CL_COMMAND_READ_BUFFER_RECT_label: pass:q[`CL_&#8203;COMMAND_&#8203;READ_&#8203;BUFFER_&#8203;RECT`]
:CL_COMMAND_READ_BUFFER_RECT: <<CL_COMMAND_READ_BUFFER_RECT,{CL_COMMAND_READ_BUFFER_RECT_label}>>
:CL_COMMAND_READ_BUFFER_RECT_anchor: [[CL_COMMAND_READ_BUFFER_RECT]]{CL_COMMAND_READ_BUFFER_RECT}

// CL_COMMAND_WRITE_BUFFER_RECT
:CL_COMMAND_WRITE_BUFFER_RECT_label: pass:q[`CL_&#8203;COMMAND_&#8203;WRITE_&#8203;BUFFER_&#8203;RECT`]
:CL_COMMAND_WRITE_BUFFER_RECT: <<CL_COMMAND_WRITE_BUFFER_RECT,{CL_COMMAND_WRITE_BUFFER_RECT_label}>>
:CL_COMMAND_WRITE_BUFFER_RECT_anchor: [[CL_COMMAND_WRITE_BUFFER_RECT]]{CL_COMMAND_WRITE_BUFFER_RECT}

// CL_COMMAND_COPY_BUFFER_RECT
:CL_COMMAND_COPY_BUFFER_RECT_label: pass:q[`CL_&#8203;COMMAND_&#8203;COPY_&#8203;BUFFER_&#8203;RECT`]
:CL_COMMAND_COPY_BUFFER_RECT: <<CL_COMMAND_COPY_BUFFER_RECT,{CL_COMMAND_COPY_BUFFER_RECT_label}>>
:CL_COMMAND_COPY_BUFFER_RECT_anchor: [[CL_COMMAND_COPY_BUFFER_RECT]]{CL_COMMAND_COPY_BUFFER_RECT}

// CL_COMMAND_USER
:CL_COMMAND_USER_label: pass:q[`CL_&#8203;COMMAND_&#8203;USER`]
:CL_COMMAND_USER: <<CL_COMMAND_USER,{CL_COMMAND_USER_label}>>
:CL_COMMAND_USER_anchor: [[CL_COMMAND_USER]]{CL_COMMAND_USER}

// CL_COMMAND_BARRIER
:CL_COMMAND_BARRIER_label: pass:q[`CL_&#8203;COMMAND_&#8203;BARRIER`]
:CL_COMMAND_BARRIER: <<CL_COMMAND_BARRIER,{CL_COMMAND_BARRIER_label}>>
:CL_COMMAND_BARRIER_anchor: [[CL_COMMAND_BARRIER]]{CL_COMMAND_BARRIER}

// CL_COMMAND_MIGRATE_MEM_OBJECTS
:CL_COMMAND_MIGRATE_MEM_OBJECTS_label: pass:q[`CL_&#8203;COMMAND_&#8203;MIGRATE_&#8203;MEM_&#8203;OBJECTS`]
:CL_COMMAND_MIGRATE_MEM_OBJECTS: <<CL_COMMAND_MIGRATE_MEM_OBJECTS,{CL_COMMAND_MIGRATE_MEM_OBJECTS_label}>>
:CL_COMMAND_MIGRATE_MEM_OBJECTS_anchor: [[CL_COMMAND_MIGRATE_MEM_OBJECTS]]{CL_COMMAND_MIGRATE_MEM_OBJECTS}

// CL_COMMAND_FILL_BUFFER
:CL_COMMAND_FILL_BUFFER_label: pass:q[`CL_&#8203;COMMAND_&#8203;FILL_&#8203;BUFFER`]
:CL_COMMAND_FILL_BUFFER: <<CL_COMMAND_FILL_BUFFER,{CL_COMMAND_FILL_BUFFER_label}>>
:CL_COMMAND_FILL_BUFFER_anchor: [[CL_COMMAND_FILL_BUFFER]]{CL_COMMAND_FILL_BUFFER}

// CL_COMMAND_FILL_IMAGE
:CL_COMMAND_FILL_IMAGE_label: pass:q[`CL_&#8203;COMMAND_&#8203;FILL_&#8203;IMAGE`]
:CL_COMMAND_FILL_IMAGE: <<CL_COMMAND_FILL_IMAGE,{CL_COMMAND_FILL_IMAGE_label}>>
:CL_COMMAND_FILL_IMAGE_anchor: [[CL_COMMAND_FILL_IMAGE]]{CL_COMMAND_FILL_IMAGE}

// CL_COMMAND_SVM_FREE
:CL_COMMAND_SVM_FREE_label: pass:q[`CL_&#8203;COMMAND_&#8203;SVM_&#8203;FREE`]
:CL_COMMAND_SVM_FREE: <<CL_COMMAND_SVM_FREE,{CL_COMMAND_SVM_FREE_label}>>
:CL_COMMAND_SVM_FREE_anchor: [[CL_COMMAND_SVM_FREE]]{CL_COMMAND_SVM_FREE}

// CL_COMMAND_SVM_MEMCPY
:CL_COMMAND_SVM_MEMCPY_label: pass:q[`CL_&#8203;COMMAND_&#8203;SVM_&#8203;MEMCPY`]
:CL_COMMAND_SVM_MEMCPY: <<CL_COMMAND_SVM_MEMCPY,{CL_COMMAND_SVM_MEMCPY_label}>>
:CL_COMMAND_SVM_MEMCPY_anchor: [[CL_COMMAND_SVM_MEMCPY]]{CL_COMMAND_SVM_MEMCPY}

// CL_COMMAND_SVM_MEMFILL
:CL_COMMAND_SVM_MEMFILL_label: pass:q[`CL_&#8203;COMMAND_&#8203;SVM_&#8203;MEMFILL`]
:CL_COMMAND_SVM_MEMFILL: <<CL_COMMAND_SVM_MEMFILL,{CL_COMMAND_SVM_MEMFILL_label}>>
:CL_COMMAND_SVM_MEMFILL_anchor: [[CL_COMMAND_SVM_MEMFILL]]{CL_COMMAND_SVM_MEMFILL}

// CL_COMMAND_SVM_MAP
:CL_COMMAND_SVM_MAP_label: pass:q[`CL_&#8203;COMMAND_&#8203;SVM_&#8203;MAP`]
:CL_COMMAND_SVM_MAP: <<CL_COMMAND_SVM_MAP,{CL_COMMAND_SVM_MAP_label}>>
:CL_COMMAND_SVM_MAP_anchor: [[CL_COMMAND_SVM_MAP]]{CL_COMMAND_SVM_MAP}

// CL_COMMAND_SVM_UNMAP
:CL_COMMAND_SVM_UNMAP_label: pass:q[`CL_&#8203;COMMAND_&#8203;SVM_&#8203;UNMAP`]
:CL_COMMAND_SVM_UNMAP: <<CL_COMMAND_SVM_UNMAP,{CL_COMMAND_SVM_UNMAP_label}>>
:CL_COMMAND_SVM_UNMAP_anchor: [[CL_COMMAND_SVM_UNMAP]]{CL_COMMAND_SVM_UNMAP}

// CL_COMPLETE
:CL_COMPLETE_label: pass:q[`CL_&#8203;COMPLETE`]
:CL_COMPLETE: <<CL_COMPLETE,{CL_COMPLETE_label}>>
:CL_COMPLETE_anchor: [[CL_COMPLETE]]{CL_COMPLETE}

// CL_RUNNING
:CL_RUNNING_label: pass:q[`CL_&#8203;RUNNING`]
:CL_RUNNING: <<CL_RUNNING,{CL_RUNNING_label}>>
:CL_RUNNING_anchor: [[CL_RUNNING]]{CL_RUNNING}

// CL_SUBMITTED
:CL_SUBMITTED_label: pass:q[`CL_&#8203;SUBMITTED`]
:CL_SUBMITTED: <<CL_SUBMITTED,{CL_SUBMITTED_label}>>
:CL_SUBMITTED_anchor: [[CL_SUBMITTED]]{CL_SUBMITTED}

// CL_QUEUED
:CL_QUEUED_label: pass:q[`CL_&#8203;QUEUED`]
:CL_QUEUED: <<CL_QUEUED,{CL_QUEUED_label}>>
:CL_QUEUED_anchor: [[CL_QUEUED]]{CL_QUEUED}

// CL_BUFFER_CREATE_TYPE_REGION
:CL_BUFFER_CREATE_TYPE_REGION_label: pass:q[`CL_&#8203;BUFFER_&#8203;CREATE_&#8203;TYPE_&#8203;REGION`]
:CL_BUFFER_CREATE_TYPE_REGION: <<CL_BUFFER_CREATE_TYPE_REGION,{CL_BUFFER_CREATE_TYPE_REGION_label}>>
:CL_BUFFER_CREATE_TYPE_REGION_anchor: [[CL_BUFFER_CREATE_TYPE_REGION]]{CL_BUFFER_CREATE_TYPE_REGION}

// CL_PROFILING_COMMAND_QUEUED
:CL_PROFILING_COMMAND_QUEUED_label: pass:q[`CL_&#8203;PROFILING_&#8203;COMMAND_&#8203;QUEUED`]
:CL_PROFILING_COMMAND_QUEUED: <<CL_PROFILING_COMMAND_QUEUED,{CL_PROFILING_COMMAND_QUEUED_label}>>
:CL_PROFILING_COMMAND_QUEUED_anchor: [[CL_PROFILING_COMMAND_QUEUED]]{CL_PROFILING_COMMAND_QUEUED}

// CL_PROFILING_COMMAND_SUBMIT
:CL_PROFILING_COMMAND_SUBMIT_label: pass:q[`CL_&#8203;PROFILING_&#8203;COMMAND_&#8203;SUBMIT`]
:CL_PROFILING_COMMAND_SUBMIT: <<CL_PROFILING_COMMAND_SUBMIT,{CL_PROFILING_COMMAND_SUBMIT_label}>>
:CL_PROFILING_COMMAND_SUBMIT_anchor: [[CL_PROFILING_COMMAND_SUBMIT]]{CL_PROFILING_COMMAND_SUBMIT}

// CL_PROFILING_COMMAND_START
:CL_PROFILING_COMMAND_START_label: pass:q[`CL_&#8203;PROFILING_&#8203;COMMAND_&#8203;START`]
:CL_PROFILING_COMMAND_START: <<CL_PROFILING_COMMAND_START,{CL_PROFILING_COMMAND_START_label}>>
:CL_PROFILING_COMMAND_START_anchor: [[CL_PROFILING_COMMAND_START]]{CL_PROFILING_COMMAND_START}

// CL_PROFILING_COMMAND_END
:CL_PROFILING_COMMAND_END_label: pass:q[`CL_&#8203;PROFILING_&#8203;COMMAND_&#8203;END`]
:CL_PROFILING_COMMAND_END: <<CL_PROFILING_COMMAND_END,{CL_PROFILING_COMMAND_END_label}>>
:CL_PROFILING_COMMAND_END_anchor: [[CL_PROFILING_COMMAND_END]]{CL_PROFILING_COMMAND_END}

// CL_PROFILING_COMMAND_COMPLETE
:CL_PROFILING_COMMAND_COMPLETE_label: pass:q[`CL_&#8203;PROFILING_&#8203;COMMAND_&#8203;COMPLETE`]
:CL_PROFILING_COMMAND_COMPLETE: <<CL_PROFILING_COMMAND_COMPLETE,{CL_PROFILING_COMMAND_COMPLETE_label}>>
:CL_PROFILING_COMMAND_COMPLETE_anchor: [[CL_PROFILING_COMMAND_COMPLETE]]{CL_PROFILING_COMMAND_COMPLETE}


