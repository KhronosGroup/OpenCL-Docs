TODO Is this an actual CL extension? Does not follow naming conventions.
TODO What part of the spec does it go into - an appendix?

[[cl_loader_layers-opencl]]
== Installable OpenCL Loader Layers

*Name String*::
`cl_loader_layers`
*Revision*::
1.0.0
*Ratification Status*::
Ratified
*Extension and Version Dependencies*::
TBD
*Contact*::
  * TBD

=== Other Extension Metadata

*Last Modified Date*::
    2020-11-04
*IP Status*::
    No known IP claims.
*Contributors*::
  - Brice Videau, Argonne National Laboratory

=== Description

`cl_loader_layers` is a loader extension which defines a simple mechanism
through which the Khronos OpenCL installable client driver loader (ICD
Loader) may expose load multiple separate installable interception layers
(Layer ICDs) for OpenCL.

=== Source Code

The official source for the ICD loader is available on github, at:

https://github.com/KhronosGroup/OpenCL-ICD-Loader

The official API headers are available on github, at:

https://github.com/KhronosGroup/OpenCL-Headers

The header file `CL/cl_icd.h` defines the OpenCL dispatch table.

The header file `CL/cl_layer.h` defines the necessary types and API entry
points.

=== New Commands

A layer needs to implement and expose those two new entry points in a shared
library.
If one or both of those are missing, the loader will discard the layer.

  * {clGetLayerInfo}
  * {clInitLayer}

TODO These struct types are not defined

=== New Types

  * {cl_layer_info_TYPE}
  * {cl_layer_api_version_TYPE}

=== New Enums

Accepted as _param_name_ to the function {clGetLayerInfo}:

  * {cl_layer_info_TYPE}
  ** {CL_LAYER_API_VERSION}
  ** {CL_LAYER_NAME}

=== New Enums

  * {CL_LAYER_API_VERSION_100}

=== New Environment Variables

A colon separated list of layer libraries that the Loader must try to load.
The layers are loaded in the specified order.
The most recently loaded layer will be first in the dispatch chain.

  * `OPENCL_LAYERS`

=== Version History

  * Revision 1.0.0, 2020-11-04
  ** First assigned version.


=== OpenCL Layer Documentation

==== Querying Layer Info

[open,refpage='clGetLayerInfo',desc='Query information about an OpenCL layer',type='protos']
--
To query information concerning a layer, call the function

include::{generated}/api/protos/clGetLayerInfo.txt[]

  * _param_name_ is an enumeration constant that identifies the platform
    information being queried.
    It can be one of the following values as specified in the
    <<layer-queries-table, Layer Queries>> table.
  * _param_value_size_ specifies the size in bytes of memory pointed to by
    _param_value_.
    This size in bytes must be {geq} the size of return type specified in
    the <<layer-queries-table, Layer Queries>> table.
  * _param_value_ is a pointer to memory location where appropriate values
    for a given _param_name_, as specified in the <<layer-queries-table,
    Layer Queries>> table, will be returned.
    If _param_value_ is `NULL`, it is ignored.
  * _param_value_size_ret_ returns the actual size in bytes of data being
    queried by _param_name_.
    If _param_value_size_ret_ is `NULL`, it is ignored.

The information that can be queried using {clGetLayerInfo} is specified in
the <<layer-queries-table, Layer Queries>> table.

[[layer-queries-table]]
.List of supported param_names by <<clGetLayerInfo>>
[width="100%",cols="<34%,<33%,<33%",options="header"]
|====
| *Layer *Info*          | *Return Type*               | *Description*
| {CL_LAYER_API_VERSION} | {cl_layer_api_version_TYPE} | OpenCL Layer API Version
| {CL_LAYER_NAME}        | {char_TYPE}[]               | OpenCL Layer Name
|====

// refError

{clGetLayerInfo} returns {CL_SUCCESS} if the function is executed
successfully.
Otherwise, it returns one of the following errors.

  * {CL_INVALID_VALUE} if _param_name_ is not one of the supported values or
    if size in bytes specified by _param_value_size_ is < size of return
    type as specified in the <<layer-queries-table, Layer Queries>> table,
    and _param_value_ is not a `NULL` value.
--


==== Layer Initialization

[open,refpage='clInitLayer',desc='Initialize an OpenCL layer',type='protos']
--
To initialize a layer, call the function

include::{generated}/api/protos/clInitLayer.txt[]

  * _num_entries_ is the number of entry provided by the Loader to the
    layer.
  * _target_dispatch_ is the dispatch table, provided by the loader, that
    the layer must redirect it's call to.
  * _num_entries_ret_ returns the number of entries in the dispatch table
    the layer will be returning.
  * _layer_dispatch_ret_ return the address of the layer dispatch table.
    The table can contain `NULL` value entries, and the loader is
    responsible for providing the missing entries using the entries from the
    target dispatch.

// refError

{clInitLayer} returns {CL_SUCCESS} if the function is executed successfully.
Otherwise, it returns one of the following errors.

  * {CL_INVALID_VALUE} if _num_entries_ is insufficient for the layer or if
    _target_dispatch_ is a `NULL` value, or _num_entries_ret_ is a `NULL`
    value, or _layer_dispatch_ret_ is a `NULL` value.
--
