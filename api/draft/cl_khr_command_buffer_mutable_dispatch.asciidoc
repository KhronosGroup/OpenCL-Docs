ifdef::cl_khr_command_buffer_mutable_dispatch[]
endif::cl_khr_command_buffer_mutable_dispatch[]

=== Modifications to Section 4.2 of the OpenCL API Specification

Add to *Table 5*, _Device Queries_, of section 4.2:

[[command-dispatch-queries]]
[caption="Table 5. "]
.List of supported param_names by {clGetDeviceInfo}
[cols="1,1,4",options="header"]
|====
| *Device Info* | *Return Type* | *Description*
| {CL_DEVICE_MUTABLE_DISPATCH_CAPABILITIES_KHR}
  | {cl_mutable_dispatch_fields_khr_TYPE}
    | Describes device mutable-dispatch capabilities, encoded as bits in a
      bitfield.
      Supported capabilities are:

      {CL_MUTABLE_DISPATCH_GLOBAL_OFFSET_KHR} Device supports the ability to
      modify the _global_work_offset_ of kernel execution after command
      recording.

      {CL_MUTABLE_DISPATCH_GLOBAL_SIZE_KHR} Device supports the ability to
      modify the _global_work_size_ of kernel execution after command
      recording.

      {CL_MUTABLE_DISPATCH_LOCAL_SIZE_KHR} Device supports the ability to
      modify the _local_work_size_ of kernel execution after command
      recording.

      {CL_MUTABLE_DISPATCH_ARGUMENTS_KHR} Device supports the ability to
      modify arguments set on a kernel after command recording.

      {CL_MUTABLE_DISPATCH_EXEC_INFO_KHR} Device supports the ability to
      modify execution information set on a kernel after command recording.
|====


=== Modifications to Section 5.X - Command Buffers of the OpenCL API Specification


==== Modifications to clCreateCommandBufferKHR

Modify the {CL_COMMAND_BUFFER_FLAGS_KHR} property in the
<<commandbuffer-properties, clCreateCommandBufferKHR properties>> table to
introduce a new flag to the bitfield.
The following text is now included in the description of property values.

[cols=",,",options="header",]
|====
| *Recording Properties* | *Property Value* | *Description*
| {CL_COMMAND_BUFFER_FLAGS_KHR}
  | {cl_command_buffer_flags_khr_TYPE}
    | {CL_COMMAND_BUFFER_MUTABLE_KHR} - Enables modification of the
      command-buffer, by default command-buffers are immutable.
      If set, commands in the command-buffer may be updated via
      {clUpdateMutableCommandsKHR}.
|====


==== Modifications to clCommandNDRangeKernelKHR

===== Properties Parameter

Description of the _properties_ parameter is changed to:

_properties_ specifies a list of properties for the kernel command and their
corresponding values.
Each property name is immediately followed by the corresponding desired
value.
The list is terminated with 0.
If a supported property and its value is not specified in _properties_, its
default value will be used.
_properties_ may be `NULL`, in which case the default values for supported
properties will be used.
The list of supported properties is described in the table below.

.{clCommandNDRangeKernelKHR} properties
[cols=",,",options="header",]
|====
| *Recording Properties* | *Property Value* | *Description*
| {CL_MUTABLE_DISPATCH_UPDATABLE_FIELDS_KHR}
  | {cl_mutable_dispatch_fields_khr_TYPE}
    | This is a bitfield and can be set to a combination of the following
      values:

      {CL_MUTABLE_DISPATCH_GLOBAL_OFFSET_KHR} determines whether the
      _global_work_offset_ of kernel execution can be modified after
      recording.
      If set, the _global_work_offset_ of the kernel execution can be
      changed with {clUpdateMutableCommandsKHR} using the
      {cl_mutable_dispatch_config_khr_TYPE} field of the _mutable_config_
      parameter.
      Otherwise, the _global_work_offset_ cannot be modified.

      {CL_MUTABLE_DISPATCH_GLOBAL_SIZE_KHR} determines whether the
      _global_work_size_ of kernel execution can be modified after
      recording.
      If set, the _global_work_size_ of the kernel execution can be changed
      with {clUpdateMutableCommandsKHR} using the
      {cl_mutable_dispatch_config_khr_TYPE} field of the _mutable_config_
      parameter.
      Otherwise, the _global_work_size_ cannot be modified.

      {CL_MUTABLE_DISPATCH_LOCAL_SIZE_KHR} determines whether the
      _local_work_size_ of kernel execution can be modified after recording.
      If set, the _local_work_size_ of the kernel execution can be changed
      with {clUpdateMutableCommandsKHR} using the
      {cl_mutable_dispatch_config_khr_TYPE} field of the _mutable_config_
      parameter.
      Otherwise, the _local_work_size_ cannot be modified.

      {CL_MUTABLE_DISPATCH_ARGUMENTS_KHR} determines whether the kernel
      arguments set on _kernel_ can be updated between executions.
      If set, the kernel arguments normally set with {clSetKernelArg} and
      {clSetKernelArgSVMPointer} can be changed with
      {clUpdateMutableCommandsKHR} using the
      {cl_mutable_dispatch_config_khr_TYPE} field of the _mutable_config_
      parameter.
      Otherwise, the kernel arguments cannot be modified between executions.

      {CL_MUTABLE_DISPATCH_EXEC_INFO_KHR} determines whether the information
      passed to _kernel_ can be updated between executions.
      If set, the execution information of the kernel can be changed with
      {clUpdateMutableCommandsKHR} using the
      {cl_mutable_dispatch_config_khr_TYPE} field of the _mutable_config_
      parameter.
      Otherwise, the kernel execution information cannot be modified.

      If {CL_MUTABLE_DISPATCH_UPDATABLE_FIELDS_KHR} is not specified then it
      defaults to the value returned by the
      {CL_DEVICE_MUTABLE_DISPATCH_CAPABILITIES_KHR} device query.
|====


===== Mutable Handle Parameter

Description of the _mutable_handle_ parameter is changed to:

  * _mutable_handle_ returns a handle to the command that can be used in the
    {cl_mutable_dispatch_config_khr_TYPE} struct to update the command
    configuration between recordings, may be `NULL`.
    The lifetime of this handle is tied to the parent command-buffer, such
    that freeing the command-buffer will also free this handle.


===== Additional Errors

The error condition:

  * {CL_INVALID_OPERATION} if _mutable_handle_ is not `NULL`.

Is replaced with

  * {CL_INVALID_OPERATION} if the requested
    {CL_MUTABLE_DISPATCH_UPDATABLE_FIELDS_KHR} properties are not reported
    by {CL_DEVICE_MUTABLE_DISPATCH_CAPABILITIES_KHR} for the device
    associated with _command_queue_.
    If _command_queue_ is `NULL`, the device associated with
    _command_buffer_ must report support for these properties.


[[mutable-commands]]
==== New Section in the OpenCL API Specification 5.X.5 - Mutable Commands:

A generic {cl_mutable_command_khr_TYPE} handle is called a _mutable-command_
object as it can be returned from any command recording entry-point in the
`<<cl_khr_command_buffer>>` family of extensions.
The mutable-command handles returned by {clCommandNDRangeKernelKHR} in
particular are referred to as _mutable-dispatch_ objects, and can be
modified through the fields of {cl_mutable_dispatch_config_khr_TYPE}.

Mutable-command handles are updated between enqueues using entry-point
{clUpdateMutableCommandsKHR}.
To enable performant usage, all aspects of mutation are encapsulated inside
a single {cl_mutable_base_config_khr_TYPE} parameter.
This means that the runtime has access to all the information about how the
command-buffer will change, allowing the command-buffer to be rebuilt as
efficiently as possible.
Any modifications to the arguments or execution info of a mutable-dispatch
handle using {cl_mutable_dispatch_arg_khr_TYPE} or
{cl_mutable_dispatch_exec_info_khr_TYPE} have no affect on the original
kernel object used when the command was recorded, and only influence the
{clCommandNDRangeKernelKHR} command associated with the mutable-dispatch.

[[mutable-dispatch-kernel-argument-safe-usage]]
[NOTE]
====
The base `<<cl_khr_command_buffer>>` extension
<<command-buffer-kernel-argument-ref-counting, notes>> that a command-buffer
does not update the reference count of objects set as arguments on kernels
recorded into the command-buffer.

The implications for applications using {clUpdateMutableCommandsKHR} is that
it is safe to delete objects used as kernel command arguments, if all the
kernel commands using that object as an argument have had their arguments
replaced with a different object.
====

To facilitate performant usage for pipelined work flows, where applications
repeatedly call command-buffer update then enqueue, implementations may
defer some of the work to allow {clUpdateMutableCommandsKHR} to return
immediately.
Deferring any recompilation until {clEnqueueCommandBufferKHR} avoids
blocking in host code and keeps device occupancy high.
This is only possible with a command-buffer created with the
{CL_COMMAND_BUFFER_SIMULTANEOUS_USE_KHR} flag, as without this the enqueued
command-buffer must complete before any modification occurs.

[open,refpage='clUpdateMutableCommandsKHR',desc='Modify configuration of mutable-command handles to update behavior for future enqueues',type='protos']
--
To modify the configuration of mutable-command handles returned during
_command_buffer_ recording, updating the behavior of those commands in
future enqueues of _command_buffer_, call the function

include::{generated}/api/protos/clUpdateMutableCommandsKHR.txt[]

  * _command_buffer_ refers to a valid command-buffer object.
  * _mutable_config_ is a pointer to a {cl_mutable_base_config_khr_TYPE}
    structure defining updates to make to mutable-commands.

// refError

{clUpdateMutableCommandsKHR} returns {CL_SUCCESS} if all the mutable-command
objects were updated successfully.
Otherwise, none of the updates to mutable-command objects are preserved and
one of the errors below is returned:

  * {CL_INVALID_COMMAND_BUFFER_KHR} if _command_buffer_ is not a valid
    command-buffer.
  * {CL_INVALID_OPERATION} if _command_buffer_ has not been finalized.
  * {CL_INVALID_OPERATION} if _command_buffer_ was not created with the
    {CL_COMMAND_BUFFER_MUTABLE_KHR} flag.
  * {CL_INVALID_VALUE} if the _type_ member of _mutable_config_ is not
    {CL_STRUCTURE_TYPE_MUTABLE_BASE_CONFIG_KHR}.
  * {CL_INVALID_VALUE} if the _mutable_dispatch_list_ member of
    _mutable_config_ is `NULL` and _num_mutable_dispatch_ > 0, or
    _mutable_dispatch_list_ is not `NULL` and _num_mutable_dispatch_ is 0.
  * {CL_INVALID_VALUE} if the _next_ member of _mutable_config_ is not
    `NULL` and any iteration of the structure pointer chain does not contain
    valid _type_ and _next_ members.
  * {CL_INVALID_VALUE} if _mutable_config_ is `NULL`, or if both _next_ and
    _mutable_dispatch_list_ members of _mutable_config_ are `NULL`.
  * {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources
    required by the OpenCL implementation on the device.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.

Using this function when _command_buffer_ is in the <<pending, pending>>
state and not created with the {CL_COMMAND_BUFFER_SIMULTANEOUS_USE_KHR} flag
causes undefined behavior.

[NOTE]
====
Performant usage is to call {clUpdateMutableCommandsKHR} only when the
desired state of all commands is known, rather than iteratively updating
each command individually.
====

If the _mutable_dispatch_list_ member of _mutable_config_ is non-`NULL`,
then errors defined by {clEnqueueNDRangeKernel}, {clSetKernelExecInfo},
{clSetKernelArg}, and {clSetKernelArgSVMPointer} are returned by
{clUpdateMutableCommandsKHR} if any of the array elements are set to an
invalid value.
Additionally, the following errors are returned if any
{cl_mutable_dispatch_config_khr_TYPE} element of the array violates the
defined conditions:

  * {CL_INVALID_MUTABLE_COMMAND_KHR} if _command_ is not a valid mutable
    command object, or created from _command_buffer_.
  * {CL_INVALID_VALUE} if _type_ is not
    {CL_STRUCTURE_TYPE_MUTABLE_DISPATCH_CONFIG_KHR}.
  * {CL_INVALID_OPERATION} if values of _local_work_size_ and/or
    _global_work_size_ result in an increase to the number of work-groups in
    the ND-range.
  * {CL_INVALID_OPERATION} if the values of _local_work_size_ and/or
    _global_work_size_ result in a change to work-group uniformity.
  * {CL_INVALID_OPERATION} if the _work_dim_ is different from the
    _work_dim_ set on _command_ recording.
  * {CL_INVALID_OPERATION} if the {CL_MUTABLE_DISPATCH_GLOBAL_OFFSET_KHR}
    property was not set on _command_ recording and _global_work_offset_ is
    not `NULL`.
  * {CL_INVALID_OPERATION} if the {CL_MUTABLE_DISPATCH_GLOBAL_SIZE_KHR}
    property was not set on _command_ recording and _global_work_size_ is
    not `NULL`.
  * {CL_INVALID_OPERATION} if the {CL_MUTABLE_DISPATCH_LOCAL_SIZE_KHR}
    property was not set on _command_ recording and _local_work_size_ is not
    `NULL`.
  * {CL_INVALID_OPERATION} if the {CL_MUTABLE_DISPATCH_ARGUMENTS_KHR}
    property was not set on _command_ recording and _num_args_ or
    _num_svm_args_ is non-zero.
  * {CL_INVALID_OPERATION} if the {CL_MUTABLE_DISPATCH_EXEC_INFO_KHR}
    property was not set on _command_ recording and _num_exec_infos_ is
    non-zero.
  * {CL_INVALID_VALUE} if _arg_list_ is `NULL` and _num_args_ > 0, or
    _arg_list_ is not `NULL` and _num_args_ is 0.
  * {CL_INVALID_VALUE} if _arg_svm_list_ is `NULL` and _num_svm_args_ > 0,
    or _arg_svm_list_ is not `NULL` and _num_svm_args_ is 0.
  * {CL_INVALID_VALUE} if _exec_info_list_ is `NULL` and _num_exec_infos_ >
    0, or _exec_info_list_ is not `NULL` and _num_exec_infos_ is 0.
--

TODO Integrate this language from the "New Types" section

Types for using mutable-commands objects from <<mutable-commands, Section
5.X.5>>:

// Bitfield covering each aspect of a mutable-dispatch which can be updated
typedef cl_bitfield cl_mutable_dispatch_fields_khr;

// For querying mutable-command objects with clGetMutableCommandInfoKHR
typedef cl_uint cl_mutable_command_info_khr;

// Identifies the type of a structure to allow structure pointer chains
typedef cl_uint cl_command_buffer_structure_type_khr;

[open,refpage='cl_mutable_dispatch_arg_khr',desc='Set kernel arguments normally passed using clSetKernelArg and clSetKernelArg',type='structs']
--
The {cl_mutable_dispatch_arg_khr_TYPE} structure sets kernel arguments
normally passed using {clSetKernelArg} and {clSetKernelArgSVMPointer}, and
is defined as:

include::{generated}/api/structs/cl_mutable_dispatch_arg_khr.txt[]
--

[open,refpage='cl_mutable_dispatch_exec_info_khr',desc='Specify kernel execution info',type='protos']
--
The {cl_mutable_dispatch_exec_info_khr_TYPE} structure sets kernel execution
info normally passed using {clSetKernelExecInfo}, and is defined as:

include::{generated}/api/structs/cl_mutable_dispatch_exec_info_khr.txt[]

[NOTE]
====
_param_name_ is of type {cl_uint_TYPE} rather than
{cl_kernel_exec_info_TYPE} so that the extension can be implemented on
OpenCL 1.2 where the {cl_kernel_exec_info_TYPE} typedef is unavailable.
====
--

[open,refpage='cl_mutable_dispatch_config_khr',desc='Set kernel configuration of a mutable clCommandNDRangeKernelKHR command',type='structs']
--
The {cl_mutable_dispatch_arg_khr_TYPE} structure is passed to
{clUpdateMutableCommandsKHR} to set the kernel configuration of a mutable
{clCommandNDRangeKernelKHR} command, and is defined as:

include::{generated}/api/structs/cl_mutable_dispatch_config_khr.txt[]

  * _type_ is the type of this structure, and must be
    {CL_STRUCTURE_TYPE_MUTABLE_DISPATCH_CONFIG_KHR}.
  * _next_ is `NULL` or a pointer to an extending structure.
  * _command_ is a mutable-command object returned by
    {clCommandNDRangeKernelKHR} representing a kernel execution as part of a
    command-buffer.
  * _num_args_ is the number of kernel arguments being changed.
  * _num_svm_args_ is the number of SVM kernel arguments being changed.
  * _num_exec_infos_ is the number of kernel execution info objects to set
    for this dispatch.
  * _work_dim_ is the number of dimensions used to specify the global
    work-items and work-items in the work-group.
    See {clEnqueueNDRangeKernel} for valid usage.
  * _arg_list_ is an array describing the new kernel arguments for this
    enqueue.
    It must contain _num_args_ array elements, each of which encapsulates
    parameters passed to {clSetKernelArg}.
    See {clSetKernelArg} for usage of {cl_mutable_dispatch_arg_khr_TYPE}
    members.
  * _arg_svm_list_ is an array describing the new SVM kernel arguments for
    this enqueue.
    It must contain _num_svm_args_ array elements, each of which
    encapsulates parameters passed to {clSetKernelArgSVMPointer}.
    See {clSetKernelArgSVMPointer} for usage of
    {cl_mutable_dispatch_arg_khr_TYPE} members, `arg_size` is ignored.
  * _exec_info_list_ is an array containing _num_exec_infos_ elements
    specifying the list of execution info objects use for this
    command-buffer enqueue.
    See {clSetKernelExecInfo} for usage of
    {cl_mutable_dispatch_exec_info_khr_TYPE} members.
  * _global_work_offset_ can be used to specify an array of _work_dim_
    unsigned values that describe the offset used to calculate the global ID
    of a work-item.
    If _global_work_offset_ is `NULL` then the global offset of the dispatch
    is not changed.
    See {clEnqueueNDRangeKernel} for valid usage.
  * _global_work_size_ points to an array of _work_dim_ unsigned values that
    describe the number of global work-items in _work_dim_ dimensions that
    will execute the kernel function.
    If _global_work_size_ is `NULL` then the number of global work-items in
    the dispatch is not changed.
    See {clEnqueueNDRangeKernel} for valid usage.
  * _local_work_size_ points to an array of _work_dim_ unsigned values that
    describe the number of work-items that make up a work-group that will
    execute the kernel.
    If _local_work_size_ is `NULL` then the number of local work-items in
    the dispatch is not changed.
    See {clEnqueueNDRangeKernel} for valid usage.
--

[open,refpage='cl_mutable_base_config_khr',desc='DESC',type='structs']
--
The {cl_mutable_base_config_khr_TYPE} structure is TODO Add fuller
description here and is defined as:

include::{generated}/api/structs/cl_mutable_base_config_khr.txt[]

  * _type_ is the type of this structure, and must be
    {CL_STRUCTURE_TYPE_MUTABLE_BASE_CONFIG_KHR}
  * _next_ is `NULL` or a pointer to an extending structure.
  * _num_mutable_dispatch_ is the number of mutable-dispatch objects to
    configure in this enqueue of the command-buffer.
  * _mutable_dispatch_list_ is an array containing _num_mutable_dispatch_
    elements describing the configurations of mutable kernel execution
    commands in the command-buffer.
    For a description of struct members making up each array element see
    {cl_mutable_dispatch_config_khr_TYPE}.
--

[open,refpage='clGetMutableCommandInfoKHR',desc='Query information about a mutable command object',type='protos']
--
To query information about a mutable command object, call the function

include::{generated}/api/protos/clGetMutableCommandInfoKHR.txt[]

  * _command_ specifies the mutable-command object being queried.
  * _param_name_ specifies the information to query.
    The list of supported _param_name_ types and the information returned in
    _param_value_ by {clGetMutableCommandInfoKHR} is described in the
    <<mutable-command-object-queries, Mutable Command Object Queries>>
    table.
  * _param_value_size_ is used to specify the size in bytes of memory
    pointed to by _param_value_.
    This size must be {geq} size of return type as described in the
    <<mutable-command-object-queries, Mutable Command Object Queries>>
    table.
  * _param_value_ is a pointer to memory where the appropriate result being
    queried is returned.
    If _param_value_ is `NULL`, it is ignored.
  * _param_value_size_ret_ returns the actual size in bytes of data being
    queried by _param_name_.
    If _param_value_size_ret_ is `NULL`, it is ignored.

[[mutable-command-object-queries]]
._Mutable Command Object Queries_
[width="100%",cols="<33%,<17%,<50%",options="header"]
|====
| *Mutable Command Info* | *Return Type* | *Description*
| {CL_MUTABLE_COMMAND_COMMAND_QUEUE_KHR}
  | {cl_command_queue_TYPE}
    | Return the command-queue associated with _command_.
      If `NULL` was passed as the queue when _command_ was recorded, then
      the queue associated with the command-buffer that _command_ belongs to
      is returned.
| {CL_MUTABLE_COMMAND_COMMAND_BUFFER_KHR}
  | {cl_command_buffer_khr_TYPE}
    | Return the command-buffer associated with _command_.
| {CL_MUTABLE_COMMAND_COMMAND_TYPE_KHR}
  | {cl_command_type_TYPE}
    | Return the command-type associated with _command_.

      The list of supported event command types defined by {clGetEventInfo}
      is used with the matching command.
| {CL_MUTABLE_DISPATCH_PROPERTIES_ARRAY_KHR}
  | {cl_ndrange_kernel_command_properties_khr_TYPE}[]
    | Return the properties argument specified on _command_ recording with
      {clCommandNDRangeKernelKHR}.

      If the properties argument specified on creation of _command_ was not
      `NULL`, the implementation must return the values specified in the
      properties argument in the same order and without including additional
      properties.

      If the properties argument specified on creation of _command_ was
      `NULL`, or _command_ was not recorded from a
      {clCommandNDRangeKernelKHR} command, the implementation must return
      _param_value_size_ret_ equal to 0, indicating that there are no
      properties to be returned.
| {CL_MUTABLE_DISPATCH_KERNEL_KHR}
  | {cl_kernel_TYPE}
    | Return the kernel associated with _command_ when recorded with
      {clCommandNDRangeKernelKHR}.

      If _command_ was not recorded from a {clCommandNDRangeKernelKHR}
      command, the implementation must return _param_value_size_ret_ equal
      to 0, indicating that the value returned in _param_value_ is not
      valid.
| {CL_MUTABLE_DISPATCH_DIMENSIONS_KHR}
  | {cl_uint_TYPE}
    | Return the number of work-item dimensions specified when _command_ was
      created.

      If _command_ was not recorded from a {clCommandNDRangeKernelKHR}
      command, the implementation must return _param_value_size_ret_ equal
      to 0, indicating that the value returned in _param_value_ is not
      valid.
| {CL_MUTABLE_DISPATCH_GLOBAL_WORK_OFFSET_KHR}
  | {size_t_TYPE}[]
    | Return the global work-item offset set on _command_ creation, or from
      the most recent update via {clUpdateMutableCommandsKHR} where this
      value was modified.
      The output array contains _work_dim_ values, where _work_dim_ is
      returned by the query {CL_MUTABLE_DISPATCH_DIMENSIONS_KHR}.
      If a global work-item offset was not set, zero is returned for each
      element in the array.

      If _command_ was not recorded from a {clCommandNDRangeKernelKHR}
      command, the implementation must return _param_value_size_ret_ equal
      to 0, indicating that the value returned in _param_value_ is not
      valid.
| {CL_MUTABLE_DISPATCH_GLOBAL_WORK_SIZE_KHR}
  | {size_t_TYPE}[]
    | Return the global work-item size set on _command_ creation, or from
      the most recent update via {clUpdateMutableCommandsKHR} where this
      value was modified.
      The output array contains _work_dim_ values, where _work_dim_ is
      returned by the query {CL_MUTABLE_DISPATCH_DIMENSIONS_KHR}.
      If a global work-item size was not set, zero is returned for each
      element in the array.

      If _command_ was not recorded from a {clCommandNDRangeKernelKHR}
      command, the implementation must return _param_value_size_ret_ equal
      to 0, indicating that the value returned in _param_value_ is not
      valid.
| {CL_MUTABLE_DISPATCH_LOCAL_WORK_SIZE_KHR}
  | {size_t_TYPE}[]
    | Return the local work-item size set on _command_ creation, or from the
      most recent update via {clUpdateMutableCommandsKHR} where this value
      was modified.
      The output array contains _work_dim_ values, where _work_dim_ is
      returned by the query {CL_MUTABLE_DISPATCH_DIMENSIONS_KHR}.
      If a local work-item size was not set, zero is returned for each
      element in the array.

      If _command_ was not recorded from a {clCommandNDRangeKernelKHR}
      command, the implementation must return _param_value_size_ret_ equal
      to 0, indicating that the value returned in _param_value_ is not
      valid.
|====

// refError

{clGetMutableCommandInfoKHR} returns {CL_SUCCESS} if the function is
executed successfully.
Otherwise, it returns one of the following errors:

  * {CL_INVALID_VALUE} if _param_name_ is not valid, or if size in bytes
    specified by _param_value_size_ is < size of return type as described in
    the <<mutable-command-object-queries, Mutable Command Object Queries>>
    table and _param_value_ is not `NULL`.
  * {CL_INVALID_MUTABLE_COMMAND_KHR} if _command_ is not a valid mutable
    command object.
  * {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources
    required by the OpenCL implementation on the device.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--
