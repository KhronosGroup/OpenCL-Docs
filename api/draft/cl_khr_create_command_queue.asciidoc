ifdef::cl_khr_create_command_queue[]
endif::cl_khr_create_command_queue[]

=== Modifications to the OpenCL 1.2 Specification

(Add to Table 5.2 for {CL_QUEUE_PROPERTIES} in Section 5.1) ::

[caption="Table 5.2 "]
.List of supported param_names by {clGetCommandQueueInfo}
[cols="2,1,3",options="header",]
|====
| *Queue Info* | *Return Type* | *Description*
| {CL_QUEUE_PROPERTIES}
  | {cl_command_queue_properties_TYPE}
    | Returns the currently specified properties for the command-queue.
      These properties are specified by the _properties_ argument in
      {clCreateCommandQueue}, or by the {CL_QUEUE_PROPERTIES} property value
      in {clCreateCommandQueueWithPropertiesKHR}.
|====

(Add a new Section 5.1.1, *Creating Command-Queues With Properties*) ::

[open,refpage='clCreateCommandQueueWithPropertiesKHR',desc='Create a command-queue from an array of properties for a specified device',type='protos']
--
To create a command-queue from an array of properties for a specified
device, call the function

include::{generated}/api/protos/clCreateCommandQueueWithPropertiesKHR.txt[]

  * _context_ must be a valid OpenCL context.
  * _device_ must be a device or sub-device associated with _context_.
    It can either be in the list of devices and sub-devices specified when
    _context_ is created using {clCreateContext} or be a root device with
    the same device type as specified when _context_ is created using
    {clCreateContextFromType}.
  * _properties_ specifies a list of properties for the command-queue and
    their corresponding values.
    Each property name is immediately followed by the corresponding desired
    value.
    The list is terminated with 0.
    Supported properties are described in the
    <<command-queue-properties-table, table below>>.
    If a supported property and its value is not specified in _properties_,
    its default value will be used.
    _properties_ can be NULL in which case the default values for supported
    command-queue properties will be used.
  * _errcode_ret_ will return an appropriate error code.
    If _errcode_ret_ is NULL, no error code is returned.

[caption="Table X.Y "]
.List of supported param_names by <<clCreateCommandQueueWithPropertiesKHR>>
|====
| *Queue Properties* | *Property Value* | *Description*

| {CL_QUEUE_PROPERTIES}
  | {cl_bitfield_TYPE}
    | This is a bitfield and can be set to a combination of the following
      values:

      {CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE} determines whether the
      commands queued in the command-queue are executed in-order or
      out-of-order.
      If set, the commands in the command-queue are executed out-of-order.
      Otherwise, commands are executed in-order.

      {CL_QUEUE_PROFILING_ENABLE} enable or disable profiling of commands in
      the command-queue.
      If set, the profiling of commands is enabled.
      Otherwise, profiling of commands is disabled.

      If {CL_QUEUE_PROPERTIES} is not specified an in-order command-queue
      that does not support profiling of commands is created for the
      specified device.
|====

// refError

{clCreateCommandQueueWithPropertiesKHR} returns a valid non-zero
command-queue and _errcode_ret_ is set to {CL_SUCCESS} if the command-queue
is created successfully.
Otherwise, it returns a NULL value with one of the following error values
returned in _errcode_ret_:

  * {CL_INVALID_CONTEXT} if _context_ is not a valid context.
  * {CL_INVALID_DEVICE} if _device_ is not a valid device or is not
    associated with _context_.
  * {CL_INVALID_VALUE} if values specified in _properties_ are not valid.
  * {CL_INVALID_QUEUE_PROPERTIES} if values specified in _properties_ are
    valid but are not supported by the device.
  * {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources
    required by the OpenCL implementation on the device.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--
