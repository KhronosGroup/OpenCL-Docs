ifdef::cl_khr_d3d11_sharing[]
endif::cl_khr_d3d11_sharing[]

=== Additions to Chapter 4 of the OpenCL 2.2 Specification

In _section 4.4_, replace the description of _properties_ under
{clCreateContext} with:

_properties_ specifies a list of context property names and their
corresponding values.
Each property is followed immediately by the corresponding desired value.
The list is terminated with zero.
If a property is not specified in _properties_, then its default value
(listed in _table 4.5_) is used (it is said to be specified implicitly).
If _properties_ is `NULL` or empty (points to a list whose first value is
zero), all attributes take on their default values.

Add the following to _table 4.5_:

[cols="2,1,2",options="header",]
|====
| *cl_context_properties enum* | *Property value* | *Description*
| {CL_CONTEXT_D3D11_DEVICE_KHR}
  | `ID3D11Device *`
    | Specifies the `ID3D11Device *` to use for Direct3D 11 interoperability.

      The default value is `NULL`.
|====

Add to the list of errors for {clCreateContext}:

  * {CL_INVALID_D3D11_DEVICE_KHR} if the value of the property
    {CL_CONTEXT_D3D11_DEVICE_KHR} is non-`NULL` and does not specify a valid
    Direct3D 11 device with which the _cl_device_ids_ against which this
    context is to be created may interoperate.
  * {CL_INVALID_OPERATION} if Direct3D 11 interoperability is specified by
    setting {CL_INVALID_D3D11_DEVICE_KHR} to a non-`NULL` value, and
    interoperability with another graphics API is also specified.

Add to the list of errors for {clCreateContextFromType} the same new errors
described above for {clCreateContext}.

Add the following row to _table 4.6_:

[cols="2,1,2",options="header",]
|====
| *cl_context_info* | *Return Type* | *Information returned in param_value*
| {CL_CONTEXT_D3D11_PREFER_SHARED_RESOURCES_KHR}
  | {cl_bool_TYPE}
    | Returns {CL_TRUE} if Direct3D 11 resources created as shared by
      setting _MiscFlags_ to include `D3D11_RESOURCE_MISC_SHARED` will
      perform faster when shared with OpenCL, compared with resources which
      have not set this flag.
      Otherwise returns {CL_FALSE}.
|====


=== Additions to Chapter 5 of the OpenCL 2.2 Specification

Add to the list of errors for {clGetMemObjectInfo}:

  * {CL_INVALID_D3D11_RESOURCE_KHR} if _param_name_ is
    {CL_MEM_D3D11_RESOURCE_KHR} and _memobj_ was not created by the function
    {clCreateFromD3D11BufferKHR}, {clCreateFromD3D11Texture2DKHR}, or
    {clCreateFromD3D11Texture3DKHR}.

Extend _table 5.12_ to include the following entry.

[cols="2,1,2",options="header",]
|====
| *cl_mem_info* | *Return type* | *Info. returned in _param_value_*
| {CL_MEM_D3D11_RESOURCE_KHR}
  | `ID3D11Resource *`
    | If _memobj_ was created using {clCreateFromD3D11BufferKHR},
      {clCreateFromD3D11Texture2DKHR}, or {clCreateFromD3D11Texture3DKHR},
      returns the _resource_ argument specified when _memobj_ was created.
|====

Add to the list of errors for {clGetImageInfo}:

  * {CL_INVALID_D3D11_RESOURCE_KHR} if _param_name_ is
    {CL_IMAGE_D3D11_SUBRESOURCE_KHR} and _image_ was not created by the
    function {clCreateFromD3D11Texture2DKHR}, or
    {clCreateFromD3D11Texture3DKHR}.

Extend _table 5.9_ to include the following entry.

[cols="2,1,2",options="header",]
|====
| *cl_image_info* | *Return type* | *Info. returned in _param_value_*
| {CL_IMAGE_D3D11_SUBRESOURCE_KHR}
  | `UINT`
    | If _image_ was created using {clCreateFromD3D11Texture2DKHR}, or
      {clCreateFromD3D11Texture3DKHR}, returns the _subresource_ argument
      specified when _image_ was created.
|====

Add to _table 5.22_ in the *Info returned in param_value* column for
_cl_event_info_ = {CL_EVENT_COMMAND_TYPE}:

----
{CL_COMMAND_ACQUIRE_D3D11_OBJECTS_KHR}
{CL_COMMAND_RELEASE_D3D11_OBJECTS_KHR}
----


=== Sharing Memory Objects With Direct3d 11 Resources

This section discusses OpenCL functions that allow applications to use
Direct3D 11 resources as OpenCL memory objects.
This allows efficient sharing of data between OpenCL and Direct3D 11.
The OpenCL API may be used to execute kernels that read and/or write memory
objects that are also Direct3D 11 resources.
An OpenCL image object may be created from a Direct3D 11 texture resource.
An OpenCL buffer object may be created from a Direct3D 11 buffer resource.
OpenCL memory objects may be created from Direct3D 11 objects if and only if
the OpenCL context has been created from a Direct3D 11 device.


==== Querying OpenCL Devices Corresponding to Direct3D 11 Devices

The OpenCL devices corresponding to a Direct3D 11 device may be queried.
The OpenCL devices corresponding to a DXGI adapter may also be queried.
The OpenCL devices corresponding to a Direct3D 11 device will be a subset of
the OpenCL devices corresponding to the DXGI adapter against which the
Direct3D 11 device was created.

[open,refpage='clGetDeviceIDsFromD3D11KHR',desc='Query OpenCL devices corresponding to a Direct3D 11 or DXGI device',type='protos']
--
To query OpenCL devices corresponding to a Direct3D 11 device or a DXGI
device, call the function

include::{generated}/api/protos/clGetDeviceIDsFromD3D11KHR.txt[]

  * _platform_ refers to the platform ID returned by {clGetPlatformIDs}.
  * _d3d_device_source_ specifies the type of _d3d_object_, and must be one
    of the values shown in the table below.
  * _d3d_object_ specifies the object whose corresponding OpenCL devices are
    being queried.
    The type of _d3d_object_ must be as specified in the table below.
  * _d3d_device_set_ specifies the set of devices to return, and must be one
    of the values shown in the table below.
  * _num_entries_ is the number of {cl_device_id_TYPE} entries that can be
    added to _devices_.
    If _devices_ is not `NULL` then _num_entries_ must be greater than zero.
  * _devices_ returns a list of OpenCL devices found.
    The {cl_device_id_TYPE} values returned in _devices_ can be used to
    identify a specific OpenCL device.
    If _devices_ is `NULL`, this argument is ignored.
    The number of OpenCL devices returned is the minimum of the value
    specified by _num_entries_ and the number of OpenCL devices
    corresponding to _d3d_object_.
  * _num_devices_ returns the number of OpenCL devices available that
    correspond to _d3d_object_.
    If _num_devices_ is `NULL`, this argument is ignored.

._Direct3D 11 object types that may be used by_ {clGetDeviceIDsFromD3D11KHR}
[cols=",",options="header",]
|====
| {cl_d3d11_device_source_khr_TYPE} | *Type of* _d3d_object_
| {CL_D3D11_DEVICE_KHR}             | `ID3D11Device *`
| {CL_D3D11_DXGI_ADAPTER_KHR}       | `IDXGIAdapter *`
|====

._Sets of devices queriable using_ {clGetDeviceIDsFromD3D11KHR}
[cols=",",options="header",]
|====
| {cl_d3d11_device_set_khr_TYPE} | *Devices Returned in* _devices_
| {CL_PREFERRED_DEVICES_FOR_D3D11_KHR}
    | The preferred OpenCL devices associated with the specified Direct3D
      object.
| {CL_ALL_DEVICES_FOR_D3D11_KHR}
    | All OpenCL devices which may interoperate with the specified Direct3D
      object.
      Performance of sharing data on these devices may be considerably less
      than on the preferred devices.
|====

// refError

{clGetDeviceIDsFromD3D11KHR} returns {CL_SUCCESS} if the function is
executed successfully.
Otherwise it may return

  * {CL_INVALID_PLATFORM} if _platform_ is not a valid platform.
  * {CL_INVALID_VALUE} if _d3d_device_source_ is not a valid value,
    _d3d_device_set_ is not a valid value, _num_entries_ is equal to zero
    and _devices_ is not `NULL`, or if both _num_devices_ and _devices_ are
    `NULL`.
  * {CL_DEVICE_NOT_FOUND} if no OpenCL devices that correspond to
    _d3d_object_ were found.
--


==== Lifetime of Shared Objects

An OpenCL memory object created from a Direct3D 11 resource remains valid as
long as the corresponding Direct3D 11 resource has not been deleted.
If the Direct3D 11 resource is deleted through the Direct3D 11 API,
subsequent use of the OpenCL memory object will result in undefined
behavior, including but not limited to possible OpenCL errors, data
corruption, and program termination.

The successful creation of a {cl_context_TYPE} against a Direct3D 11 device
specified via the context create parameter {CL_CONTEXT_D3D11_DEVICE_KHR}
will increment the internal Direct3D reference count on the specified
Direct3D 11 device.
The internal Direct3D reference count on that Direct3D 11 device will be
decremented when the OpenCL reference count on the returned OpenCL context
drops to zero.

The OpenCL context and corresponding command-queues are dependent on the
existence of the Direct3D 11 device from which the OpenCL context was
created.
If the Direct3D 11 device is deleted through the Direct3D 11 API, subsequent
use of the OpenCL context will result in undefined behavior, including but
not limited to possible OpenCL errors, data corruption, and program
termination.


==== Sharing Direct3D 11 Buffer Resources as OpenCL Buffer Objects

[open,refpage='clCreateFromD3D11BufferKHR',desc='Create OpenCL buffer object from a Direct3D 11 buffer',type='protos']
--
To create an OpenCL buffer object from a Direct3D 11 buffer, call the
function

include::{generated}/api/protos/clCreateFromD3D11BufferKHR.txt[]

  * _context_ is a valid OpenCL context created from a Direct3D 11 device.
  * _flags_ is a bit-field that is used to specify usage information.
    Refer to table 5.3 for a description of _flags_.
    Only {CL_MEM_READ_ONLY}, {CL_MEM_WRITE_ONLY} and {CL_MEM_READ_WRITE}
    values specified in _table 5.3_ can be used.
  * _resource_ is a pointer to the Direct3D 11 buffer to share.
  * _errcode_ret_ will return an appropriate error code.
    If _errcode_ret_ is `NULL`, no error code is returned.

The size of the returned OpenCL buffer object is the same as the size of
_resource_.
This call will increment the internal Direct3D reference count on
_resource_.
The internal Direct3D reference count on _resource_ will be decremented when
the OpenCL reference count on the returned OpenCL memory object drops to
zero.

// refError

{clCreateFromD3D11BufferKHR} returns a valid non-zero OpenCL buffer object
and _errcode_ret_ is set to {CL_SUCCESS} if the buffer object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * {CL_INVALID_CONTEXT} if _context_ is not a valid context.
  * {CL_INVALID_VALUE} if values specified in _flags_ are not valid.
  * {CL_INVALID_D3D11_RESOURCE_KHR} if _resource_ is not a Direct3D 11
    buffer resource, if _resource_ was created with the D3D11_USAGE flag
    D3D11_USAGE_IMMUTABLE, if a {cl_mem_TYPE} from _resource_ has already
    been created using {clCreateFromD3D11BufferKHR}, or if _context_ was not
    created against the same Direct3D 11 device from which _resource_ was
    created.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--


==== Sharing Direct3D 11 Texture and Resources as OpenCL Image Objects

[open,refpage='clCreateFromD3D11Texture2DKHR',desc='Create OpenCL 2D image object from a Direct3D 11 2D texture',type='protos']
--
To create an OpenCL 2D image object from a subresource of a Direct3D 11 2D
texture, call the function

include::{generated}/api/protos/clCreateFromD3D11Texture2DKHR.txt[]

  * _context_ is a valid OpenCL context created from a Direct3D 11 device.
  * _flags_ is a bit-field that is used to specify usage information.
    Refer to _table 5.3_ for a description of _flags_.
    Only {CL_MEM_READ_ONLY}, {CL_MEM_WRITE_ONLY} and {CL_MEM_READ_WRITE}
    values specified in _table 5.3_ can be used.
  * _resource_ is a pointer to the Direct3D 11 2D texture to share.
  * _subresource_ is the subresource of _resource_ to share.
  * _errcode_ret_ will return an appropriate error code.
    If _errcode_ret_ is `NULL`, no error code is returned.

The width and height of the returned OpenCL 2D image object are determined
by the width and height of subresource _subresource_ of _resource_.
The channel type and order of the returned OpenCL 2D image object is
determined by the format of _resource_ by the table
<<cl_khr_d3d11_sharing-mapping-of-image-formats,_Direct3D 11 formats and
corresponding OpenCL image formats_>>.

This call will increment the internal Direct3D reference count on
_resource_.
The internal Direct3D reference count on _resource_ will be decremented when
the OpenCL reference count on the returned OpenCL memory object drops to
zero.

// refError

{clCreateFromD3D11Texture2DKHR} returns a valid non-zero OpenCL image object
and _errcode_ret_ is set to {CL_SUCCESS} if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * {CL_INVALID_CONTEXT} if _context_ is not a valid context.
  * {CL_INVALID_VALUE} if values specified in _flags_ are not valid or if
    _subresource_ is not a valid subresource index for _resource_.
  * {CL_INVALID_D3D11_RESOURCE_KHR} if _resource_ is not a Direct3D 11
    texture resource, if _resource_ was created with the D3D11_USAGE flag
    D3D11_USAGE_IMMUTABLE, if _resource_ is a multisampled texture, if a
    {cl_mem_TYPE} from subresource _subresource_ of _resource_ has already
    been created using {clCreateFromD3D11Texture2DKHR}, or if _context_ was
    not created against the same Direct3D 11 device from which _resource_
    was created.
  * {CL_INVALID_IMAGE_FORMAT_DESCRIPTOR} if the Direct3D 11 texture format
    of _resource_ is not listed in the table
    <<cl_khr_d3d11_sharing-mapping-of-image-formats,_Direct3D 11 formats and
    corresponding OpenCL image formats_>> or if the Direct3D 11 texture
    format of _resource_ does not map to a supported OpenCL image format.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--

[open,refpage='clCreateFromD3D11Texture3DKHR',desc='Create OpenCL 3D image object from a Direct3D 11 3D texture',type='protos']
--
To create an OpenCL 3D image object from a subresource of a Direct3D 11 3D
texture, call the function

include::{generated}/api/protos/clCreateFromD3D11Texture3DKHR.txt[]

  * _context_ is a valid OpenCL context created from a Direct3D 11 device.
  * _flags_ is a bit-field that is used to specify usage information.
    Refer to _table 5.3_ for a description of _flags_.
    Only {CL_MEM_READ_ONLY}, {CL_MEM_WRITE_ONLY} and {CL_MEM_READ_WRITE}
    values specified in _table 5.3_ can be used.
  * _resource_ is a pointer to the Direct3D 11 3D texture to share.
  * _subresource_ is the subresource of _resource_ to share.
  * _errcode_ret_ will return an appropriate error code.
    If _errcode_ret_ is `NULL`, no error code is returned.

The width, height and depth of the returned OpenCL 3D image object are
determined by the width, height and depth of subresource _subresource_ of
_resource_.
The channel type and order of the returned OpenCL 3D image object is
determined by the format of _resource_ by the table
<<cl_khr_d3d11_sharing-mapping-of-image-formats,_Direct3D 11 formats and
corresponding OpenCL image formats_>>.

This call will increment the internal Direct3D reference count on
_resource_.
The internal Direct3D reference count on _resource_ will be decremented when
the OpenCL reference count on the returned OpenCL memory object drops to
zero.

._Direct3D 11 formats and corresponding OpenCL image formats_
[cols=",",options="header",]
|====
| *DXGI format*
| *CL image format*

*(channel order, channel data type)*

| `DXGI_FORMAT_R32G32B32A32_FLOAT` | {CL_RGBA}, {CL_FLOAT}
| `DXGI_FORMAT_R32G32B32A32_UINT`  | {CL_RGBA}, {CL_UNSIGNED_INT32}
| `DXGI_FORMAT_R32G32B32A32_SINT`  | {CL_RGBA}, {CL_SIGNED_INT32}
|                                  |
| `DXGI_FORMAT_R16G16B16A16_FLOAT` | {CL_RGBA}, {CL_HALF_FLOAT}
| `DXGI_FORMAT_R16G16B16A16_UNORM` | {CL_RGBA}, {CL_UNORM_INT16}
| `DXGI_FORMAT_R16G16B16A16_UINT`  | {CL_RGBA}, {CL_UNSIGNED_INT16}
| `DXGI_FORMAT_R16G16B16A16_SNORM` | {CL_RGBA}, {CL_SNORM_INT16}
| `DXGI_FORMAT_R16G16B16A16_SINT`  | {CL_RGBA}, {CL_SIGNED_INT16}
|                                  |
| `DXGI_FORMAT_B8G8R8A8_UNORM`     | {CL_BGRA}, {CL_UNORM_INT8}
| `DXGI_FORMAT_R8G8B8A8_UNORM`     | {CL_RGBA}, {CL_UNORM_INT8}
| `DXGI_FORMAT_R8G8B8A8_UINT`      | {CL_RGBA}, {CL_UNSIGNED_INT8}
| `DXGI_FORMAT_R8G8B8A8_SNORM`     | {CL_RGBA}, {CL_SNORM_INT8}
| `DXGI_FORMAT_R8G8B8A8_SINT`      | {CL_RGBA}, {CL_SIGNED_INT8}
|                                  |
| `DXGI_FORMAT_R32G32_FLOAT`       | {CL_RG}, {CL_FLOAT}
| `DXGI_FORMAT_R32G32_UINT`        | {CL_RG}, {CL_UNSIGNED_INT32}
| `DXGI_FORMAT_R32G32_SINT`        | {CL_RG}, {CL_SIGNED_INT32}
|                                  |
| `DXGI_FORMAT_R16G16_FLOAT`       | {CL_RG}, {CL_HALF_FLOAT}
| `DXGI_FORMAT_R16G16_UNORM`       | {CL_RG}, {CL_UNORM_INT16}
| `DXGI_FORMAT_R16G16_UINT`        | {CL_RG}, {CL_UNSIGNED_INT16}
| `DXGI_FORMAT_R16G16_SNORM`       | {CL_RG}, {CL_SNORM_INT16}
| `DXGI_FORMAT_R16G16_SINT`        | {CL_RG}, {CL_SIGNED_INT16}
|                                  |
| `DXGI_FORMAT_R8G8_UNORM`         | {CL_RG}, {CL_UNORM_INT8}
| `DXGI_FORMAT_R8G8_UINT`          | {CL_RG}, {CL_UNSIGNED_INT8}
| `DXGI_FORMAT_R8G8_SNORM`         | {CL_RG}, {CL_SNORM_INT8}
| `DXGI_FORMAT_R8G8_SINT`          | {CL_RG}, {CL_SIGNED_INT8}
|                                  |
| `DXGI_FORMAT_R32_FLOAT`          | {CL_R}, {CL_FLOAT}
| `DXGI_FORMAT_R32_UINT`           | {CL_R}, {CL_UNSIGNED_INT32}
| `DXGI_FORMAT_R32_SINT`           | {CL_R}, {CL_SIGNED_INT32}
|                                  |
| `DXGI_FORMAT_R16_FLOAT`          | {CL_R}, {CL_HALF_FLOAT}
| `DXGI_FORMAT_R16_UNORM`          | {CL_R}, {CL_UNORM_INT16}
| `DXGI_FORMAT_R16_UINT`           | {CL_R}, {CL_UNSIGNED_INT16}
| `DXGI_FORMAT_R16_SNORM`          | {CL_R}, {CL_SNORM_INT16}
| `DXGI_FORMAT_R16_SINT`           | {CL_R}, {CL_SIGNED_INT16}
|                                  |
| `DXGI_FORMAT_R8_UNORM`           | {CL_R}, {CL_UNORM_INT8}
| `DXGI_FORMAT_R8_UINT`            | {CL_R}, {CL_UNSIGNED_INT8}
| `DXGI_FORMAT_R8_SNORM`           | {CL_R}, {CL_SNORM_INT8}
| `DXGI_FORMAT_R8_SINT`            | {CL_R}, {CL_SIGNED_INT8}
|====

// refError

{clCreateFromD3D11Texture3DKHR} returns a valid non-zero OpenCL image object
and _errcode_ret_ is set to {CL_SUCCESS} if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * {CL_INVALID_CONTEXT} if _context_ is not a valid context.
  * {CL_INVALID_VALUE} if values specified in _flags_ are not valid or if
    _subresource_ is not a valid subresource index for _resource_.
  * {CL_INVALID_D3D11_RESOURCE_KHR} if _resource_ is not a Direct3D 11
    texture resource, if _resource_ was created with the D3D11_USAGE flag
    D3D11_USAGE_IMMUTABLE, if _resource_ is a multisampled texture, if a
    {cl_mem_TYPE} from subresource _subresource_ of _resource_ has already
    been created using {clCreateFromD3D11Texture3DKHR}, or if _context_ was
    not created against the same Direct3D 11 device from which _resource_
    was created.
  * {CL_INVALID_IMAGE_FORMAT_DESCRIPTOR} if the Direct3D 11 texture format
    of _resource_ is not listed in the table
    <<cl_khr_d3d11_sharing-mapping-of-image-formats,_Direct3D 11 formats and
    corresponding OpenCL image formats_>> or if the Direct3D 11 texture
    format of _resource_ does not map to a supported OpenCL image format.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--


==== Querying Direct3D Properties of Memory Objects Created From Direct3D 11 Resources

Properties of Direct3D 11 objects may be queried using {clGetMemObjectInfo}
and {clGetImageInfo} with _param_name_ {CL_MEM_D3D11_RESOURCE_KHR} and
{CL_IMAGE_D3D11_SUBRESOURCE_KHR} respectively as described in _sections
5.4.3_ and _5.3.6_.


==== Sharing Memory Objects Created From Direct3D 11 Resources Between Direct3D 11 and Opencl Contexts

[open,refpage='clEnqueueAcquireD3D11ObjectsKHR',desc='Acquire OpenCL memory objects created from Direct3D 11 resources',type='protos']
--
To acquire OpenCL memory objects that have been created from Direct3D 11
resources, call the function

include::{generated}/api/protos/clEnqueueAcquireD3D11ObjectsKHR.txt[]

  * _command_queue_ is a valid command-queue.
  * _num_objects_ is the number of memory objects to be acquired in
    _mem_objects_.
  * _mem_objects_ is a pointer to a list of OpenCL memory objects that were
    created from Direct3D 11 resources.
  * _event_wait_list_ and _num_events_in_wait_list_ specify events that need
    to complete before this particular command can be executed.
    If _event_wait_list_ is `NULL`, then this particular command does not
    wait on any event to complete.
    If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
    If _event_wait_list_ is not `NULL`, the list of events pointed to by
    _event_wait_list_ must be valid and _num_events_in_wait_list_ must be
    greater than 0.
    The events specified in _event_wait_list_ act as synchronization points.
  * _event_ returns an event object that identifies this command and can be
    used to query or wait for this command to complete.
    If _event_ is `NULL` or the enqueue is unsuccessful, no event will be
    created and therefore it will not be possible to query the status of
    this command or to wait for this command to complete.
    If _event_wait_list_ and _event_ are not `NULL`, _event_ must not refer
    to an element of the _event_wait_list_ array.

The Direct3D 11 objects are acquired by the OpenCL context associated with
_command_queue_ and can therefore be used by all command-queues associated
with the OpenCL context.

OpenCL memory objects created from Direct3D 11 resources must be acquired
before they can be used by any OpenCL commands queued to a command-queue.
If an OpenCL memory object created from a Direct3D 11 resource is used while
it is not currently acquired by OpenCL, the behavior is undefined.
Implementations may fail the execution of commands attempting to use that
OpenCL memory object and set their associated event's execution status to
{CL_D3D11_RESOURCE_NOT_ACQUIRED_KHR}.

If {CL_CONTEXT_INTEROP_USER_SYNC} is not specified as {CL_TRUE} during
context creation, {clEnqueueAcquireD3D11ObjectsKHR} provides the
synchronization guarantee that any Direct3D 11 calls involving the interop
device(s) used in the OpenCL context made before
{clEnqueueAcquireD3D11ObjectsKHR} is called will complete executing before
_event_ reports completion and before the execution of any subsequent OpenCL
work issued in _command_queue_ begins.
If the context was created with properties specifying
{CL_CONTEXT_INTEROP_USER_SYNC} as {CL_TRUE}, the user is responsible for
guaranteeing that any Direct3D 11 calls involving the interop device(s) used
in the OpenCL context made before {clEnqueueAcquireD3D11ObjectsKHR} is
called have completed before calling {clEnqueueAcquireD3D11ObjectsKHR}.

// refError

{clEnqueueAcquireD3D11ObjectsKHR} returns {CL_SUCCESS} if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` then the function does
nothing and returns {CL_SUCCESS}.
Otherwise it returns one of the following errors:

  * {CL_INVALID_VALUE} if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * {CL_INVALID_MEM_OBJECT} if memory objects in _mem_objects_ are not valid
    OpenCL memory objects or if memory objects in _mem_objects_ have not
    been created from Direct3D 11 resources.
  * {CL_INVALID_COMMAND_QUEUE} if _command_queue_ is not a valid
    command-queue.
  * {CL_INVALID_CONTEXT} if context associated with _command_queue_ was not
    created from an Direct3D 11 context.
  * {CL_D3D11_RESOURCE_ALREADY_ACQUIRED_KHR} if memory objects in
    _mem_objects_ have previously been acquired using
    {clEnqueueAcquireD3D11ObjectsKHR} but have not been released using
    {clEnqueueReleaseD3D11ObjectsKHR}.
  * {CL_INVALID_EVENT_WAIT_LIST} if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--

[open,refpage='clEnqueueReleaseD3D11ObjectsKHR',desc='Release OpenCL memory objects created from Direct3D 11 resources',type='protos']
--
To release OpenCL memory objects that have been created from Direct3D 11
resources, call the function

include::{generated}/api/protos/clEnqueueReleaseD3D11ObjectsKHR.txt[]

  * _num_objects_ is the number of memory objects to be released in
    _mem_objects_.
  * _mem_objects_ is a pointer to a list of OpenCL memory objects that were
    created from Direct3D 11 resources.
  * _event_wait_list_ and _num_events_in_wait_list_ specify events that need
    to complete before this particular command can be executed.
    If _event_wait_list_ is `NULL`, then this particular command does not
    wait on any event to complete.
    If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
    If _event_wait_list_ is not `NULL`, the list of events pointed to by
    _event_wait_list_ must be valid and _num_events_in_wait_list_ must be
    greater than 0.
  * _event_ returns an event object that identifies this command and can be
    used to query or wait for this command to complete.
    If _event_ is `NULL` or the enqueue is unsuccessful, no event will be
    created and therefore it will not be possible to query the status of
    this command or to wait for this command to complete.
    If _event_wait_list_ and _event_ are not `NULL`, _event_ must not refer
    to an element of the _event_wait_list_ array.

The Direct3D 11 objects are released by the OpenCL context associated with
_command_queue_.

OpenCL memory objects created from Direct3D 11 resources which have been
acquired by OpenCL must be released by OpenCL before they may be accessed by
Direct3D 11.
Accessing a Direct3D 11 resource while its corresponding OpenCL memory
object is acquired is in error and will result in undefined behavior,
including but not limited to possible OpenCL errors, data corruption, and
program termination.

If {CL_CONTEXT_INTEROP_USER_SYNC} is not specified as {CL_TRUE} during
context creation, {clEnqueueReleaseD3D11ObjectsKHR} provides the
synchronization guarantee that any calls to Direct3D 11 calls involving the
interop device(s) used in the OpenCL context made after the call to
{clEnqueueReleaseD3D11ObjectsKHR} will not start executing until after all
events in _event_wait_list_ are complete and all work already submitted to
_command_queue_ completes execution.
If the context was created with properties specifying
{CL_CONTEXT_INTEROP_USER_SYNC} as {CL_TRUE}, the user is responsible for
guaranteeing that any Direct3D 11 calls involving the interop device(s) used
in the OpenCL context made after {clEnqueueReleaseD3D11ObjectsKHR} will not
start executing until after event returned by
{clEnqueueReleaseD3D11ObjectsKHR} reports completion.

// refError

{clEnqueueReleaseD3D11ObjectsKHR} returns {CL_SUCCESS} if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` the function does nothing
and returns {CL_SUCCESS}.
Otherwise it returns one of the following errors:

  * {CL_INVALID_VALUE} if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if _num_objects_ > 0 and _mem_objects_ is `NULL`.
  * {CL_INVALID_MEM_OBJECT} if memory objects in _mem_objects_ are not valid
    OpenCL memory objects or if memory objects in _mem_objects_ have not
    been created from Direct3D 11 resources.
  * {CL_INVALID_COMMAND_QUEUE} if _command_queue_ is not a valid
    command-queue.
  * {CL_INVALID_CONTEXT} if context associated with _command_queue_ was not
    created from a Direct3D 11 device.
  * {CL_D3D11_RESOURCE_NOT_ACQUIRED_KHR} if memory objects in _mem_objects_
    have not previously been acquired using
    {clEnqueueAcquireD3D11ObjectsKHR}, or have been released using
    {clEnqueueReleaseD3D11ObjectsKHR} since the last time that they were
    acquired.
  * {CL_INVALID_EVENT_WAIT_LIST} if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    __num_events_in_wait_list__> is 0, or if event objects in
    _event_wait_list_ are not valid events.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--


==== Event Command Types for Sharing Memory Objects That Map to Direct3D 11 Objects

The following table describes the event command types for the OpenCL
commands to acquire and release OpenCL memory objects that have been created
from Direct3D 11 objects:

.List of supported event command types
[width="100%",cols="2,3",options="header"]
|====
| *Events Created By* | *Event Command Type*
| {clEnqueueAcquireD3D11ObjectsKHR}
    | {CL_COMMAND_ACQUIRE_D3D11_OBJECTS_KHR_anchor}
| {clEnqueueReleaseD3D11ObjectsKHR}
    | {CL_COMMAND_RELEASE_D3D11_OBJECTS_KHR_anchor}
|====
