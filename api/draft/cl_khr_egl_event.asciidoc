// Copyright 2017-2023 The Khronos Group.
// SPDX-License-Identifier: CC-BY-4.0

include::{generated}/meta/{refprefix}cl_khr_egl_event.txt[]

=== Other Extension Metadata

*Last Modified Date*::
    2020-04-21
*IP Status*::
    No known IP claims.
*Contributors*::
    TBD

=== Description

`cl_khr_egl_event` allows creating OpenCL event objects linked to EGL fence
sync objects, potentially improving efficiency of sharing images and buffers
between the two APIs.
The companion `EGL_KHR_cl_event` extension provides the complementary
functionality of creating an EGL sync object from an OpenCL event object.

=== New Commands

  * {clCreateEventFromEGLSyncKHR}

=== New Tokens

  * New Error Codes
  ** {CL_INVALID_EGL_OBJECT_KHR}
  ** {CL_COMMAND_EGL_FENCE_SYNC_OBJECT_KHR}

=== Issues

Most issues are shared with `<<cl_khr_gl_event>>` and are resolved as
described in that extension.

  . Should we support implicit synchronization?
+
--
*RESOLVED*: No, as this may be very difficult since the synchronization
would not be with EGL, it would be with currently bound EGL client APIs.
It would be necessary to know which client APIs might be bound, to validate
that they're associated with the `EGLDisplay` associated with the OpenCL
context, and to reach into each such context.
--

  . Do we need to have typedefs to use EGL handles in OpenCL?
+
--
*RESOLVED* Using typedefs for EGL handles.
--

  . Should we restrict which CL APIs can be used with this cl_event?
+
--
*RESOLVED* Use is limited to {clEnqueueAcquire}*** calls only.
--

  . What is the desired behaviour for this extension when EGLSyncKHR is of a
    type other than `EGL_SYNC_FENCE_KHR`?
+
--
*RESOLVED* This extension only requires support for `EGL_SYNC_FENCE_KHR`.
Support of other types is an implementation choice, and will result in
CL_INVALID_EGL_OBJECT_KHR if unsupported.
--

=== Version History

  * Revision 1.0.0, 2020-04-21
  ** First assigned version.
//HEADER



=== Additions to Chapter 5 of the OpenCL 2.2 Specification

Add following to the fourth paragraph of _section 5.11_ (prior to the
description of {clWaitForEvents}):

Event objects can also be used to reflect the status of an EGL fence sync
object.
The sync object in turn refers to a fence command executing in an EGL client
API command stream.
This provides another method of coordinating sharing of EGL / EGL client API
objects with OpenCL.
Completion of EGL / EGL client API commands may be determined by placing an
EGL fence command after commands using `eglCreateSyncKHR`, creating an event
from the resulting EGL sync object using {clCreateEventFromEGLSyncKHR} and
then specifying it in the _event_wait_list_ of a {clEnqueueAcquire}***
command.
This method may be considerably more efficient than calling operations like
`glFinish`, and is referred to as _explicit synchronization_.
The application is responsible for ensuring the command stream associated
with the EGL fence is flushed to ensure the CL queue is submitted to the
device.
Explicit synchronization is most useful when an EGL client API context bound
to another thread is accessing the memory objects.

Add {CL_COMMAND_EGL_FENCE_SYNC_OBJECT_KHR} to the valid _param_value_ values
returned by {clGetEventInfo} for _param_name_ {CL_EVENT_COMMAND_TYPE} (in
the third row and third column of _table 5.22_).

Add new _subsection 5.11.2_:

*5.11.2 Linking Event Objects to EGL Synchronization Objects*

[open,refpage='clCreateEventFromEGLSyncKHR',desc='Link OpenCL event object to an EGL sync object',type='protos']
--
To link an OpenCL event object to an EGL *sync object*, call the function

include::{generated}/api/protos/clCreateEventFromEGLSyncKHR.txt[]

  * _context_ is a valid OpenCL context created from an OpenGL context or
    share group, using the `<<cl_khr_gl_sharing>>` extension.
  * _sync_ is the name of a sync object of type `EGL_SYNC_FENCE_KHR` created
    with respect to `EGLDisplay` _display_.

Completion of such an event object is equivalent to waiting for completion
of the fence command associated with the linked EGL sync object.

The parameters of an event object linked to an EGL sync object will return
the following values when queried with {clGetEventInfo}:

  * The {CL_EVENT_COMMAND_QUEUE} of a linked event is `NULL`, because the
    event is not associated with any OpenCL command-queue.
  * The {CL_EVENT_COMMAND_TYPE} of a linked event is
    {CL_COMMAND_EGL_FENCE_SYNC_OBJECT_KHR}, indicating that the event is
    associated with a EGL sync object, rather than an OpenCL command.
  * The {CL_EVENT_COMMAND_EXECUTION_STATUS} of a linked event is either
    {CL_SUBMITTED}, indicating that the fence command associated with the
    sync object has not yet completed, or {CL_COMPLETE}, indicating that the
    fence command has completed.

{clCreateEventFromEGLSyncKHR} performs an implicit {clRetainEvent} on the
returned event object.
Creating a linked event object also places a reference on the linked EGL
sync object.
When the event object is deleted, the reference will be removed from the EGL
sync object.

Events returned from {clCreateEventFromEGLSyncKHR} may only be consumed by
{clEnqueueAcquire}*** commands.
Passing such events to any other CL API that enqueues commands will generate
a {CL_INVALID_EVENT} error.

// refError

{clCreateEventFromEGLSyncKHR} returns a valid OpenCL event object and
_errcode_ret_ is set to {CL_SUCCESS} if the event object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * {CL_INVALID_CONTEXT} if _context_ is not a valid context, or was not
    created from a GL context.
  * {CL_INVALID_EGL_OBJECT_KHR} if _sync_ is not a valid EGLSyncKHR object
    of type `EGL_SYNC_FENCE_KHR` created with respect to `EGLDisplay`
    _display_.
--


=== Additions to the OpenCL Extension Specification

Replace the second paragraph of
<<cl_khr_gl_sharing__memobjs-synchronizing-opencl-and-opengl-access-to-shared-objects,
Synchronizing OpenCL and OpenGL Access to Shared Objects>> with:

Prior to calling {clEnqueueAcquireGLObjects}, the application must ensure
that any pending EGL or EGL client API operations which access the objects
specified in _mem_objects_ have completed.

If the `<<cl_khr_egl_event>>` extension is supported and the EGL context in
question supports fence sync objects, _explicit synchronization_ can be
achieved as set out in _section 5.7.1_.

If the `<<cl_khr_egl_event>>` extension is not supported, completion of EGL
client API commands may be determined by issuing and waiting for completion
of commands such as `glFinish` or `vgFinish` on all client API contexts with
pending references to these objects.
Some implementations may offer other efficient synchronization methods.
If such methods exist they will be described in platform-specific
documentation.

Note that no synchronization methods other than `glFinish` and `vgFinish`
are portable between all EGL client API implementations and all OpenCL
implementations.
While this is the only way to ensure completion that is portable to all
platforms, these are expensive operation and their use should be avoided if
the `<<cl_khr_egl_event>>` extension is supported on a platform.
