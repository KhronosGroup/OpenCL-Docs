ifdef::cl_khr_egl_image[]
endif::cl_khr_egl_image[]

=== Additions to Chapter 5 of the OpenCL 2.2 Specification

In section 5.2.4, add the following text after the paragraph defining
clCreateImage:

[open,refpage='clCreateFromEGLImageKHR',desc='Create cl_mem target from EGLImage source',type='protos']
--
To create an `EGLImage` target of type {cl_mem} from the `EGLImage` source
provided as _image_, call the function

include::{generated}/api/protos/clCreateFromEGLImageKHR.txt[]

  * _display_ should be of type `EGLDisplay`, cast into the type
    {CLeglDisplayKHR}.
  * _image_ should be of type `EGLImageKHR`, cast into the type
    {CLeglImageKHR_TYPE}.
    Assuming no errors are generated in this function, the resulting image
    object will be an `EGLImage` target of the specified `EGLImage` _image_.
    The resulting {cl_mem} is an image object which may be used normally by
    all OpenCL operations.
    This maps to an `image2d_t` type in OpenCL kernel code.
  * _flags_ is a bit-field that is used to specify usage information about
    the memory object being created.
    Accepted values in _flags_ are described below.
  * _properties_ specifies a list of property names and their corresponding
    values.
    Each property name is immediately followed by the corresponding desired
    value.
    The list is terminated with 0.
    No properties are currently supported with this version of the
    extension.
    _properties_ can be `NULL`.

Accepted for _flags_ are {CL_MEM_READ_ONLY}, {CL_MEM_WRITE_ONLY} and
CL_MEM_READ_WRITE.
If OpenCL 1.2 us supported, _flags_ also accepts {CL_MEM_HOST_WRITE_ONLY},
{CL_MEM_HOST_READ_ONLY}, and {CL_MEM_HOST_NO_ACCESS}.

`<<cl_khr_egl_image>>` only requires support for {CL_MEM_READ_ONLY}, and for
CL_MEM_HOST_NO_ACCESS if OpenCL 1.2 or later is supported.
For OpenCL 1.1, a {CL_INVALID_OPERATION} will be returned for images which
do not support host mapping.

If the value passed in _flags_ is not supported by the OpenCL
implementation, it will return {CL_INVALID_VALUE}.
The accepted _flags_ may be dependent upon the texture format used.

// refError

{clCreateFromEGLImageKHR} returns a valid non-zero OpenCL image object and
_errcode_ret_ is set to {CL_SUCCESS} if the image object is created
successfully.
Otherwise, it returns a `NULL` value with one of the following error values
returned in _errcode_ret_:

  * {CL_INVALID_CONTEXT} if _context_ is not a valid OpenCL context.
  * {CL_INVALID_VALUE} if _properties_ contains invalid values, if _display_
    is not a valid display object or if _flags_ are not in the set defined
    above.
  * {CL_INVALID_EGL_OBJECT_KHR} if _image_ is not a valid `EGLImage` object.
  * {CL_IMAGE_FORMAT_NOT_SUPPORTED} if the OpenCL implementation is not able
    to create a {cl_mem} compatible with the provided {CLeglImageKHR_TYPE}
    for an implementation-dependent reason (this could be caused by, but not
    limited to, reasons such as unsupported texture formats, etc).
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
  * {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources
    required by the OpenCL implementation on the device.
  * {CL_INVALID_OPERATION} if there are no devices in _context_ that support
    images (i.e. {CL_DEVICE_IMAGE_SUPPORT} specified in table 4.3 is
    {CL_FALSE}) or if the flags passed are not supported for that image
    type.
--


==== Lifetime of Shared Objects

An OpenCL memory object created from an EGL image remains valid according to
the lifetime behavior as described in `EGL_KHR_image_base`.

Any `EGLImage` siblings exist in any client API context

For OpenCL this means that while the application retains a reference on the
cl_mem (the EGL sibling), the image remains valid.


==== Synchronizing OpenCL and EGL Access to Shared Objects

In order to ensure data integrity, the application is responsible for
synchronizing access to shared CL/EGL objects by their respective APIs.
Failure to provide such synchronization may result in race conditions and
other undefined behavior including non-portability between implementations.

Prior to calling {clEnqueueAcquireEGLObjectsKHR}, the application must ensure
that any pending operations which access the objects specified in
mem_objects have completed.
This may be accomplished in a portable way by ceasing all client operations
on the resource, and issuing and waiting for completion of a glFinish
command on all GL contexts with pending references to these objects.
Implementations may offer more efficient synchronization methods, such as
synchronization primitives or fence operations.

Similarly, after calling {clEnqueueReleaseEGLImageObjects}, the application is
responsible for ensuring that any pending OpenCL operations which access the
objects specified in mem_objects have completed prior to executing
subsequent commands in other APIs which reference these objects.
This may be accomplished in a portable way by calling {clWaitForEvents} with
the event object returned by {clEnqueueReleaseGLObjects}, or by calling
clFinish.
As above, some implementations may offer more efficient methods.

Attempting to access the data store of an `EGLImage` object after it has been
acquired by OpenCL and before it has been released will result in undefined
behavior.
Similarly, attempting to access a shared `EGLImage` object from OpenCL before
it has been acquired by the OpenCL command-queue or after it has been
released, will result in undefined behavior.


==== Sharing Memory Objects Created From EGL Resources Between `EGLdisplay`s And OpenCL Contexts

[open,refpage='clEnqueueAcquireEGLObjectsKHR',desc='Acquire OpenCL memory objects created from EGL resources',type='protos']
--
To acquire OpenCL memory objects that have been created from EGL resources,
call the function

include::{generated}/api/protos/clEnqueueAcquireEGLObjectsKHR.txt[]

  * _command_queue_ is a valid command-queue.
  * _num_objects_ is the number of memory objects to be acquired in
    _mem_objects_.
  * _mem_objects_ is a pointer to a list of OpenCL memory objects that were
    created from EGL resources, within the context associate with
    command_queue.
  * _event_wait_list_ and _num_events_in_wait_list_ specify events that need
    to complete before this particular command can be executed.
    If _event_wait_list_ is `NULL`, then this particular command does not
    wait on any event to complete.
    If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
    If _event_wait_list_ is not `NULL`, the list of events pointed to by
    _event_wait_list_ must be valid and _num_events_in_wait_list_ must be
    greater than 0.
    The events specified in _event_wait_list_ act as synchronization points.
  * _event_ returns an event object that identifies this command and can be
    used to query or wait for this command to complete.
    If _event_ is `NULL` or the enqueue is unsuccessful, no event will be
    created and therefore it will not be possible to query the status of
    this command or to wait for this command to complete.
    If _event_wait_list_ and _event_ are not `NULL`, _event_ must not refer
    to an element of the _event_wait_list_ array.

The EGL objects are acquired by the OpenCL context associated with
_command_queue_ and can therefore be used by all command-queues associated
with the OpenCL context.

OpenCL memory objects created from EGL resources must be acquired before
they can be used by any OpenCL commands queued to a command-queue.
If an OpenCL memory object created from a EGL resource is used while it is
not currently acquired by OpenCL, the behavior is undefined.
Implementations may fail the execution of commands attempting to use that
OpenCL memory object and set their associated event's execution status to
{CL_EGL_RESOURCE_NOT_ACQUIRED_KHR}.

// refError

{clEnqueueAcquireEGLObjectsKHR} returns {CL_SUCCESS} if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` then the function does
nothing and returns {CL_SUCCESS}.
Otherwise it returns one of the following errors:

  * {CL_INVALID_VALUE} if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if num_objects > 0 and mem_objects is `NULL`.
  * {CL_INVALID_MEM_OBJECT} if memory objects in _mem_objects_ are not valid
    OpenCL memory objects in the context associated with _command_queue_.
  * {CL_INVALID_EGL_OBJECT_KHR} if memory objects in _mem_objects_ have not
    been created from EGL resources.
  * {CL_INVALID_COMMAND_QUEUE} if _command_queue_ is not a valid
    command-queue.
  * {CL_INVALID_EVENT_WAIT_LIST} if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources
    required by the OpenCL implementation on the device.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--

[open,refpage='clEnqueueReleaseEGLObjectsKHR',desc='Release OpenCL memory objects created from EGL resources',type='protos']
--
To release OpenCL memory objects that have been created from EGL resources,
call the function

include::{generated}/api/protos/clEnqueueReleaseEGLObjectsKHR.txt[]

  * _command_queue_ is a valid command-queue.
  * _num_objects_ is the number of memory objects to be acquired in
    _mem_objects_.
  * _mem_objects_ is a pointer to a list of OpenCL memory objects that were
    created from EGL resources, within the context associate with
    command_queue.
  * _event_wait_list_ and _num_events_in_wait_list_ specify events that need
    to complete before this particular command can be executed.
    If _event_wait_list_ is `NULL`, then this particular command does not
    wait on any event to complete.
    If _event_wait_list_ is `NULL`, _num_events_in_wait_list_ must be 0.
    If _event_wait_list_ is not `NULL`, the list of events pointed to by
    _event_wait_list_ must be valid and _num_events_in_wait_list_ must be
    greater than 0.
    The events specified in _event_wait_list_ act as synchronization points.
  * _event_ returns an event object that identifies this command and can be
    used to query or wait for this command to complete.
    If _event_ is `NULL` or the enqueue is unsuccessful, no event will be
    created and therefore it will not be possible to query the status of
    this command or to wait for this command to complete.
    If _event_wait_list_ and _event_ are not `NULL`, _event_ must not refer
    to an element of the _event_wait_list_ array.

The EGL objects are released by the OpenCL context associated with
<command_queue>.

OpenCL memory objects created from EGL resources which have been acquired by
OpenCL must be released by OpenCL before they may be accessed by EGL or by
EGL client APIs.
Accessing a EGL resource while its corresponding OpenCL memory object is
acquired is in error and will result in undefined behavior, including but
not limited to possible OpenCL errors, data corruption, and program
termination.

// refError

{clEnqueueReleaseEGLObjectsKHR} returns {CL_SUCCESS} if the function is
executed successfully.
If _num_objects_ is 0 and _mem_objects_ is `NULL` then the function does
nothing and returns {CL_SUCCESS}.
Otherwise it returns one of the following errors:

  * {CL_INVALID_VALUE} if _num_objects_ is zero and _mem_objects_ is not a
    `NULL` value or if num_objects > 0 and mem_objects is `NULL`.
  * {CL_INVALID_MEM_OBJECT} if memory objects in _mem_objects_ are not valid
    OpenCL memory objects in the context associated with _command_queue_.
  * {CL_INVALID_EGL_OBJECT_KHR} if memory objects in _mem_objects_ have not
    been created from EGL resources.
  * {CL_INVALID_COMMAND_QUEUE} if _command_queue_ is not a valid
    command-queue.
  * {CL_INVALID_EVENT_WAIT_LIST} if _event_wait_list_ is `NULL` and
    _num_events_in_wait_list_ > 0, or _event_wait_list_ is not `NULL` and
    _num_events_in_wait_list_ is 0, or if event objects in _event_wait_list_
    are not valid events.
  * {CL_OUT_OF_RESOURCES} if there is a failure to allocate resources
    required by the OpenCL implementation on the device.
  * {CL_OUT_OF_HOST_MEMORY} if there is a failure to allocate resources
    required by the OpenCL implementation on the host.
--


==== Event Command Types For Sharing Memory Objects Created From EGL Resources

The following table describes the event command types for the OpenCL
commands to acquire and release OpenCL memory objects that have been created
from EGL resources:

.List of supported event command types
[width="100%",cols="2,3",options="header"]
|====
| *Events Created By* | *Event Command Type*
| {clEnqueueAcquireEGLObjectsKHR}
    | {CL_COMMAND_ACQUIRE_EGL_OBJECTS_KHR_anchor}
| {clEnqueueReleaseEGLObjectsKHR}
    | {CL_COMMAND_RELEASE_EGL_OBJECTS_KHR_anchor}
|====
