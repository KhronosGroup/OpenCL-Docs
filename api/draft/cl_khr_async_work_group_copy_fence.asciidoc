// Copyright 2017-2023 The Khronos Group.
// SPDX-License-Identifier: CC-BY-4.0

include::{generated}/meta/{refprefix}cl_khr_async_work_group_copy_fence.txt[]

=== Other Extension Metadata

*Last Modified Date*::
    2021-11-10
*IP Status*::
    No known IP claims.
*Contributors*::
    TBD

=== Description

`cl_khr_async_work_group_copy_fence` adds a new built-in function to OpenCL
C to establish a memory synchronization ordering of asynchronous copies.

=== Version History

  * Revision 0.9.0, 2020-04-21
  ** First assigned version (provisional).
  * Revision 1.0.0, 2021-11-10
  ** First non-provisional version.
//HEADER

=== Additions to Chapter 6 of the OpenCL C Specification

The following new built-in function is added to the _Async Copies from
Global to Local Memory, Local to Global Memory, and Prefetch_ functions
described in _section 6.12.10_ and _section 6.13.10_ of the OpenCL 1.2 and
OpenCL 2.0 C specifications:

[cols="1a,1",options="header",]
|====
| *Function* |*Description*
|[source,opencl_c]
----
void async_work_group_copy_fence(
    cl_mem_fence_flags flags)
----
    | Orders async copies produced by the work-items of a work-group
      executing a kernel.
      Async copies preceding the *async_work_group_copy_fence* must complete
      their access to the designated memory or memories, including both
      reads-from and writes-to it, before async copies following the fence
      are allowed to start accessing these memories.
      In other words, every async copy preceding the
      *async_work_group_copy_fence* must happen-before every async copy
      following the fence, with respect to the designated memory or
      memories.

      The _flags_ argument specifies the memory address space and can be set
      to a combination of the following literal values:

      `CLK_LOCAL_MEM_FENCE` +
      `CLK_GLOBAL_MEM_FENCE`

      The async fence is performed by all work-items in a work-group and
      this built-in function must therefore be encountered by all work-items
      in a work-group executing the kernel with the same argument values;
      otherwise the results are undefined.
      This rule applies to ND-ranges implemented with uniform and
      non-uniform work-groups.
|====
