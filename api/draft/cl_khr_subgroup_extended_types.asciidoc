ifdef::cl_khr_subgroup_extended_types[]
endif::cl_khr_subgroup_extended_types[]

[[cl_khr_subgroup_extended_types]]
=== Extended Types

`cl_khr_subgroup_extended_types` adds additional supported data types to the
existing sub-group broadcast, scan, and reduction functions.


==== Modify the Existing Section Describing Sub-group Functions

Modify the first paragraph in this section that describes `gentype` type
support for the sub-group `broadcast`, `scan`, and `reduction` functions to
add scalar `char`, `uchar`, `short`, and `ushort` support, and to
additionally add built-in vector type support for `broadcast` specifically.
The functions in the table and their descriptions remain unchanged by this
extension:

The table below describes OpenCL C programming language built-in functions
that operate on a sub-group level.
These built-in functions must be encountered by all work items in the
sub-group executing the kernel.
We use the generic type name `gentype` to indicate the built-in scalar data
types `char`, `uchar`, `short`, `ushort`, `int`, `uint`, `long`, `ulong`,
`float`, `double` (if double precision is supported), or `half` (if half
precision is supported).

For the `sub_group_broadcast` function, the generic type name `gentype` may
additionally be one of the supported built-in vector data types `char__n__`,
`uchar__n__`, `short__n__`, `ushort__n__`, `int__n__`, `uint__n__`,
`long__n__`, `ulong__n__`, `float__n__`, `double__n__` (if double precision
is supported), or `half__n__` (if half precision is supported).


[[extended-sub-groups-mapping]]
=== Function Mapping and Capabilities

This section describes a possible mapping between OpenCL built-in functions
and SPIR-V instructions and required SPIR-V capabilities.

This section is informational and non-normative.

// Note: the Unicode "zero with space" (&#8203;) causes long function names to break much more sensibly.

[cols="1,1,1",options="header"]
|====
| *OpenCL C Function* | *SPIR-V BuiltIn or Instruction* | *Enabling SPIR-V Capability*
3+| For `cl_khr_subgroup_extended_types`: +
    Note: This extension adds new types to uniform sub-group operations.

| `sub_&#8203;group_&#8203;broadcast`
        | *OpGroupBroadcast*
            | *Groups*

| `sub_&#8203;group_&#8203;reduce_&#8203;add`
        | *OpGroupIAdd*, *OpGroupFAdd*
            | *Groups*
| `sub_&#8203;group_&#8203;reduce_&#8203;min`
        | *OpGroupSMin*, *OpGroupUMin*, *OpGroupFMin*
            | *Groups*
| `sub_&#8203;group_&#8203;reduce_&#8203;max`
        | *OpGroupSMax*, *OpGroupUMax*, *OpGroupFMax*
            | *Groups*

| `sub_&#8203;group_&#8203;scan_&#8203;exclusive_&#8203;add`
        | *OpGroupIAdd*, *OpGroupFAdd*
            | *Groups*
| `sub_&#8203;group_&#8203;scan_&#8203;exclusive_&#8203;min`
        | *OpGroupSMin*, *OpGroupUMin*, *OpGroupFMin*
            | *Groups*
| `sub_&#8203;group_&#8203;scan_&#8203;exclusive_&#8203;max`
        | *OpGroupSMax*, *OpGroupUMax*, *OpGroupFMax*
            | *Groups*

| `sub_&#8203;group_&#8203;scan_&#8203;inclusive_&#8203;add`
        | *OpGroupIAdd*, *OpGroupFAdd*
            | *Groups*
| `sub_&#8203;group_&#8203;scan_&#8203;inclusive_&#8203;min`
        | *OpGroupSMin*, *OpGroupUMin*, *OpGroupFMin*
            | *Groups*
| `sub_&#8203;group_&#8203;scan_&#8203;inclusive_&#8203;max`
        | *OpGroupSMax*, *OpGroupUMax*, *OpGroupFMax*
            | *Groups*
|====
