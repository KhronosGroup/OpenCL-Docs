// Copyright 2017-2025 The Khronos Group Inc.
// SPDX-License-Identifier: CC-BY-4.0

[appendix]
= Host environment and thread safety

[[shared-opencl-objects]]
== Shared OpenCL Objects

This section describes which objects can be shared across multiple
command-queues.
The command-queues can be created in one host thread or across multiple host
threads within a host process.

OpenCL memory objects, program objects, and kernel objects are created using
an OpenCL context and can be shared across multiple command-queues created using
the same context.
Event objects can be created when a command is queued to a command-queue.
These event objects can be shared across multiple command-queues created
using the same context.

The application must implement appropriate synchronization to ensure that the
changes to the state of a shared object (such as a command-queue object, memory
object, program object, or kernel object) happen in the correct order (deemed
correct by the application) when multiple host threads or command-queues change
the state of a shared object.

The OpenCL <<memory-consistency-model, memory consistency model>> describes
how to correctly order operations that change the state of a shared object.

== Multiple Host Threads

OpenCL calls that modify the state of {cl_kernel_TYPE} objects are not
thread-safe footnote:[{fn-thread-safe}]: {clSetKernelArg},
{clSetKernelArgSVMPointer}, {clSetKernelExecInfo} and {clCloneKernel}.
These APIs are safe to call from any host thread so long as concurrent calls
operate on different {cl_kernel_TYPE} objects.
The state of a {cl_kernel_TYPE} object is undefined if {clSetKernelArg},
{clSetKernelArgSVMPointer}, {clSetKernelExecInfo} or {clCloneKernel} are called
from multiple host threads on the same {cl_kernel_TYPE} object at the same time
footnote:[{fn-race-condition}].

ifdef::cl_khr_command_buffer[]
Additionally, OpenCL calls that modify the state of {cl_command_buffer_khr_TYPE}
objects are not thread-safe:
ifdef::cl_khr_command_buffer_mutable_dispatch[]
{clFinalizeCommandBufferKHR} and {clUpdateMutableCommandsKHR}.
endif::cl_khr_command_buffer_mutable_dispatch[]
ifndef::cl_khr_command_buffer_mutable_dispatch[]
{clFinalizeCommandBufferKHR}.
endif::cl_khr_command_buffer_mutable_dispatch[]
These APIs are safe to call from any host thread so long as concurrent calls
operate on different {cl_command_buffer_khr_TYPE} objects.
The state of the {cl_command_buffer_khr_TYPE} object is undefined if
ifdef::cl_khr_command_buffer_mutable_dispatch[]
{clFinalizeCommandBufferKHR} or {clUpdateMutableCommandsKHR} are
endif::cl_khr_command_buffer_mutable_dispatch[]
ifndef::cl_khr_command_buffer_mutable_dispatch[]
{clFinalizeCommandBufferKHR} is
endif::cl_khr_command_buffer_mutable_dispatch[]
called from multiple host threads on the same {cl_command_buffer_khr_TYPE}
object at the same time.
endif::cl_khr_command_buffer[]

All other OpenCL API calls are thread-safe.
Please note that there are additional limitations as to which OpenCL APIs
may be called from <<callback-functions,OpenCL callback functions>>.

The behavior of OpenCL APIs called from an interrupt or signal handler is
implementation-defined.

The OpenCL implementation should be able to create multiple command-queues
for a given OpenCL context and multiple OpenCL contexts in an application
running on the host processor.

== Global Constructors and Destructors

The execution order of global constructors and destructors is left undefined
by the C and C++ standards. It is therefore not possible to know the relative
execution order of an OpenCL implementation's global constructors and destructors
with respect to an OpenCL application's or library's.

The behavior of OpenCL API functions called from global constructors or
destructors is therefore implementation-defined.

