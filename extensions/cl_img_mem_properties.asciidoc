:data-uri:
:icons: font
include::../config/attribs.txt[]
:source-highlighter: coderay

= cl_img_mem_properties

== Name Strings

`cl_img_mem_properties`

== Contact

Imagination Technologies Developer Forum: +
https://forums.imgtec.com/

Jeba Samuel, Imagination Technologies (Jeba.Samuels 'at' imgtec.com)

== Contributors

Jeremy Kemp, Imagination Technologies. +
Anitha Raj,  Imagination Technologies. +
Jeba Samuel, Imagination Technologies.

== Notice

Copyright (c) 2020-2024 Imagination Technologies Ltd. All Rights Reserved.

== Status

Shipping

== Version

Built On: {docdate} +
Version: 1.1.1

== Dependencies

This extension requires OpenCL 3.0 or later.

== Overview

This extension provides additional _properties_ that can be passed to *clCreateBufferWithProperties* and *clGetDeviceInfo*
This extension can be used to query additional information about Imagination OpenCL device memory. The additional information may be useful to allocate memory objects in different types of memory regions supported by the device.

== New API Types

[source,c]
----
typedef cl_bitfield cl_mem_alloc_flags_img;
----

== New API Enums
Accepted propertie(s) for the _properties_ parameter to *clCreateBufferWithProperties*:

[source,c]
----
#define CL_MEM_ALLOC_FLAGS_IMG 0x40D7
----

Accepted values for `cl_mem_alloc_flags_img`:

[source,c]
----
#define CL_MEM_ALLOC_RELAX_REQUIREMENTS_IMG (1 << 0)
#define CL_MEM_ALLOC_GPU_WRITE_COMBINE_IMG  (1 << 1)
#define CL_MEM_ALLOC_GPU_CACHED_IMG         (1 << 2)
#define CL_MEM_ALLOC_CPU_LOCAL_IMG          (1 << 3)
#define CL_MEM_ALLOC_GPU_LOCAL_IMG          (1 << 4)
#define CL_MEM_ALLOC_GPU_PRIVATE_IMG        (1 << 5)

----

== Modifications to the OpenCL API Specification

(Modify Section 5.2.1, *Creating Buffer Objects*) ::
+
--
Add Table: List of supported _properties_ when passed to *clCreateBufferWithProperties* ::
+
[cols="1,1,4",options="header",width = "90%"]
|====
| Property
| Property Value
| Description

| `CL_MEM_ALLOC_FLAGS_IMG`
| `cl_mem_alloc_flags_img`
| `CL_MEM_ALLOC_RELAX_REQUIREMENTS_IMG` - On platforms with limited amounts of global memory available it may be desirable to request an allocation larger than the maximum amount reported by the implementation via `CL_DEVICE_MAX_MEM_ALLOC_SIZE` if there is sufficient knowledge about the entire system.
This property allows an application to request buffer objects that are larger than `CL_DEVICE_MAX_MEM_ALLOC_SIZE`.
`CL_MEM_ALLOC_GPU_WRITE_COMBINE_IMG` - The GPU device memory backing this allocation will be allocated with the GPU Write Combine flag.
`CL_MEM_ALLOC_GPU_CACHED_IMG` - The GPU device memory backing this allocation will be allocated with the GPU Cached flag.
`CL_MEM_ALLOC_GPU_WRITE_COMBINE_IMG` and `CL_MEM_ALLOC_GPU_CACHED_IMG` are mutually exclusive.
`CL_MEM_ALLOC_CPU_LOCAL_IMG` - The GPU device memory backing this allocation will come from physical memory accessible to both the CPU and GPU.
`CL_MEM_ALLOC_GPU_LOCAL_IMG` - The GPU device memory backing this allocation will come from physical memory accessible to both the CPU and GPU.
`CL_MEM_ALLOC_GPU_PRIVATE_IMG` - The GPU device memory backing this allocation will come from physical memory accessible to the GPU only.
`CL_MEM_ALLOC_CPU_LOCAL_IMG` and `CL_MEM_ALLOC_GPU_LOCAL_IMG` and `CL_MEM_ALLOC_GPU_PRIVATE_IMG` are mutually exclusive.

|====
(Replace the following error value) ::
+
* `CL_INVALID_BUFFER_SIZE` if _size_ is 0 or if _size_ is greater than `CL_DEVICE_MAX_MEM_ALLOC_SIZE` for all devices in _context_.
+
with
+
* `CL_INVALID_BUFFER_SIZE` if _size_ is 0.
(Add the following error value) ::
* `CL_INVALID_VALUE` if both `CL_MEM_ALLOC_GPU_WRITE_COMBINE_IMG` and `CL_MEM_ALLOC_GPU_CACHED_IMG` are set.
* `CL_INVALID_VALUE` if both `CL_MEM_ALLOC_CPU_LOCAL_IMG` and `CL_MEM_ALLOC_GPU_PRIVATE_IMG` are set.
* `CL_INVALID_VALUE` if both `CL_MEM_ALLOC_CPU_LOCAL_IMG` and `CL_MEM_ALLOC_GPU_LOCAL_IMG` are set.
* `CL_INVALID_VALUE` if both `CL_MEM_ALLOC_GPU_LOCAL_IMG` and `CL_MEM_ALLOC_GPU_PRIVATE_IMG` are set.
* `CL_INVALID_VALUE` if `CL_MEM_ALLOC_CPU_LOCAL_IMG` and `CL_MEM_ALLOC_GPU_LOCAL_IMG` and `CL_MEM_ALLOC_GPU_PRIVATE_IMG` are set.

--

(Modify Section 4.2, *Querying Devices*) ::
+
--
Add Table: List of supported param name by *clGetDeviceInfo* ::
+
[cols="1,1,4",options="header",width = "90%"]
|====
| clDeviceInfo
| Return Type
| Description

| `CL_DEVICE_MEMORY_CAPABILITIES_IMG`
| `cl_mem_alloc_flags_img`
| Allocation flags describing the memory region capabilities by the device.
|====
--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|====
| Version | Date       | Author       | Changes
| 1.0.0   | 2020-08-18 | Jeremy Kemp | Initial revision.
| 1.1.0   | 2022-01-04 | Jeremy Kemp | Added internal values for cl_mem_alloc_flags_img (1 << 1 and 1 << 2). Corrected a typo.
| 1.1.1   | 2023-11-16 | Jeba Samuel | Added internal values for cl_mem_alloc_flags_img (1 << 3 and 1 << 4). The flag provides heap hint for local memory regions of the CPU, GPU and scratchpad memory region of the GPU. The extension allows to query the supported memory regions.
|====
